   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"usart.c"
  23              	.Ltext0:
  24              		.file 1 "../USART/usart.c"
 16051              		.align	2
 16052              		.thumb
 16053              		.thumb_func
 16055              	NVIC_EnableIRQ:
 16056              	.LFB14:
   1:../USART/../libs/core_cm3.h **** /**************************************************************************//**
   2:../USART/../libs/core_cm3.h ****  * @file     core_cm3.h
   3:../USART/../libs/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../USART/../libs/core_cm3.h ****  * @version  V1.30
   5:../USART/../libs/core_cm3.h ****  * @date     30. October 2009
   6:../USART/../libs/core_cm3.h ****  *
   7:../USART/../libs/core_cm3.h ****  * @note
   8:../USART/../libs/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:../USART/../libs/core_cm3.h ****  *
  10:../USART/../libs/core_cm3.h ****  * @par
  11:../USART/../libs/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../USART/../libs/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../USART/../libs/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:../USART/../libs/core_cm3.h ****  *
  15:../USART/../libs/core_cm3.h ****  * @par
  16:../USART/../libs/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../USART/../libs/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../USART/../libs/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../USART/../libs/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../USART/../libs/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../USART/../libs/core_cm3.h ****  *
  22:../USART/../libs/core_cm3.h ****  ******************************************************************************/
  23:../USART/../libs/core_cm3.h **** 
  24:../USART/../libs/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:../USART/../libs/core_cm3.h **** #define __CM3_CORE_H__
  26:../USART/../libs/core_cm3.h **** 
  27:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:../USART/../libs/core_cm3.h ****  *
  29:../USART/../libs/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:../USART/../libs/core_cm3.h ****  *   - Error 10: \n
  31:../USART/../libs/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:../USART/../libs/core_cm3.h ****  *     Error 10: Expecting ';'
  33:../USART/../libs/core_cm3.h ****  * .
  34:../USART/../libs/core_cm3.h ****  *   - Error 530: \n
  35:../USART/../libs/core_cm3.h ****  *     return(__regBasePri); \n
  36:../USART/../libs/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:../USART/../libs/core_cm3.h ****  * . 
  38:../USART/../libs/core_cm3.h ****  *   - Error 550: \n
  39:../USART/../libs/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:../USART/../libs/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:../USART/../libs/core_cm3.h ****  * .
  42:../USART/../libs/core_cm3.h ****  *   - Error 754: \n
  43:../USART/../libs/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:../USART/../libs/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:../USART/../libs/core_cm3.h ****  * .
  46:../USART/../libs/core_cm3.h ****  *   - Error 750: \n
  47:../USART/../libs/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:../USART/../libs/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:../USART/../libs/core_cm3.h ****  * .
  50:../USART/../libs/core_cm3.h ****  *   - Error 528: \n
  51:../USART/../libs/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:../USART/../libs/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:../USART/../libs/core_cm3.h ****  * .
  54:../USART/../libs/core_cm3.h ****  *   - Error 751: \n
  55:../USART/../libs/core_cm3.h ****  *     } InterruptType_Type; \n
  56:../USART/../libs/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:../USART/../libs/core_cm3.h ****  * .
  58:../USART/../libs/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:../USART/../libs/core_cm3.h ****  *
  60:../USART/../libs/core_cm3.h ****  */
  61:../USART/../libs/core_cm3.h **** 
  62:../USART/../libs/core_cm3.h **** /*lint -save */
  63:../USART/../libs/core_cm3.h **** /*lint -e10  */
  64:../USART/../libs/core_cm3.h **** /*lint -e530 */
  65:../USART/../libs/core_cm3.h **** /*lint -e550 */
  66:../USART/../libs/core_cm3.h **** /*lint -e754 */
  67:../USART/../libs/core_cm3.h **** /*lint -e750 */
  68:../USART/../libs/core_cm3.h **** /*lint -e528 */
  69:../USART/../libs/core_cm3.h **** /*lint -e751 */
  70:../USART/../libs/core_cm3.h **** 
  71:../USART/../libs/core_cm3.h **** 
  72:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:../USART/../libs/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:../USART/../libs/core_cm3.h ****     - CMSIS version number
  75:../USART/../libs/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:../USART/../libs/core_cm3.h ****     - Cortex-M core peripheral base address
  77:../USART/../libs/core_cm3.h ****   @{
  78:../USART/../libs/core_cm3.h ****  */
  79:../USART/../libs/core_cm3.h **** 
  80:../USART/../libs/core_cm3.h **** #ifdef __cplusplus
  81:../USART/../libs/core_cm3.h ****  extern "C" {
  82:../USART/../libs/core_cm3.h **** #endif 
  83:../USART/../libs/core_cm3.h **** 
  84:../USART/../libs/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:../USART/../libs/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:../USART/../libs/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:../USART/../libs/core_cm3.h **** 
  88:../USART/../libs/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:../USART/../libs/core_cm3.h **** 
  90:../USART/../libs/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:../USART/../libs/core_cm3.h **** 
  92:../USART/../libs/core_cm3.h **** #if defined (__ICCARM__)
  93:../USART/../libs/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:../USART/../libs/core_cm3.h **** #endif
  95:../USART/../libs/core_cm3.h **** 
  96:../USART/../libs/core_cm3.h **** 
  97:../USART/../libs/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:../USART/../libs/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:../USART/../libs/core_cm3.h **** #endif
 100:../USART/../libs/core_cm3.h **** 
 101:../USART/../libs/core_cm3.h **** 
 102:../USART/../libs/core_cm3.h **** 
 103:../USART/../libs/core_cm3.h **** 
 104:../USART/../libs/core_cm3.h **** /**
 105:../USART/../libs/core_cm3.h ****  * IO definitions
 106:../USART/../libs/core_cm3.h ****  *
 107:../USART/../libs/core_cm3.h ****  * define access restrictions to peripheral registers
 108:../USART/../libs/core_cm3.h ****  */
 109:../USART/../libs/core_cm3.h **** 
 110:../USART/../libs/core_cm3.h **** #ifdef __cplusplus
 111:../USART/../libs/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:../USART/../libs/core_cm3.h **** #else
 113:../USART/../libs/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:../USART/../libs/core_cm3.h **** #endif
 115:../USART/../libs/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:../USART/../libs/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:../USART/../libs/core_cm3.h **** 
 118:../USART/../libs/core_cm3.h **** 
 119:../USART/../libs/core_cm3.h **** 
 120:../USART/../libs/core_cm3.h **** /*******************************************************************************
 121:../USART/../libs/core_cm3.h ****  *                 Register Abstraction
 122:../USART/../libs/core_cm3.h ****  ******************************************************************************/
 123:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:../USART/../libs/core_cm3.h ****  @{
 125:../USART/../libs/core_cm3.h **** */
 126:../USART/../libs/core_cm3.h **** 
 127:../USART/../libs/core_cm3.h **** 
 128:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:../USART/../libs/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:../USART/../libs/core_cm3.h ****   @{
 131:../USART/../libs/core_cm3.h ****  */
 132:../USART/../libs/core_cm3.h **** typedef struct
 133:../USART/../libs/core_cm3.h **** {
 134:../USART/../libs/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:../USART/../libs/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:../USART/../libs/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:../USART/../libs/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:../USART/../libs/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:../USART/../libs/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:../USART/../libs/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:../USART/../libs/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:../USART/../libs/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:../USART/../libs/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:../USART/../libs/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:../USART/../libs/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:../USART/../libs/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:../USART/../libs/core_cm3.h **** }  NVIC_Type;                                               
 148:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:../USART/../libs/core_cm3.h **** 
 150:../USART/../libs/core_cm3.h **** 
 151:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:../USART/../libs/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:../USART/../libs/core_cm3.h ****   @{
 154:../USART/../libs/core_cm3.h ****  */
 155:../USART/../libs/core_cm3.h **** typedef struct
 156:../USART/../libs/core_cm3.h **** {
 157:../USART/../libs/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:../USART/../libs/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:../USART/../libs/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:../USART/../libs/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:../USART/../libs/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:../USART/../libs/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:../USART/../libs/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:../USART/../libs/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:../USART/../libs/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:../USART/../libs/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:../USART/../libs/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:../USART/../libs/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:../USART/../libs/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:../USART/../libs/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:../USART/../libs/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:../USART/../libs/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:../USART/../libs/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:../USART/../libs/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:../USART/../libs/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:../USART/../libs/core_cm3.h **** } SCB_Type;                                                
 177:../USART/../libs/core_cm3.h **** 
 178:../USART/../libs/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:../USART/../libs/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:../USART/../libs/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:../USART/../libs/core_cm3.h **** 
 182:../USART/../libs/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:../USART/../libs/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:../USART/../libs/core_cm3.h **** 
 185:../USART/../libs/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:../USART/../libs/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:../USART/../libs/core_cm3.h **** 
 188:../USART/../libs/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:../USART/../libs/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:../USART/../libs/core_cm3.h **** 
 191:../USART/../libs/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:../USART/../libs/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:../USART/../libs/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:../USART/../libs/core_cm3.h **** 
 195:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:../USART/../libs/core_cm3.h **** 
 198:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:../USART/../libs/core_cm3.h **** 
 201:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:../USART/../libs/core_cm3.h **** 
 204:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:../USART/../libs/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:../USART/../libs/core_cm3.h **** 
 207:../USART/../libs/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:../USART/../libs/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:../USART/../libs/core_cm3.h **** 
 210:../USART/../libs/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:../USART/../libs/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:../USART/../libs/core_cm3.h **** 
 213:../USART/../libs/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:../USART/../libs/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:../USART/../libs/core_cm3.h **** 
 216:../USART/../libs/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:../USART/../libs/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:../USART/../libs/core_cm3.h **** 
 219:../USART/../libs/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:../USART/../libs/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:../USART/../libs/core_cm3.h **** 
 222:../USART/../libs/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:../USART/../libs/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:../USART/../libs/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:../USART/../libs/core_cm3.h **** 
 226:../USART/../libs/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:../USART/../libs/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:../USART/../libs/core_cm3.h **** 
 229:../USART/../libs/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:../USART/../libs/core_cm3.h **** 
 233:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:../USART/../libs/core_cm3.h **** 
 236:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:../USART/../libs/core_cm3.h **** 
 239:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:../USART/../libs/core_cm3.h **** 
 242:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:../USART/../libs/core_cm3.h **** 
 245:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:../USART/../libs/core_cm3.h **** 
 248:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:../USART/../libs/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:../USART/../libs/core_cm3.h **** 
 251:../USART/../libs/core_cm3.h **** /* SCB System Control Register Definitions */
 252:../USART/../libs/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:../USART/../libs/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:../USART/../libs/core_cm3.h **** 
 255:../USART/../libs/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:../USART/../libs/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:../USART/../libs/core_cm3.h **** 
 258:../USART/../libs/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:../USART/../libs/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:../USART/../libs/core_cm3.h **** 
 261:../USART/../libs/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:../USART/../libs/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:../USART/../libs/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:../USART/../libs/core_cm3.h **** 
 265:../USART/../libs/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:../USART/../libs/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:../USART/../libs/core_cm3.h **** 
 268:../USART/../libs/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:../USART/../libs/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:../USART/../libs/core_cm3.h **** 
 271:../USART/../libs/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:../USART/../libs/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:../USART/../libs/core_cm3.h **** 
 274:../USART/../libs/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:../USART/../libs/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:../USART/../libs/core_cm3.h **** 
 277:../USART/../libs/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:../USART/../libs/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:../USART/../libs/core_cm3.h **** 
 280:../USART/../libs/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:../USART/../libs/core_cm3.h **** 
 284:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:../USART/../libs/core_cm3.h **** 
 287:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:../USART/../libs/core_cm3.h **** 
 290:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:../USART/../libs/core_cm3.h **** 
 293:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:../USART/../libs/core_cm3.h **** 
 296:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:../USART/../libs/core_cm3.h **** 
 299:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:../USART/../libs/core_cm3.h **** 
 302:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:../USART/../libs/core_cm3.h **** 
 305:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:../USART/../libs/core_cm3.h **** 
 308:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:../USART/../libs/core_cm3.h **** 
 311:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:../USART/../libs/core_cm3.h ****                                      
 314:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:../USART/../libs/core_cm3.h **** 
 317:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:../USART/../libs/core_cm3.h **** 
 320:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:../USART/../libs/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:../USART/../libs/core_cm3.h **** 
 323:../USART/../libs/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:../USART/../libs/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:../USART/../libs/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:../USART/../libs/core_cm3.h **** 
 327:../USART/../libs/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:../USART/../libs/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:../USART/../libs/core_cm3.h **** 
 330:../USART/../libs/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:../USART/../libs/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:../USART/../libs/core_cm3.h **** 
 333:../USART/../libs/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:../USART/../libs/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:../USART/../libs/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:../USART/../libs/core_cm3.h **** 
 337:../USART/../libs/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:../USART/../libs/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:../USART/../libs/core_cm3.h **** 
 340:../USART/../libs/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:../USART/../libs/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:../USART/../libs/core_cm3.h **** 
 343:../USART/../libs/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:../USART/../libs/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:../USART/../libs/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:../USART/../libs/core_cm3.h **** 
 347:../USART/../libs/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:../USART/../libs/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:../USART/../libs/core_cm3.h **** 
 350:../USART/../libs/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:../USART/../libs/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:../USART/../libs/core_cm3.h **** 
 353:../USART/../libs/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:../USART/../libs/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:../USART/../libs/core_cm3.h **** 
 356:../USART/../libs/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:../USART/../libs/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:../USART/../libs/core_cm3.h **** 
 360:../USART/../libs/core_cm3.h **** 
 361:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:../USART/../libs/core_cm3.h ****   memory mapped structure for SysTick
 363:../USART/../libs/core_cm3.h ****   @{
 364:../USART/../libs/core_cm3.h ****  */
 365:../USART/../libs/core_cm3.h **** typedef struct
 366:../USART/../libs/core_cm3.h **** {
 367:../USART/../libs/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:../USART/../libs/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:../USART/../libs/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:../USART/../libs/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:../USART/../libs/core_cm3.h **** } SysTick_Type;
 372:../USART/../libs/core_cm3.h **** 
 373:../USART/../libs/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:../USART/../libs/core_cm3.h **** 
 377:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:../USART/../libs/core_cm3.h **** 
 380:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:../USART/../libs/core_cm3.h **** 
 383:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:../USART/../libs/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:../USART/../libs/core_cm3.h **** 
 386:../USART/../libs/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:../USART/../libs/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:../USART/../libs/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:../USART/../libs/core_cm3.h **** 
 390:../USART/../libs/core_cm3.h **** /* SysTick Current Register Definitions */
 391:../USART/../libs/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:../USART/../libs/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:../USART/../libs/core_cm3.h **** 
 394:../USART/../libs/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:../USART/../libs/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:../USART/../libs/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:../USART/../libs/core_cm3.h **** 
 398:../USART/../libs/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:../USART/../libs/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:../USART/../libs/core_cm3.h **** 
 401:../USART/../libs/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:../USART/../libs/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:../USART/../libs/core_cm3.h **** 
 405:../USART/../libs/core_cm3.h **** 
 406:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:../USART/../libs/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:../USART/../libs/core_cm3.h ****   @{
 409:../USART/../libs/core_cm3.h ****  */
 410:../USART/../libs/core_cm3.h **** typedef struct
 411:../USART/../libs/core_cm3.h **** {
 412:../USART/../libs/core_cm3.h ****   __O  union  
 413:../USART/../libs/core_cm3.h ****   {
 414:../USART/../libs/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:../USART/../libs/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:../USART/../libs/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:../USART/../libs/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:../USART/../libs/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:../USART/../libs/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:../USART/../libs/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:../USART/../libs/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:../USART/../libs/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:../USART/../libs/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:../USART/../libs/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:../USART/../libs/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:../USART/../libs/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:../USART/../libs/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:../USART/../libs/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:../USART/../libs/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:../USART/../libs/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:../USART/../libs/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:../USART/../libs/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:../USART/../libs/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:../USART/../libs/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:../USART/../libs/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:../USART/../libs/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:../USART/../libs/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:../USART/../libs/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:../USART/../libs/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:../USART/../libs/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:../USART/../libs/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:../USART/../libs/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:../USART/../libs/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:../USART/../libs/core_cm3.h **** } ITM_Type;                                                
 445:../USART/../libs/core_cm3.h **** 
 446:../USART/../libs/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:../USART/../libs/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:../USART/../libs/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:../USART/../libs/core_cm3.h **** 
 450:../USART/../libs/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:../USART/../libs/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:../USART/../libs/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:../USART/../libs/core_cm3.h **** 
 454:../USART/../libs/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:../USART/../libs/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:../USART/../libs/core_cm3.h **** 
 457:../USART/../libs/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:../USART/../libs/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:../USART/../libs/core_cm3.h **** 
 460:../USART/../libs/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:../USART/../libs/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:../USART/../libs/core_cm3.h **** 
 463:../USART/../libs/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:../USART/../libs/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:../USART/../libs/core_cm3.h **** 
 466:../USART/../libs/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:../USART/../libs/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:../USART/../libs/core_cm3.h **** 
 469:../USART/../libs/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:../USART/../libs/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:../USART/../libs/core_cm3.h **** 
 472:../USART/../libs/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:../USART/../libs/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:../USART/../libs/core_cm3.h **** 
 475:../USART/../libs/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:../USART/../libs/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:../USART/../libs/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:../USART/../libs/core_cm3.h **** 
 479:../USART/../libs/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:../USART/../libs/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:../USART/../libs/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:../USART/../libs/core_cm3.h **** 
 483:../USART/../libs/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:../USART/../libs/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:../USART/../libs/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:../USART/../libs/core_cm3.h **** 
 487:../USART/../libs/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:../USART/../libs/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:../USART/../libs/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:../USART/../libs/core_cm3.h **** 
 491:../USART/../libs/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:../USART/../libs/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:../USART/../libs/core_cm3.h **** 
 494:../USART/../libs/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:../USART/../libs/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:../USART/../libs/core_cm3.h **** 
 498:../USART/../libs/core_cm3.h **** 
 499:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:../USART/../libs/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:../USART/../libs/core_cm3.h ****   @{
 502:../USART/../libs/core_cm3.h ****  */
 503:../USART/../libs/core_cm3.h **** typedef struct
 504:../USART/../libs/core_cm3.h **** {
 505:../USART/../libs/core_cm3.h ****        uint32_t RESERVED0;
 506:../USART/../libs/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:../USART/../libs/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:../USART/../libs/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:../USART/../libs/core_cm3.h **** #else
 510:../USART/../libs/core_cm3.h ****        uint32_t RESERVED1;
 511:../USART/../libs/core_cm3.h **** #endif
 512:../USART/../libs/core_cm3.h **** } InterruptType_Type;
 513:../USART/../libs/core_cm3.h **** 
 514:../USART/../libs/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:../USART/../libs/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:../USART/../libs/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:../USART/../libs/core_cm3.h **** 
 518:../USART/../libs/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:../USART/../libs/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:../USART/../libs/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:../USART/../libs/core_cm3.h **** 
 522:../USART/../libs/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:../USART/../libs/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:../USART/../libs/core_cm3.h **** 
 525:../USART/../libs/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:../USART/../libs/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:../USART/../libs/core_cm3.h **** 
 529:../USART/../libs/core_cm3.h **** 
 530:../USART/../libs/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:../USART/../libs/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:../USART/../libs/core_cm3.h ****   @{
 534:../USART/../libs/core_cm3.h ****  */
 535:../USART/../libs/core_cm3.h **** typedef struct
 536:../USART/../libs/core_cm3.h **** {
 537:../USART/../libs/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:../USART/../libs/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:../USART/../libs/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:../USART/../libs/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:../USART/../libs/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:../USART/../libs/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:../USART/../libs/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:../USART/../libs/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:../USART/../libs/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:../USART/../libs/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:../USART/../libs/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:../USART/../libs/core_cm3.h **** } MPU_Type;                                                
 549:../USART/../libs/core_cm3.h **** 
 550:../USART/../libs/core_cm3.h **** /* MPU Type Register */
 551:../USART/../libs/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:../USART/../libs/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:../USART/../libs/core_cm3.h **** 
 554:../USART/../libs/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:../USART/../libs/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:../USART/../libs/core_cm3.h **** 
 557:../USART/../libs/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:../USART/../libs/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:../USART/../libs/core_cm3.h **** 
 560:../USART/../libs/core_cm3.h **** /* MPU Control Register */
 561:../USART/../libs/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:../USART/../libs/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:../USART/../libs/core_cm3.h **** 
 564:../USART/../libs/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:../USART/../libs/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:../USART/../libs/core_cm3.h **** 
 567:../USART/../libs/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:../USART/../libs/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:../USART/../libs/core_cm3.h **** 
 570:../USART/../libs/core_cm3.h **** /* MPU Region Number Register */
 571:../USART/../libs/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:../USART/../libs/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:../USART/../libs/core_cm3.h **** 
 574:../USART/../libs/core_cm3.h **** /* MPU Region Base Address Register */
 575:../USART/../libs/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:../USART/../libs/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:../USART/../libs/core_cm3.h **** 
 578:../USART/../libs/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:../USART/../libs/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:../USART/../libs/core_cm3.h **** 
 581:../USART/../libs/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:../USART/../libs/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:../USART/../libs/core_cm3.h **** 
 584:../USART/../libs/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:../USART/../libs/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:../USART/../libs/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:../USART/../libs/core_cm3.h **** 
 588:../USART/../libs/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:../USART/../libs/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:../USART/../libs/core_cm3.h **** 
 591:../USART/../libs/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:../USART/../libs/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:../USART/../libs/core_cm3.h **** 
 594:../USART/../libs/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:../USART/../libs/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:../USART/../libs/core_cm3.h **** 
 597:../USART/../libs/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:../USART/../libs/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:../USART/../libs/core_cm3.h **** 
 600:../USART/../libs/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:../USART/../libs/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:../USART/../libs/core_cm3.h **** 
 603:../USART/../libs/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:../USART/../libs/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:../USART/../libs/core_cm3.h **** 
 606:../USART/../libs/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:../USART/../libs/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:../USART/../libs/core_cm3.h **** 
 609:../USART/../libs/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:../USART/../libs/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:../USART/../libs/core_cm3.h **** 
 612:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:../USART/../libs/core_cm3.h **** #endif
 614:../USART/../libs/core_cm3.h **** 
 615:../USART/../libs/core_cm3.h **** 
 616:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:../USART/../libs/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:../USART/../libs/core_cm3.h ****   @{
 619:../USART/../libs/core_cm3.h ****  */
 620:../USART/../libs/core_cm3.h **** typedef struct
 621:../USART/../libs/core_cm3.h **** {
 622:../USART/../libs/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:../USART/../libs/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:../USART/../libs/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:../USART/../libs/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:../USART/../libs/core_cm3.h **** } CoreDebug_Type;
 627:../USART/../libs/core_cm3.h **** 
 628:../USART/../libs/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:../USART/../libs/core_cm3.h **** 
 632:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:../USART/../libs/core_cm3.h **** 
 635:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:../USART/../libs/core_cm3.h **** 
 638:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:../USART/../libs/core_cm3.h **** 
 641:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:../USART/../libs/core_cm3.h **** 
 644:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:../USART/../libs/core_cm3.h **** 
 647:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:../USART/../libs/core_cm3.h **** 
 650:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:../USART/../libs/core_cm3.h **** 
 653:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:../USART/../libs/core_cm3.h **** 
 656:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:../USART/../libs/core_cm3.h **** 
 659:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:../USART/../libs/core_cm3.h **** 
 662:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:../USART/../libs/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:../USART/../libs/core_cm3.h **** 
 665:../USART/../libs/core_cm3.h **** /* Debug Core Register Selector Register */
 666:../USART/../libs/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:../USART/../libs/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:../USART/../libs/core_cm3.h **** 
 669:../USART/../libs/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:../USART/../libs/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:../USART/../libs/core_cm3.h **** 
 672:../USART/../libs/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:../USART/../libs/core_cm3.h **** 
 676:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:../USART/../libs/core_cm3.h **** 
 679:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:../USART/../libs/core_cm3.h **** 
 682:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:../USART/../libs/core_cm3.h **** 
 685:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:../USART/../libs/core_cm3.h **** 
 688:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:../USART/../libs/core_cm3.h **** 
 691:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:../USART/../libs/core_cm3.h **** 
 694:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:../USART/../libs/core_cm3.h **** 
 697:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:../USART/../libs/core_cm3.h **** 
 700:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:../USART/../libs/core_cm3.h **** 
 703:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:../USART/../libs/core_cm3.h **** 
 706:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:../USART/../libs/core_cm3.h **** 
 709:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:../USART/../libs/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:../USART/../libs/core_cm3.h **** 
 713:../USART/../libs/core_cm3.h **** 
 714:../USART/../libs/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:../USART/../libs/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:../USART/../libs/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:../USART/../libs/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:../USART/../libs/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:../USART/../libs/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:../USART/../libs/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:../USART/../libs/core_cm3.h **** 
 722:../USART/../libs/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:../USART/../libs/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:../USART/../libs/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:../USART/../libs/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:../USART/../libs/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:../USART/../libs/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:../USART/../libs/core_cm3.h **** 
 729:../USART/../libs/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:../USART/../libs/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:../USART/../libs/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:../USART/../libs/core_cm3.h **** #endif
 733:../USART/../libs/core_cm3.h **** 
 734:../USART/../libs/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:../USART/../libs/core_cm3.h **** 
 736:../USART/../libs/core_cm3.h **** 
 737:../USART/../libs/core_cm3.h **** /*******************************************************************************
 738:../USART/../libs/core_cm3.h ****  *                Hardware Abstraction Layer
 739:../USART/../libs/core_cm3.h ****  ******************************************************************************/
 740:../USART/../libs/core_cm3.h **** 
 741:../USART/../libs/core_cm3.h **** #if defined ( __CC_ARM   )
 742:../USART/../libs/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:../USART/../libs/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:../USART/../libs/core_cm3.h **** 
 745:../USART/../libs/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:../USART/../libs/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:../USART/../libs/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:../USART/../libs/core_cm3.h **** 
 749:../USART/../libs/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:../USART/../libs/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:../USART/../libs/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:../USART/../libs/core_cm3.h **** 
 753:../USART/../libs/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:../USART/../libs/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:../USART/../libs/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:../USART/../libs/core_cm3.h **** 
 757:../USART/../libs/core_cm3.h **** #endif
 758:../USART/../libs/core_cm3.h **** 
 759:../USART/../libs/core_cm3.h **** 
 760:../USART/../libs/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:../USART/../libs/core_cm3.h **** 
 762:../USART/../libs/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:../USART/../libs/core_cm3.h **** /* ARM armcc specific functions */
 764:../USART/../libs/core_cm3.h **** 
 765:../USART/../libs/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:../USART/../libs/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:../USART/../libs/core_cm3.h **** 
 768:../USART/../libs/core_cm3.h **** #define __NOP                             __nop
 769:../USART/../libs/core_cm3.h **** #define __WFI                             __wfi
 770:../USART/../libs/core_cm3.h **** #define __WFE                             __wfe
 771:../USART/../libs/core_cm3.h **** #define __SEV                             __sev
 772:../USART/../libs/core_cm3.h **** #define __ISB()                           __isb(0)
 773:../USART/../libs/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:../USART/../libs/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:../USART/../libs/core_cm3.h **** #define __REV                             __rev
 776:../USART/../libs/core_cm3.h **** #define __RBIT                            __rbit
 777:../USART/../libs/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:../USART/../libs/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:../USART/../libs/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:../USART/../libs/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:../USART/../libs/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:../USART/../libs/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:../USART/../libs/core_cm3.h **** 
 784:../USART/../libs/core_cm3.h **** 
 785:../USART/../libs/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:../USART/../libs/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:../USART/../libs/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:../USART/../libs/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:../USART/../libs/core_cm3.h **** 
 790:../USART/../libs/core_cm3.h **** 
 791:../USART/../libs/core_cm3.h **** /**
 792:../USART/../libs/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:../USART/../libs/core_cm3.h ****  *
 794:../USART/../libs/core_cm3.h ****  * @return ProcessStackPointer
 795:../USART/../libs/core_cm3.h ****  *
 796:../USART/../libs/core_cm3.h ****  * Return the actual process stack pointer
 797:../USART/../libs/core_cm3.h ****  */
 798:../USART/../libs/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:../USART/../libs/core_cm3.h **** 
 800:../USART/../libs/core_cm3.h **** /**
 801:../USART/../libs/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:../USART/../libs/core_cm3.h ****  *
 803:../USART/../libs/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:../USART/../libs/core_cm3.h ****  *
 805:../USART/../libs/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:../USART/../libs/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:../USART/../libs/core_cm3.h ****  */
 808:../USART/../libs/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:../USART/../libs/core_cm3.h **** 
 810:../USART/../libs/core_cm3.h **** /**
 811:../USART/../libs/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:../USART/../libs/core_cm3.h ****  *
 813:../USART/../libs/core_cm3.h ****  * @return Main Stack Pointer
 814:../USART/../libs/core_cm3.h ****  *
 815:../USART/../libs/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:../USART/../libs/core_cm3.h ****  * Cortex processor register
 817:../USART/../libs/core_cm3.h ****  */
 818:../USART/../libs/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:../USART/../libs/core_cm3.h **** 
 820:../USART/../libs/core_cm3.h **** /**
 821:../USART/../libs/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:../USART/../libs/core_cm3.h ****  *
 823:../USART/../libs/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:../USART/../libs/core_cm3.h ****  *
 825:../USART/../libs/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:../USART/../libs/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:../USART/../libs/core_cm3.h ****  */
 828:../USART/../libs/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:../USART/../libs/core_cm3.h **** 
 830:../USART/../libs/core_cm3.h **** /**
 831:../USART/../libs/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:../USART/../libs/core_cm3.h ****  *
 833:../USART/../libs/core_cm3.h ****  * @param   value  value to reverse
 834:../USART/../libs/core_cm3.h ****  * @return         reversed value
 835:../USART/../libs/core_cm3.h ****  *
 836:../USART/../libs/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:../USART/../libs/core_cm3.h ****  */
 838:../USART/../libs/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:../USART/../libs/core_cm3.h **** 
 840:../USART/../libs/core_cm3.h **** /**
 841:../USART/../libs/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:../USART/../libs/core_cm3.h ****  *
 843:../USART/../libs/core_cm3.h ****  * @param   value  value to reverse
 844:../USART/../libs/core_cm3.h ****  * @return         reversed value
 845:../USART/../libs/core_cm3.h ****  *
 846:../USART/../libs/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:../USART/../libs/core_cm3.h ****  */
 848:../USART/../libs/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:../USART/../libs/core_cm3.h **** 
 850:../USART/../libs/core_cm3.h **** 
 851:../USART/../libs/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:../USART/../libs/core_cm3.h **** 
 853:../USART/../libs/core_cm3.h **** /**
 854:../USART/../libs/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:../USART/../libs/core_cm3.h ****  *
 856:../USART/../libs/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:../USART/../libs/core_cm3.h ****  */
 858:../USART/../libs/core_cm3.h **** extern void __CLREX(void);
 859:../USART/../libs/core_cm3.h **** 
 860:../USART/../libs/core_cm3.h **** /**
 861:../USART/../libs/core_cm3.h ****  * @brief  Return the Base Priority value
 862:../USART/../libs/core_cm3.h ****  *
 863:../USART/../libs/core_cm3.h ****  * @return BasePriority
 864:../USART/../libs/core_cm3.h ****  *
 865:../USART/../libs/core_cm3.h ****  * Return the content of the base priority register
 866:../USART/../libs/core_cm3.h ****  */
 867:../USART/../libs/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:../USART/../libs/core_cm3.h **** 
 869:../USART/../libs/core_cm3.h **** /**
 870:../USART/../libs/core_cm3.h ****  * @brief  Set the Base Priority value
 871:../USART/../libs/core_cm3.h ****  *
 872:../USART/../libs/core_cm3.h ****  * @param  basePri  BasePriority
 873:../USART/../libs/core_cm3.h ****  *
 874:../USART/../libs/core_cm3.h ****  * Set the base priority register
 875:../USART/../libs/core_cm3.h ****  */
 876:../USART/../libs/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:../USART/../libs/core_cm3.h **** 
 878:../USART/../libs/core_cm3.h **** /**
 879:../USART/../libs/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:../USART/../libs/core_cm3.h ****  *
 881:../USART/../libs/core_cm3.h ****  * @return PriMask
 882:../USART/../libs/core_cm3.h ****  *
 883:../USART/../libs/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:../USART/../libs/core_cm3.h ****  */
 885:../USART/../libs/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:../USART/../libs/core_cm3.h **** 
 887:../USART/../libs/core_cm3.h **** /**
 888:../USART/../libs/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:../USART/../libs/core_cm3.h ****  *
 890:../USART/../libs/core_cm3.h ****  * @param   priMask  PriMask
 891:../USART/../libs/core_cm3.h ****  *
 892:../USART/../libs/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:../USART/../libs/core_cm3.h ****  */
 894:../USART/../libs/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:../USART/../libs/core_cm3.h **** 
 896:../USART/../libs/core_cm3.h **** /**
 897:../USART/../libs/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:../USART/../libs/core_cm3.h ****  *
 899:../USART/../libs/core_cm3.h ****  * @return FaultMask
 900:../USART/../libs/core_cm3.h ****  *
 901:../USART/../libs/core_cm3.h ****  * Return the content of the fault mask register
 902:../USART/../libs/core_cm3.h ****  */
 903:../USART/../libs/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:../USART/../libs/core_cm3.h **** 
 905:../USART/../libs/core_cm3.h **** /**
 906:../USART/../libs/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:../USART/../libs/core_cm3.h ****  *
 908:../USART/../libs/core_cm3.h ****  * @param  faultMask faultMask value
 909:../USART/../libs/core_cm3.h ****  *
 910:../USART/../libs/core_cm3.h ****  * Set the fault mask register
 911:../USART/../libs/core_cm3.h ****  */
 912:../USART/../libs/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:../USART/../libs/core_cm3.h **** 
 914:../USART/../libs/core_cm3.h **** /**
 915:../USART/../libs/core_cm3.h ****  * @brief  Return the Control Register value
 916:../USART/../libs/core_cm3.h ****  * 
 917:../USART/../libs/core_cm3.h ****  * @return Control value
 918:../USART/../libs/core_cm3.h ****  *
 919:../USART/../libs/core_cm3.h ****  * Return the content of the control register
 920:../USART/../libs/core_cm3.h ****  */
 921:../USART/../libs/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:../USART/../libs/core_cm3.h **** 
 923:../USART/../libs/core_cm3.h **** /**
 924:../USART/../libs/core_cm3.h ****  * @brief  Set the Control Register value
 925:../USART/../libs/core_cm3.h ****  *
 926:../USART/../libs/core_cm3.h ****  * @param  control  Control value
 927:../USART/../libs/core_cm3.h ****  *
 928:../USART/../libs/core_cm3.h ****  * Set the control register
 929:../USART/../libs/core_cm3.h ****  */
 930:../USART/../libs/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:../USART/../libs/core_cm3.h **** 
 932:../USART/../libs/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:../USART/../libs/core_cm3.h **** 
 934:../USART/../libs/core_cm3.h **** /**
 935:../USART/../libs/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:../USART/../libs/core_cm3.h ****  *
 937:../USART/../libs/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:../USART/../libs/core_cm3.h ****  */
 939:../USART/../libs/core_cm3.h **** #define __CLREX                           __clrex
 940:../USART/../libs/core_cm3.h **** 
 941:../USART/../libs/core_cm3.h **** /**
 942:../USART/../libs/core_cm3.h ****  * @brief  Return the Base Priority value
 943:../USART/../libs/core_cm3.h ****  *
 944:../USART/../libs/core_cm3.h ****  * @return BasePriority
 945:../USART/../libs/core_cm3.h ****  *
 946:../USART/../libs/core_cm3.h ****  * Return the content of the base priority register
 947:../USART/../libs/core_cm3.h ****  */
 948:../USART/../libs/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:../USART/../libs/core_cm3.h **** {
 950:../USART/../libs/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:../USART/../libs/core_cm3.h ****   return(__regBasePri);
 952:../USART/../libs/core_cm3.h **** }
 953:../USART/../libs/core_cm3.h **** 
 954:../USART/../libs/core_cm3.h **** /**
 955:../USART/../libs/core_cm3.h ****  * @brief  Set the Base Priority value
 956:../USART/../libs/core_cm3.h ****  *
 957:../USART/../libs/core_cm3.h ****  * @param  basePri  BasePriority
 958:../USART/../libs/core_cm3.h ****  *
 959:../USART/../libs/core_cm3.h ****  * Set the base priority register
 960:../USART/../libs/core_cm3.h ****  */
 961:../USART/../libs/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:../USART/../libs/core_cm3.h **** {
 963:../USART/../libs/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:../USART/../libs/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:../USART/../libs/core_cm3.h **** }
 966:../USART/../libs/core_cm3.h **** 
 967:../USART/../libs/core_cm3.h **** /**
 968:../USART/../libs/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:../USART/../libs/core_cm3.h ****  *
 970:../USART/../libs/core_cm3.h ****  * @return PriMask
 971:../USART/../libs/core_cm3.h ****  *
 972:../USART/../libs/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:../USART/../libs/core_cm3.h ****  */
 974:../USART/../libs/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:../USART/../libs/core_cm3.h **** {
 976:../USART/../libs/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:../USART/../libs/core_cm3.h ****   return(__regPriMask);
 978:../USART/../libs/core_cm3.h **** }
 979:../USART/../libs/core_cm3.h **** 
 980:../USART/../libs/core_cm3.h **** /**
 981:../USART/../libs/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:../USART/../libs/core_cm3.h ****  *
 983:../USART/../libs/core_cm3.h ****  * @param  priMask  PriMask
 984:../USART/../libs/core_cm3.h ****  *
 985:../USART/../libs/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:../USART/../libs/core_cm3.h ****  */
 987:../USART/../libs/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:../USART/../libs/core_cm3.h **** {
 989:../USART/../libs/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:../USART/../libs/core_cm3.h ****   __regPriMask = (priMask);
 991:../USART/../libs/core_cm3.h **** }
 992:../USART/../libs/core_cm3.h **** 
 993:../USART/../libs/core_cm3.h **** /**
 994:../USART/../libs/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:../USART/../libs/core_cm3.h ****  *
 996:../USART/../libs/core_cm3.h ****  * @return FaultMask
 997:../USART/../libs/core_cm3.h ****  *
 998:../USART/../libs/core_cm3.h ****  * Return the content of the fault mask register
 999:../USART/../libs/core_cm3.h ****  */
1000:../USART/../libs/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:../USART/../libs/core_cm3.h **** {
1002:../USART/../libs/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:../USART/../libs/core_cm3.h ****   return(__regFaultMask);
1004:../USART/../libs/core_cm3.h **** }
1005:../USART/../libs/core_cm3.h **** 
1006:../USART/../libs/core_cm3.h **** /**
1007:../USART/../libs/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:../USART/../libs/core_cm3.h ****  *
1009:../USART/../libs/core_cm3.h ****  * @param  faultMask  faultMask value
1010:../USART/../libs/core_cm3.h ****  *
1011:../USART/../libs/core_cm3.h ****  * Set the fault mask register
1012:../USART/../libs/core_cm3.h ****  */
1013:../USART/../libs/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:../USART/../libs/core_cm3.h **** {
1015:../USART/../libs/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:../USART/../libs/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:../USART/../libs/core_cm3.h **** }
1018:../USART/../libs/core_cm3.h **** 
1019:../USART/../libs/core_cm3.h **** /**
1020:../USART/../libs/core_cm3.h ****  * @brief  Return the Control Register value
1021:../USART/../libs/core_cm3.h ****  * 
1022:../USART/../libs/core_cm3.h ****  * @return Control value
1023:../USART/../libs/core_cm3.h ****  *
1024:../USART/../libs/core_cm3.h ****  * Return the content of the control register
1025:../USART/../libs/core_cm3.h ****  */
1026:../USART/../libs/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:../USART/../libs/core_cm3.h **** {
1028:../USART/../libs/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:../USART/../libs/core_cm3.h ****   return(__regControl);
1030:../USART/../libs/core_cm3.h **** }
1031:../USART/../libs/core_cm3.h **** 
1032:../USART/../libs/core_cm3.h **** /**
1033:../USART/../libs/core_cm3.h ****  * @brief  Set the Control Register value
1034:../USART/../libs/core_cm3.h ****  *
1035:../USART/../libs/core_cm3.h ****  * @param  control  Control value
1036:../USART/../libs/core_cm3.h ****  *
1037:../USART/../libs/core_cm3.h ****  * Set the control register
1038:../USART/../libs/core_cm3.h ****  */
1039:../USART/../libs/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:../USART/../libs/core_cm3.h **** {
1041:../USART/../libs/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:../USART/../libs/core_cm3.h ****   __regControl = control;
1043:../USART/../libs/core_cm3.h **** }
1044:../USART/../libs/core_cm3.h **** 
1045:../USART/../libs/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:../USART/../libs/core_cm3.h **** 
1047:../USART/../libs/core_cm3.h **** 
1048:../USART/../libs/core_cm3.h **** 
1049:../USART/../libs/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:../USART/../libs/core_cm3.h **** /* IAR iccarm specific functions */
1051:../USART/../libs/core_cm3.h **** 
1052:../USART/../libs/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:../USART/../libs/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:../USART/../libs/core_cm3.h **** 
1055:../USART/../libs/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:../USART/../libs/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:../USART/../libs/core_cm3.h **** 
1058:../USART/../libs/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:../USART/../libs/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:../USART/../libs/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:../USART/../libs/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:../USART/../libs/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:../USART/../libs/core_cm3.h **** 
1064:../USART/../libs/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:../USART/../libs/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:../USART/../libs/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:../USART/../libs/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:../USART/../libs/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:../USART/../libs/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:../USART/../libs/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:../USART/../libs/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:../USART/../libs/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:../USART/../libs/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:../USART/../libs/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:../USART/../libs/core_cm3.h **** 
1076:../USART/../libs/core_cm3.h **** 
1077:../USART/../libs/core_cm3.h **** /**
1078:../USART/../libs/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:../USART/../libs/core_cm3.h ****  *
1080:../USART/../libs/core_cm3.h ****  * @return ProcessStackPointer
1081:../USART/../libs/core_cm3.h ****  *
1082:../USART/../libs/core_cm3.h ****  * Return the actual process stack pointer
1083:../USART/../libs/core_cm3.h ****  */
1084:../USART/../libs/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:../USART/../libs/core_cm3.h **** 
1086:../USART/../libs/core_cm3.h **** /**
1087:../USART/../libs/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:../USART/../libs/core_cm3.h ****  *
1089:../USART/../libs/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:../USART/../libs/core_cm3.h ****  *
1091:../USART/../libs/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:../USART/../libs/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:../USART/../libs/core_cm3.h ****  */
1094:../USART/../libs/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:../USART/../libs/core_cm3.h **** 
1096:../USART/../libs/core_cm3.h **** /**
1097:../USART/../libs/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:../USART/../libs/core_cm3.h ****  *
1099:../USART/../libs/core_cm3.h ****  * @return Main Stack Pointer
1100:../USART/../libs/core_cm3.h ****  *
1101:../USART/../libs/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:../USART/../libs/core_cm3.h ****  * Cortex processor register
1103:../USART/../libs/core_cm3.h ****  */
1104:../USART/../libs/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:../USART/../libs/core_cm3.h **** 
1106:../USART/../libs/core_cm3.h **** /**
1107:../USART/../libs/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:../USART/../libs/core_cm3.h ****  *
1109:../USART/../libs/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:../USART/../libs/core_cm3.h ****  *
1111:../USART/../libs/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:../USART/../libs/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:../USART/../libs/core_cm3.h ****  */
1114:../USART/../libs/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:../USART/../libs/core_cm3.h **** 
1116:../USART/../libs/core_cm3.h **** /**
1117:../USART/../libs/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:../USART/../libs/core_cm3.h ****  *
1119:../USART/../libs/core_cm3.h ****  * @param  value  value to reverse
1120:../USART/../libs/core_cm3.h ****  * @return        reversed value
1121:../USART/../libs/core_cm3.h ****  *
1122:../USART/../libs/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:../USART/../libs/core_cm3.h ****  */
1124:../USART/../libs/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:../USART/../libs/core_cm3.h **** 
1126:../USART/../libs/core_cm3.h **** /**
1127:../USART/../libs/core_cm3.h ****  * @brief  Reverse bit order of value
1128:../USART/../libs/core_cm3.h ****  *
1129:../USART/../libs/core_cm3.h ****  * @param  value  value to reverse
1130:../USART/../libs/core_cm3.h ****  * @return        reversed value
1131:../USART/../libs/core_cm3.h ****  *
1132:../USART/../libs/core_cm3.h ****  * Reverse bit order of value
1133:../USART/../libs/core_cm3.h ****  */
1134:../USART/../libs/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:../USART/../libs/core_cm3.h **** 
1136:../USART/../libs/core_cm3.h **** /**
1137:../USART/../libs/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:../USART/../libs/core_cm3.h ****  *
1139:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1140:../USART/../libs/core_cm3.h ****  * @return        value of (*address)
1141:../USART/../libs/core_cm3.h ****  *
1142:../USART/../libs/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:../USART/../libs/core_cm3.h ****  */
1144:../USART/../libs/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:../USART/../libs/core_cm3.h **** 
1146:../USART/../libs/core_cm3.h **** /**
1147:../USART/../libs/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:../USART/../libs/core_cm3.h ****  *
1149:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1150:../USART/../libs/core_cm3.h ****  * @return        value of (*address)
1151:../USART/../libs/core_cm3.h ****  *
1152:../USART/../libs/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:../USART/../libs/core_cm3.h ****  */
1154:../USART/../libs/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:../USART/../libs/core_cm3.h **** 
1156:../USART/../libs/core_cm3.h **** /**
1157:../USART/../libs/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:../USART/../libs/core_cm3.h ****  *
1159:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1160:../USART/../libs/core_cm3.h ****  * @return        value of (*address)
1161:../USART/../libs/core_cm3.h ****  *
1162:../USART/../libs/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:../USART/../libs/core_cm3.h ****  */
1164:../USART/../libs/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:../USART/../libs/core_cm3.h **** 
1166:../USART/../libs/core_cm3.h **** /**
1167:../USART/../libs/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:../USART/../libs/core_cm3.h ****  *
1169:../USART/../libs/core_cm3.h ****  * @param  value  value to store
1170:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1171:../USART/../libs/core_cm3.h ****  * @return        successful / failed
1172:../USART/../libs/core_cm3.h ****  *
1173:../USART/../libs/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:../USART/../libs/core_cm3.h ****  */
1175:../USART/../libs/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:../USART/../libs/core_cm3.h **** 
1177:../USART/../libs/core_cm3.h **** /**
1178:../USART/../libs/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:../USART/../libs/core_cm3.h ****  *
1180:../USART/../libs/core_cm3.h ****  * @param  value  value to store
1181:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1182:../USART/../libs/core_cm3.h ****  * @return        successful / failed
1183:../USART/../libs/core_cm3.h ****  *
1184:../USART/../libs/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:../USART/../libs/core_cm3.h ****  */
1186:../USART/../libs/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:../USART/../libs/core_cm3.h **** 
1188:../USART/../libs/core_cm3.h **** /**
1189:../USART/../libs/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:../USART/../libs/core_cm3.h ****  *
1191:../USART/../libs/core_cm3.h ****  * @param  value  value to store
1192:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1193:../USART/../libs/core_cm3.h ****  * @return        successful / failed
1194:../USART/../libs/core_cm3.h ****  *
1195:../USART/../libs/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:../USART/../libs/core_cm3.h ****  */
1197:../USART/../libs/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:../USART/../libs/core_cm3.h **** 
1199:../USART/../libs/core_cm3.h **** 
1200:../USART/../libs/core_cm3.h **** 
1201:../USART/../libs/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:../USART/../libs/core_cm3.h **** /* GNU gcc specific functions */
1203:../USART/../libs/core_cm3.h **** 
1204:../USART/../libs/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:../USART/../libs/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:../USART/../libs/core_cm3.h **** 
1207:../USART/../libs/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:../USART/../libs/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:../USART/../libs/core_cm3.h **** 
1210:../USART/../libs/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:../USART/../libs/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:../USART/../libs/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:../USART/../libs/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:../USART/../libs/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:../USART/../libs/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:../USART/../libs/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:../USART/../libs/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:../USART/../libs/core_cm3.h **** 
1219:../USART/../libs/core_cm3.h **** 
1220:../USART/../libs/core_cm3.h **** /**
1221:../USART/../libs/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:../USART/../libs/core_cm3.h ****  *
1223:../USART/../libs/core_cm3.h ****  * @return ProcessStackPointer
1224:../USART/../libs/core_cm3.h ****  *
1225:../USART/../libs/core_cm3.h ****  * Return the actual process stack pointer
1226:../USART/../libs/core_cm3.h ****  */
1227:../USART/../libs/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:../USART/../libs/core_cm3.h **** 
1229:../USART/../libs/core_cm3.h **** /**
1230:../USART/../libs/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:../USART/../libs/core_cm3.h ****  *
1232:../USART/../libs/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:../USART/../libs/core_cm3.h ****  *
1234:../USART/../libs/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:../USART/../libs/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:../USART/../libs/core_cm3.h ****  */
1237:../USART/../libs/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:../USART/../libs/core_cm3.h **** 
1239:../USART/../libs/core_cm3.h **** /**
1240:../USART/../libs/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:../USART/../libs/core_cm3.h ****  *
1242:../USART/../libs/core_cm3.h ****  * @return Main Stack Pointer
1243:../USART/../libs/core_cm3.h ****  *
1244:../USART/../libs/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:../USART/../libs/core_cm3.h ****  * Cortex processor register
1246:../USART/../libs/core_cm3.h ****  */
1247:../USART/../libs/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:../USART/../libs/core_cm3.h **** 
1249:../USART/../libs/core_cm3.h **** /**
1250:../USART/../libs/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:../USART/../libs/core_cm3.h ****  *
1252:../USART/../libs/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:../USART/../libs/core_cm3.h ****  *
1254:../USART/../libs/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:../USART/../libs/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:../USART/../libs/core_cm3.h ****  */
1257:../USART/../libs/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:../USART/../libs/core_cm3.h **** 
1259:../USART/../libs/core_cm3.h **** /**
1260:../USART/../libs/core_cm3.h ****  * @brief  Return the Base Priority value
1261:../USART/../libs/core_cm3.h ****  *
1262:../USART/../libs/core_cm3.h ****  * @return BasePriority
1263:../USART/../libs/core_cm3.h ****  *
1264:../USART/../libs/core_cm3.h ****  * Return the content of the base priority register
1265:../USART/../libs/core_cm3.h ****  */
1266:../USART/../libs/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:../USART/../libs/core_cm3.h **** 
1268:../USART/../libs/core_cm3.h **** /**
1269:../USART/../libs/core_cm3.h ****  * @brief  Set the Base Priority value
1270:../USART/../libs/core_cm3.h ****  *
1271:../USART/../libs/core_cm3.h ****  * @param  basePri  BasePriority
1272:../USART/../libs/core_cm3.h ****  *
1273:../USART/../libs/core_cm3.h ****  * Set the base priority register
1274:../USART/../libs/core_cm3.h ****  */
1275:../USART/../libs/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:../USART/../libs/core_cm3.h **** 
1277:../USART/../libs/core_cm3.h **** /**
1278:../USART/../libs/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:../USART/../libs/core_cm3.h ****  *
1280:../USART/../libs/core_cm3.h ****  * @return PriMask
1281:../USART/../libs/core_cm3.h ****  *
1282:../USART/../libs/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:../USART/../libs/core_cm3.h ****  */
1284:../USART/../libs/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:../USART/../libs/core_cm3.h **** 
1286:../USART/../libs/core_cm3.h **** /**
1287:../USART/../libs/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:../USART/../libs/core_cm3.h ****  *
1289:../USART/../libs/core_cm3.h ****  * @param  priMask  PriMask
1290:../USART/../libs/core_cm3.h ****  *
1291:../USART/../libs/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:../USART/../libs/core_cm3.h ****  */
1293:../USART/../libs/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:../USART/../libs/core_cm3.h **** 
1295:../USART/../libs/core_cm3.h **** /**
1296:../USART/../libs/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:../USART/../libs/core_cm3.h ****  *
1298:../USART/../libs/core_cm3.h ****  * @return FaultMask
1299:../USART/../libs/core_cm3.h ****  *
1300:../USART/../libs/core_cm3.h ****  * Return the content of the fault mask register
1301:../USART/../libs/core_cm3.h ****  */
1302:../USART/../libs/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:../USART/../libs/core_cm3.h **** 
1304:../USART/../libs/core_cm3.h **** /**
1305:../USART/../libs/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:../USART/../libs/core_cm3.h ****  *
1307:../USART/../libs/core_cm3.h ****  * @param  faultMask  faultMask value
1308:../USART/../libs/core_cm3.h ****  *
1309:../USART/../libs/core_cm3.h ****  * Set the fault mask register
1310:../USART/../libs/core_cm3.h ****  */
1311:../USART/../libs/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:../USART/../libs/core_cm3.h **** 
1313:../USART/../libs/core_cm3.h **** /**
1314:../USART/../libs/core_cm3.h ****  * @brief  Return the Control Register value
1315:../USART/../libs/core_cm3.h **** * 
1316:../USART/../libs/core_cm3.h **** *  @return Control value
1317:../USART/../libs/core_cm3.h ****  *
1318:../USART/../libs/core_cm3.h ****  * Return the content of the control register
1319:../USART/../libs/core_cm3.h ****  */
1320:../USART/../libs/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:../USART/../libs/core_cm3.h **** 
1322:../USART/../libs/core_cm3.h **** /**
1323:../USART/../libs/core_cm3.h ****  * @brief  Set the Control Register value
1324:../USART/../libs/core_cm3.h ****  *
1325:../USART/../libs/core_cm3.h ****  * @param  control  Control value
1326:../USART/../libs/core_cm3.h ****  *
1327:../USART/../libs/core_cm3.h ****  * Set the control register
1328:../USART/../libs/core_cm3.h ****  */
1329:../USART/../libs/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:../USART/../libs/core_cm3.h **** 
1331:../USART/../libs/core_cm3.h **** /**
1332:../USART/../libs/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:../USART/../libs/core_cm3.h ****  *
1334:../USART/../libs/core_cm3.h ****  * @param  value  value to reverse
1335:../USART/../libs/core_cm3.h ****  * @return        reversed value
1336:../USART/../libs/core_cm3.h ****  *
1337:../USART/../libs/core_cm3.h ****  * Reverse byte order in integer value
1338:../USART/../libs/core_cm3.h ****  */
1339:../USART/../libs/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:../USART/../libs/core_cm3.h **** 
1341:../USART/../libs/core_cm3.h **** /**
1342:../USART/../libs/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:../USART/../libs/core_cm3.h ****  *
1344:../USART/../libs/core_cm3.h ****  * @param  value  value to reverse
1345:../USART/../libs/core_cm3.h ****  * @return        reversed value
1346:../USART/../libs/core_cm3.h ****  *
1347:../USART/../libs/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:../USART/../libs/core_cm3.h ****  */
1349:../USART/../libs/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:../USART/../libs/core_cm3.h **** 
1351:../USART/../libs/core_cm3.h **** /**
1352:../USART/../libs/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:../USART/../libs/core_cm3.h ****  *
1354:../USART/../libs/core_cm3.h ****  * @param  value  value to reverse
1355:../USART/../libs/core_cm3.h ****  * @return        reversed value
1356:../USART/../libs/core_cm3.h ****  *
1357:../USART/../libs/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:../USART/../libs/core_cm3.h ****  */
1359:../USART/../libs/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:../USART/../libs/core_cm3.h **** 
1361:../USART/../libs/core_cm3.h **** /**
1362:../USART/../libs/core_cm3.h ****  * @brief  Reverse bit order of value
1363:../USART/../libs/core_cm3.h ****  *
1364:../USART/../libs/core_cm3.h ****  * @param  value  value to reverse
1365:../USART/../libs/core_cm3.h ****  * @return        reversed value
1366:../USART/../libs/core_cm3.h ****  *
1367:../USART/../libs/core_cm3.h ****  * Reverse bit order of value
1368:../USART/../libs/core_cm3.h ****  */
1369:../USART/../libs/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:../USART/../libs/core_cm3.h **** 
1371:../USART/../libs/core_cm3.h **** /**
1372:../USART/../libs/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:../USART/../libs/core_cm3.h ****  *
1374:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1375:../USART/../libs/core_cm3.h ****  * @return        value of (*address)
1376:../USART/../libs/core_cm3.h ****  *
1377:../USART/../libs/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:../USART/../libs/core_cm3.h ****  */
1379:../USART/../libs/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:../USART/../libs/core_cm3.h **** 
1381:../USART/../libs/core_cm3.h **** /**
1382:../USART/../libs/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:../USART/../libs/core_cm3.h ****  *
1384:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1385:../USART/../libs/core_cm3.h ****  * @return        value of (*address)
1386:../USART/../libs/core_cm3.h ****  *
1387:../USART/../libs/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:../USART/../libs/core_cm3.h ****  */
1389:../USART/../libs/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:../USART/../libs/core_cm3.h **** 
1391:../USART/../libs/core_cm3.h **** /**
1392:../USART/../libs/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:../USART/../libs/core_cm3.h ****  *
1394:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1395:../USART/../libs/core_cm3.h ****  * @return        value of (*address)
1396:../USART/../libs/core_cm3.h ****  *
1397:../USART/../libs/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:../USART/../libs/core_cm3.h ****  */
1399:../USART/../libs/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:../USART/../libs/core_cm3.h **** 
1401:../USART/../libs/core_cm3.h **** /**
1402:../USART/../libs/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:../USART/../libs/core_cm3.h ****  *
1404:../USART/../libs/core_cm3.h ****  * @param  value  value to store
1405:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1406:../USART/../libs/core_cm3.h ****  * @return        successful / failed
1407:../USART/../libs/core_cm3.h ****  *
1408:../USART/../libs/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:../USART/../libs/core_cm3.h ****  */
1410:../USART/../libs/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:../USART/../libs/core_cm3.h **** 
1412:../USART/../libs/core_cm3.h **** /**
1413:../USART/../libs/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:../USART/../libs/core_cm3.h ****  *
1415:../USART/../libs/core_cm3.h ****  * @param  value  value to store
1416:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1417:../USART/../libs/core_cm3.h ****  * @return        successful / failed
1418:../USART/../libs/core_cm3.h ****  *
1419:../USART/../libs/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:../USART/../libs/core_cm3.h ****  */
1421:../USART/../libs/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:../USART/../libs/core_cm3.h **** 
1423:../USART/../libs/core_cm3.h **** /**
1424:../USART/../libs/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:../USART/../libs/core_cm3.h ****  *
1426:../USART/../libs/core_cm3.h ****  * @param  value  value to store
1427:../USART/../libs/core_cm3.h ****  * @param  *addr  address pointer
1428:../USART/../libs/core_cm3.h ****  * @return        successful / failed
1429:../USART/../libs/core_cm3.h ****  *
1430:../USART/../libs/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:../USART/../libs/core_cm3.h ****  */
1432:../USART/../libs/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:../USART/../libs/core_cm3.h **** 
1434:../USART/../libs/core_cm3.h **** 
1435:../USART/../libs/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:../USART/../libs/core_cm3.h **** /* TASKING carm specific functions */
1437:../USART/../libs/core_cm3.h **** 
1438:../USART/../libs/core_cm3.h **** /*
1439:../USART/../libs/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:../USART/../libs/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:../USART/../libs/core_cm3.h ****  * Including the CMSIS ones.
1442:../USART/../libs/core_cm3.h ****  */
1443:../USART/../libs/core_cm3.h **** 
1444:../USART/../libs/core_cm3.h **** #endif
1445:../USART/../libs/core_cm3.h **** 
1446:../USART/../libs/core_cm3.h **** 
1447:../USART/../libs/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:../USART/../libs/core_cm3.h ****   Core  Function Interface containing:
1449:../USART/../libs/core_cm3.h ****   - Core NVIC Functions
1450:../USART/../libs/core_cm3.h ****   - Core SysTick Functions
1451:../USART/../libs/core_cm3.h ****   - Core Reset Functions
1452:../USART/../libs/core_cm3.h **** */
1453:../USART/../libs/core_cm3.h **** /*@{*/
1454:../USART/../libs/core_cm3.h **** 
1455:../USART/../libs/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:../USART/../libs/core_cm3.h **** 
1457:../USART/../libs/core_cm3.h **** /**
1458:../USART/../libs/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:../USART/../libs/core_cm3.h ****  *
1460:../USART/../libs/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:../USART/../libs/core_cm3.h ****  *
1462:../USART/../libs/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:../USART/../libs/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:../USART/../libs/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:../USART/../libs/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:../USART/../libs/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:../USART/../libs/core_cm3.h ****  */
1468:../USART/../libs/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:../USART/../libs/core_cm3.h **** {
1470:../USART/../libs/core_cm3.h ****   uint32_t reg_value;
1471:../USART/../libs/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:../USART/../libs/core_cm3.h ****   
1473:../USART/../libs/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:../USART/../libs/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:../USART/../libs/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:../USART/../libs/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:../USART/../libs/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:../USART/../libs/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:../USART/../libs/core_cm3.h **** }
1480:../USART/../libs/core_cm3.h **** 
1481:../USART/../libs/core_cm3.h **** /**
1482:../USART/../libs/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:../USART/../libs/core_cm3.h ****  *
1484:../USART/../libs/core_cm3.h ****  * @return priority grouping field 
1485:../USART/../libs/core_cm3.h ****  *
1486:../USART/../libs/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:../USART/../libs/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:../USART/../libs/core_cm3.h ****  */
1489:../USART/../libs/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:../USART/../libs/core_cm3.h **** {
1491:../USART/../libs/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:../USART/../libs/core_cm3.h **** }
1493:../USART/../libs/core_cm3.h **** 
1494:../USART/../libs/core_cm3.h **** /**
1495:../USART/../libs/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:../USART/../libs/core_cm3.h ****  *
1497:../USART/../libs/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:../USART/../libs/core_cm3.h ****  *
1499:../USART/../libs/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:../USART/../libs/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:../USART/../libs/core_cm3.h ****  */
1502:../USART/../libs/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:../USART/../libs/core_cm3.h **** {
 16057              		.loc 4 1503 0
 16058              		.cfi_startproc
 16059              		@ args = 0, pretend = 0, frame = 8
 16060              		@ frame_needed = 1, uses_anonymous_args = 0
 16061              		@ link register save eliminated.
 16062 0000 80B4     		push	{r7}
 16063              	.LCFI0:
 16064              		.cfi_def_cfa_offset 4
 16065 0002 83B0     		sub	sp, sp, #12
 16066              	.LCFI1:
 16067              		.cfi_def_cfa_offset 16
 16068 0004 00AF     		add	r7, sp, #0
 16069              		.cfi_offset 7, -4
 16070              	.LCFI2:
 16071              		.cfi_def_cfa_register 7
 16072 0006 0346     		mov	r3, r0
 16073 0008 FB71     		strb	r3, [r7, #7]
1504:../USART/../libs/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 16074              		.loc 4 1504 0
 16075 000a 094B     		ldr	r3, .L2
 16076 000c 97F90720 		ldrsb	r2, [r7, #7]
 16077 0010 4FEA5212 		lsr	r2, r2, #5
 16078 0014 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 16079 0016 01F01F01 		and	r1, r1, #31
 16080 001a 4FF00100 		mov	r0, #1
 16081 001e 00FA01F1 		lsl	r1, r0, r1
 16082 0022 43F82210 		str	r1, [r3, r2, lsl #2]
1505:../USART/../libs/core_cm3.h **** }
 16083              		.loc 4 1505 0
 16084 0026 07F10C07 		add	r7, r7, #12
 16085 002a BD46     		mov	sp, r7
 16086 002c 80BC     		pop	{r7}
 16087 002e 7047     		bx	lr
 16088              	.L3:
 16089              		.align	2
 16090              	.L2:
 16091 0030 00E100E0 		.word	-536813312
 16092              		.cfi_endproc
 16093              	.LFE14:
 16095              		.align	2
 16096              		.global	InitUSART
 16097              		.thumb
 16098              		.thumb_func
 16100              	InitUSART:
 16101              	.LFB29:
   1:../USART/usart.c **** #include "usart.h"
   2:../USART/usart.c **** 
   3:../USART/usart.c **** void InitUSART(uint16_t boudrate){
 16102              		.loc 1 3 0
 16103              		.cfi_startproc
 16104              		@ args = 0, pretend = 0, frame = 8
 16105              		@ frame_needed = 1, uses_anonymous_args = 0
 16106              		@ link register save eliminated.
 16107 0034 80B4     		push	{r7}
 16108              	.LCFI3:
 16109              		.cfi_def_cfa_offset 4
 16110 0036 83B0     		sub	sp, sp, #12
 16111              	.LCFI4:
 16112              		.cfi_def_cfa_offset 16
 16113 0038 00AF     		add	r7, sp, #0
 16114              		.cfi_offset 7, -4
 16115              	.LCFI5:
 16116              		.cfi_def_cfa_register 7
 16117 003a 0346     		mov	r3, r0
 16118 003c FB80     		strh	r3, [r7, #6]	@ movhi
   4:../USART/usart.c ****     RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; //Clock port A
 16119              		.loc 1 4 0
 16120 003e 324B     		ldr	r3, .L5
 16121 0040 314A     		ldr	r2, .L5
 16122 0042 9269     		ldr	r2, [r2, #24]
 16123 0044 42F00402 		orr	r2, r2, #4
 16124 0048 9A61     		str	r2, [r3, #24]
   5:../USART/usart.c ****     //============Pin 9 (TX) setup===================//
   6:../USART/usart.c ****     GPIOA->CRH      &= ~(GPIO_CRH_CNF9_0); //Set pin 9 to alternative push-pull
 16125              		.loc 1 6 0
 16126 004a 304B     		ldr	r3, .L5+4
 16127 004c 2F4A     		ldr	r2, .L5+4
 16128 004e 5268     		ldr	r2, [r2, #4]
 16129 0050 22F04002 		bic	r2, r2, #64
 16130 0054 5A60     		str	r2, [r3, #4]
   7:../USART/usart.c ****     GPIOA->CRH      |= GPIO_CRH_CNF9_1; //
 16131              		.loc 1 7 0
 16132 0056 2D4B     		ldr	r3, .L5+4
 16133 0058 2C4A     		ldr	r2, .L5+4
 16134 005a 5268     		ldr	r2, [r2, #4]
 16135 005c 42F08002 		orr	r2, r2, #128
 16136 0060 5A60     		str	r2, [r3, #4]
   8:../USART/usart.c ****     GPIOA->CRH      |= (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0); // 50 MHz
 16137              		.loc 1 8 0
 16138 0062 2A4B     		ldr	r3, .L5+4
 16139 0064 294A     		ldr	r2, .L5+4
 16140 0066 5268     		ldr	r2, [r2, #4]
 16141 0068 42F03002 		orr	r2, r2, #48
 16142 006c 5A60     		str	r2, [r3, #4]
   9:../USART/usart.c ****     //============Pin 10 (RX) setup===================//
  10:../USART/usart.c ****     GPIOA->CRH      &= ~(GPIO_CRH_CNF10_1); //Set pin 10 to input
 16143              		.loc 1 10 0
 16144 006e 274B     		ldr	r3, .L5+4
 16145 0070 264A     		ldr	r2, .L5+4
 16146 0072 5268     		ldr	r2, [r2, #4]
 16147 0074 22F40062 		bic	r2, r2, #2048
 16148 0078 5A60     		str	r2, [r3, #4]
  11:../USART/usart.c ****     GPIOA->CRH      |= GPIO_CRH_CNF10_0; // without lift to positive
 16149              		.loc 1 11 0
 16150 007a 244B     		ldr	r3, .L5+4
 16151 007c 234A     		ldr	r2, .L5+4
 16152 007e 5268     		ldr	r2, [r2, #4]
 16153 0080 42F48062 		orr	r2, r2, #1024
 16154 0084 5A60     		str	r2, [r3, #4]
  12:../USART/usart.c ****     GPIOA->CRH      &= ~(GPIO_CRH_MODE10_1 | GPIO_CRH_MODE10_0); // input
 16155              		.loc 1 12 0
 16156 0086 214B     		ldr	r3, .L5+4
 16157 0088 204A     		ldr	r2, .L5+4
 16158 008a 5268     		ldr	r2, [r2, #4]
 16159 008c 22F44072 		bic	r2, r2, #768
 16160 0090 5A60     		str	r2, [r3, #4]
  13:../USART/usart.c **** 
  14:../USART/usart.c ****     RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // Enable clock for USART1
 16161              		.loc 1 14 0
 16162 0092 1D4B     		ldr	r3, .L5
 16163 0094 1C4A     		ldr	r2, .L5
 16164 0096 9269     		ldr	r2, [r2, #24]
 16165 0098 42F48042 		orr	r2, r2, #16384
 16166 009c 9A61     		str	r2, [r3, #24]
  15:../USART/usart.c **** 
  16:../USART/usart.c ****     USART1->BRR = F_CPU/boudrate; //Calculate value for speed. In my case it's 0x4e2
 16167              		.loc 1 16 0
 16168 009e 1C4B     		ldr	r3, .L5+8
 16169 00a0 FA88     		ldrh	r2, [r7, #6]
 16170 00a2 1C49     		ldr	r1, .L5+12
 16171 00a4 91FBF2F2 		sdiv	r2, r1, r2
 16172 00a8 92B2     		uxth	r2, r2
 16173 00aa 1A81     		strh	r2, [r3, #8]	@ movhi
  17:../USART/usart.c ****     USART1->CR1 |= USART_CR1_UE; //Enable USART
 16174              		.loc 1 17 0
 16175 00ac 184B     		ldr	r3, .L5+8
 16176 00ae 184A     		ldr	r2, .L5+8
 16177 00b0 9289     		ldrh	r2, [r2, #12]	@ movhi
 16178 00b2 92B2     		uxth	r2, r2
 16179 00b4 42F40052 		orr	r2, r2, #8192
 16180 00b8 92B2     		uxth	r2, r2
 16181 00ba 9A81     		strh	r2, [r3, #12]	@ movhi
  18:../USART/usart.c ****     USART1->CR1 &= ~(USART_CR1_M); // 8 data bit
 16182              		.loc 1 18 0
 16183 00bc 144B     		ldr	r3, .L5+8
 16184 00be 144A     		ldr	r2, .L5+8
 16185 00c0 9289     		ldrh	r2, [r2, #12]	@ movhi
 16186 00c2 92B2     		uxth	r2, r2
 16187 00c4 22F48052 		bic	r2, r2, #4096
 16188 00c8 92B2     		uxth	r2, r2
 16189 00ca 9A81     		strh	r2, [r3, #12]	@ movhi
  19:../USART/usart.c ****     USART1->CR1 &= ~(USART_CR1_PCE); // Parity disabled
 16190              		.loc 1 19 0
 16191 00cc 104B     		ldr	r3, .L5+8
 16192 00ce 104A     		ldr	r2, .L5+8
 16193 00d0 9289     		ldrh	r2, [r2, #12]	@ movhi
 16194 00d2 92B2     		uxth	r2, r2
 16195 00d4 22F48062 		bic	r2, r2, #1024
 16196 00d8 92B2     		uxth	r2, r2
 16197 00da 9A81     		strh	r2, [r3, #12]	@ movhi
  20:../USART/usart.c ****     USART1->CR1 |=(USART_CR1_TE | USART_CR1_RE); // Enable transmit and receive
 16198              		.loc 1 20 0
 16199 00dc 0C4B     		ldr	r3, .L5+8
 16200 00de 0C4A     		ldr	r2, .L5+8
 16201 00e0 9289     		ldrh	r2, [r2, #12]	@ movhi
 16202 00e2 92B2     		uxth	r2, r2
 16203 00e4 42F00C02 		orr	r2, r2, #12
 16204 00e8 92B2     		uxth	r2, r2
 16205 00ea 9A81     		strh	r2, [r3, #12]	@ movhi
  21:../USART/usart.c **** 
  22:../USART/usart.c ****     USART1->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1); // One stop bit
 16206              		.loc 1 22 0
 16207 00ec 084B     		ldr	r3, .L5+8
 16208 00ee 084A     		ldr	r2, .L5+8
 16209 00f0 128A     		ldrh	r2, [r2, #16]	@ movhi
 16210 00f2 92B2     		uxth	r2, r2
 16211 00f4 22F44052 		bic	r2, r2, #12288
 16212 00f8 92B2     		uxth	r2, r2
 16213 00fa 1A82     		strh	r2, [r3, #16]	@ movhi
  23:../USART/usart.c **** }
 16214              		.loc 1 23 0
 16215 00fc 07F10C07 		add	r7, r7, #12
 16216 0100 BD46     		mov	sp, r7
 16217 0102 80BC     		pop	{r7}
 16218 0104 7047     		bx	lr
 16219              	.L6:
 16220 0106 00BF     		.align	2
 16221              	.L5:
 16222 0108 00100240 		.word	1073876992
 16223 010c 00080140 		.word	1073809408
 16224 0110 00380140 		.word	1073821696
 16225 0114 001BB700 		.word	12000000
 16226              		.cfi_endproc
 16227              	.LFE29:
 16229              		.align	2
 16230              		.global	send_to_usart
 16231              		.thumb
 16232              		.thumb_func
 16234              	send_to_usart:
 16235              	.LFB30:
  24:../USART/usart.c **** 
  25:../USART/usart.c **** void send_to_usart(uint8_t data) {
 16236              		.loc 1 25 0
 16237              		.cfi_startproc
 16238              		@ args = 0, pretend = 0, frame = 8
 16239              		@ frame_needed = 1, uses_anonymous_args = 0
 16240              		@ link register save eliminated.
 16241 0118 80B4     		push	{r7}
 16242              	.LCFI6:
 16243              		.cfi_def_cfa_offset 4
 16244 011a 83B0     		sub	sp, sp, #12
 16245              	.LCFI7:
 16246              		.cfi_def_cfa_offset 16
 16247 011c 00AF     		add	r7, sp, #0
 16248              		.cfi_offset 7, -4
 16249              	.LCFI8:
 16250              		.cfi_def_cfa_register 7
 16251 011e 0346     		mov	r3, r0
 16252 0120 FB71     		strb	r3, [r7, #7]
  26:../USART/usart.c **** 	//while(!(USART1->SR & USART_SR_TC)); //Waiting until bit TC in register SR not 1
  27:../USART/usart.c **** 	USART1->DR=data; //Send byte
 16253              		.loc 1 27 0
 16254 0122 044B     		ldr	r3, .L8
 16255 0124 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 16256 0126 92B2     		uxth	r2, r2
 16257 0128 9A80     		strh	r2, [r3, #4]	@ movhi
  28:../USART/usart.c **** }
 16258              		.loc 1 28 0
 16259 012a 07F10C07 		add	r7, r7, #12
 16260 012e BD46     		mov	sp, r7
 16261 0130 80BC     		pop	{r7}
 16262 0132 7047     		bx	lr
 16263              	.L9:
 16264              		.align	2
 16265              	.L8:
 16266 0134 00380140 		.word	1073821696
 16267              		.cfi_endproc
 16268              	.LFE30:
 16270              		.align	2
 16271              		.global	usart_interrupt_init
 16272              		.thumb
 16273              		.thumb_func
 16275              	usart_interrupt_init:
 16276              	.LFB31:
  29:../USART/usart.c **** 
  30:../USART/usart.c **** void usart_interrupt_init(void){
 16277              		.loc 1 30 0
 16278              		.cfi_startproc
 16279              		@ args = 0, pretend = 0, frame = 0
 16280              		@ frame_needed = 1, uses_anonymous_args = 0
 16281 0138 80B5     		push	{r7, lr}
 16282              	.LCFI9:
 16283              		.cfi_def_cfa_offset 8
 16284 013a 00AF     		add	r7, sp, #0
 16285              		.cfi_offset 14, -4
 16286              		.cfi_offset 7, -8
 16287              	.LCFI10:
 16288              		.cfi_def_cfa_register 7
  31:../USART/usart.c **** 	USART1->CR1 |= USART_CR1_RXNEIE;/*!<RXNE Interrupt Enable */
 16289              		.loc 1 31 0
 16290 013c 0A4B     		ldr	r3, .L11
 16291 013e 0A4A     		ldr	r2, .L11
 16292 0140 9289     		ldrh	r2, [r2, #12]	@ movhi
 16293 0142 92B2     		uxth	r2, r2
 16294 0144 42F02002 		orr	r2, r2, #32
 16295 0148 92B2     		uxth	r2, r2
 16296 014a 9A81     		strh	r2, [r3, #12]	@ movhi
  32:../USART/usart.c **** 	USART1->CR1 |= USART_CR1_TCIE;/*!<Transmission Complete Interrupt Enable */
 16297              		.loc 1 32 0
 16298 014c 064B     		ldr	r3, .L11
 16299 014e 064A     		ldr	r2, .L11
 16300 0150 9289     		ldrh	r2, [r2, #12]	@ movhi
 16301 0152 92B2     		uxth	r2, r2
 16302 0154 42F04002 		orr	r2, r2, #64
 16303 0158 92B2     		uxth	r2, r2
 16304 015a 9A81     		strh	r2, [r3, #12]	@ movhi
  33:../USART/usart.c **** 	NVIC_EnableIRQ(USART1_IRQn);//Allow usart receive unterruption
 16305              		.loc 1 33 0
 16306 015c 4FF02500 		mov	r0, #37
 16307 0160 FFF74EFF 		bl	NVIC_EnableIRQ
  34:../USART/usart.c **** }
 16308              		.loc 1 34 0
 16309 0164 80BD     		pop	{r7, pc}
 16310              	.L12:
 16311 0166 00BF     		.align	2
 16312              	.L11:
 16313 0168 00380140 		.word	1073821696
 16314              		.cfi_endproc
 16315              	.LFE31:
 16317              		.align	2
 16318              		.global	read_byte
 16319              		.thumb
 16320              		.thumb_func
 16322              	read_byte:
 16323              	.LFB32:
  35:../USART/usart.c **** 
  36:../USART/usart.c **** uint8_t read_byte(void){
 16324              		.loc 1 36 0
 16325              		.cfi_startproc
 16326              		@ args = 0, pretend = 0, frame = 0
 16327              		@ frame_needed = 1, uses_anonymous_args = 0
 16328              		@ link register save eliminated.
 16329 016c 80B4     		push	{r7}
 16330              	.LCFI11:
 16331              		.cfi_def_cfa_offset 4
 16332 016e 00AF     		add	r7, sp, #0
 16333              		.cfi_offset 7, -4
 16334              	.LCFI12:
 16335              		.cfi_def_cfa_register 7
  37:../USART/usart.c **** 	if (USART1->SR & USART_SR_RXNE){
 16336              		.loc 1 37 0
 16337 0170 084B     		ldr	r3, .L16
 16338 0172 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16339 0174 9BB2     		uxth	r3, r3
 16340 0176 03F02003 		and	r3, r3, #32
 16341 017a 002B     		cmp	r3, #0
 16342 017c 04D0     		beq	.L14
  38:../USART/usart.c **** 		return 	USART1->DR;
 16343              		.loc 1 38 0
 16344 017e 054B     		ldr	r3, .L16
 16345 0180 9B88     		ldrh	r3, [r3, #4]	@ movhi
 16346 0182 9BB2     		uxth	r3, r3
 16347 0184 DBB2     		uxtb	r3, r3
 16348 0186 01E0     		b	.L15
 16349              	.L14:
  39:../USART/usart.c **** 	}
  40:../USART/usart.c **** 	return 0;
 16350              		.loc 1 40 0
 16351 0188 4FF00003 		mov	r3, #0
 16352              	.L15:
  41:../USART/usart.c **** }
 16353              		.loc 1 41 0
 16354 018c 1846     		mov	r0, r3
 16355 018e BD46     		mov	sp, r7
 16356 0190 80BC     		pop	{r7}
 16357 0192 7047     		bx	lr
 16358              	.L17:
 16359              		.align	2
 16360              	.L16:
 16361 0194 00380140 		.word	1073821696
 16362              		.cfi_endproc
 16363              	.LFE32:
 16365              		.align	2
 16366              		.global	send_string
 16367              		.thumb
 16368              		.thumb_func
 16370              	send_string:
 16371              	.LFB33:
  42:../USART/usart.c **** 
  43:../USART/usart.c **** void send_string(uint8_t *data){
 16372              		.loc 1 43 0
 16373              		.cfi_startproc
 16374              		@ args = 0, pretend = 0, frame = 8
 16375              		@ frame_needed = 1, uses_anonymous_args = 0
 16376 0198 80B5     		push	{r7, lr}
 16377              	.LCFI13:
 16378              		.cfi_def_cfa_offset 8
 16379 019a 82B0     		sub	sp, sp, #8
 16380              	.LCFI14:
 16381              		.cfi_def_cfa_offset 16
 16382 019c 00AF     		add	r7, sp, #0
 16383              		.cfi_offset 14, -4
 16384              		.cfi_offset 7, -8
 16385              	.LCFI15:
 16386              		.cfi_def_cfa_register 7
 16387 019e 7860     		str	r0, [r7, #4]
  44:../USART/usart.c **** 	while (*data){
 16388              		.loc 1 44 0
 16389 01a0 08E0     		b	.L19
 16390              	.L20:
  45:../USART/usart.c **** 		send_to_usart(*data);
 16391              		.loc 1 45 0
 16392 01a2 7B68     		ldr	r3, [r7, #4]
 16393 01a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16394 01a6 1846     		mov	r0, r3
 16395 01a8 FFF7FEFF 		bl	send_to_usart
  46:../USART/usart.c **** 		data++;
 16396              		.loc 1 46 0
 16397 01ac 7B68     		ldr	r3, [r7, #4]
 16398 01ae 03F10103 		add	r3, r3, #1
 16399 01b2 7B60     		str	r3, [r7, #4]
 16400              	.L19:
  44:../USART/usart.c **** 	while (*data){
 16401              		.loc 1 44 0 discriminator 1
 16402 01b4 7B68     		ldr	r3, [r7, #4]
 16403 01b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16404 01b8 002B     		cmp	r3, #0
 16405 01ba F2D1     		bne	.L20
  47:../USART/usart.c **** 	}
  48:../USART/usart.c **** }
 16406              		.loc 1 48 0
 16407 01bc 07F10807 		add	r7, r7, #8
 16408 01c0 BD46     		mov	sp, r7
 16409 01c2 80BD     		pop	{r7, pc}
 16410              		.cfi_endproc
 16411              	.LFE33:
 16413              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
     /tmp/cc2s9jxe.s:16051  .text:00000000 $t
     /tmp/cc2s9jxe.s:16055  .text:00000000 NVIC_EnableIRQ
     /tmp/cc2s9jxe.s:16091  .text:00000030 $d
     /tmp/cc2s9jxe.s:16095  .text:00000034 $t
     /tmp/cc2s9jxe.s:16100  .text:00000034 InitUSART
     /tmp/cc2s9jxe.s:16222  .text:00000108 $d
     /tmp/cc2s9jxe.s:16229  .text:00000118 $t
     /tmp/cc2s9jxe.s:16234  .text:00000118 send_to_usart
     /tmp/cc2s9jxe.s:16266  .text:00000134 $d
     /tmp/cc2s9jxe.s:16270  .text:00000138 $t
     /tmp/cc2s9jxe.s:16275  .text:00000138 usart_interrupt_init
     /tmp/cc2s9jxe.s:16313  .text:00000168 $d
     /tmp/cc2s9jxe.s:16317  .text:0000016c $t
     /tmp/cc2s9jxe.s:16322  .text:0000016c read_byte
     /tmp/cc2s9jxe.s:16361  .text:00000194 $d
     /tmp/cc2s9jxe.s:16365  .text:00000198 $t
     /tmp/cc2s9jxe.s:16370  .text:00000198 send_string
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
