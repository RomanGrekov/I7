   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"Main.c"
  23              	.Ltext0:
  24              		.file 1 "../Main.c"
 16389              		.align	2
 16390              	.LC0:
 16391 0000 4C434420 		.ascii	"LCD test OK\000"
 16391      74657374 
 16391      204F4B00 
 16392              		.text
 16393              		.align	2
 16394              		.global	main
 16395              		.thumb
 16396              		.thumb_func
 16398              	main:
 16399              	.LFB29:
   1:../Main.c     **** #include "libs/stm32f10x.h"
   2:../Main.c     **** #include "hd44780_driver/hd44780_driver.h"
   3:../Main.c     **** #include "clock/clock.h"
   4:../Main.c     **** #include "delay/delay.h"
   5:../Main.c     **** #include "common/common_funcs.h"
   6:../Main.c     **** #include "kb_driver/keyboard_driver.h"
   7:../Main.c     **** #include "USART/usart.h"
   8:../Main.c     **** #include "usart_funcs/usart_funcs.h"
   9:../Main.c     **** #include "sim900/sim900.h"
  10:../Main.c     **** 
  11:../Main.c     **** void InitAll(void);
  12:../Main.c     **** 
  13:../Main.c     **** 
  14:../Main.c     **** int main(void)
  15:../Main.c     **** {
 16400              		.loc 1 15 0
 16401              		.cfi_startproc
 16402              		@ args = 0, pretend = 0, frame = 0
 16403              		@ frame_needed = 1, uses_anonymous_args = 0
 16404 0000 80B5     		push	{r7, lr}
 16405              	.LCFI0:
 16406              		.cfi_def_cfa_offset 8
 16407 0002 00AF     		add	r7, sp, #0
 16408              		.cfi_offset 14, -4
 16409              		.cfi_offset 7, -8
 16410              	.LCFI1:
 16411              		.cfi_def_cfa_register 7
  16:../Main.c     ****         InitAll();
 16412              		.loc 1 16 0
 16413 0004 FFF7FEFF 		bl	InitAll
  17:../Main.c     **** 
  18:../Main.c     ****         lcd_out("LCD test OK");
 16414              		.loc 1 18 0
 16415 0008 0948     		ldr	r0, .L3
 16416 000a FFF7FEFF 		bl	lcd_out
  19:../Main.c     ****         //SendStr("USART test OK");
  20:../Main.c     **** 		delay_timer_ms(1000);
 16417              		.loc 1 20 0
 16418 000e 4FF47A70 		mov	r0, #1000
 16419 0012 FFF7FEFF 		bl	delay_timer_ms
  21:../Main.c     **** 		lcd_clear();
 16420              		.loc 1 21 0
 16421 0016 FFF7FEFF 		bl	lcd_clear
 16422              	.L2:
  22:../Main.c     **** 
  23:../Main.c     ****         while(1)
  24:../Main.c     ****         {
  25:../Main.c     ****             GPIOB->ODR ^= GPIO_ODR_ODR0;
 16423              		.loc 1 25 0 discriminator 1
 16424 001a 064B     		ldr	r3, .L3+4
 16425 001c 054A     		ldr	r2, .L3+4
 16426 001e D268     		ldr	r2, [r2, #12]
 16427 0020 82F00102 		eor	r2, r2, #1
 16428 0024 DA60     		str	r2, [r3, #12]
  26:../Main.c     ****             delay_timer_ms(1000);
 16429              		.loc 1 26 0 discriminator 1
 16430 0026 4FF47A70 		mov	r0, #1000
 16431 002a FFF7FEFF 		bl	delay_timer_ms
  27:../Main.c     ****             //itoa(buttons[0][0], 10, buf);
  28:../Main.c     ****             //lcd_clear();
  29:../Main.c     ****             //lcd_out(buf);
  30:../Main.c     **** 
  31:../Main.c     ****             //kb_strobe();
  32:../Main.c     ****             //GPIOA->BSRR = GPIO_BSRR_BS0;
  33:../Main.c     ****             //GPIOA->BSRR = GPIO_BSRR_BR0;
  34:../Main.c     **** 
  35:../Main.c     ****     }
 16432              		.loc 1 35 0 discriminator 1
 16433 002e F4E7     		b	.L2
 16434              	.L4:
 16435              		.align	2
 16436              	.L3:
 16437 0030 00000000 		.word	.LC0
 16438 0034 000C0140 		.word	1073810432
 16439              		.cfi_endproc
 16440              	.LFE29:
 16442              		.section	.rodata
 16443              		.align	2
 16444              	.LC1:
 16445 000c 61740D00 		.ascii	"at\015\000"
 16446              		.align	2
 16447              	.LC2:
 16448 0010 61746430 		.ascii	"atd0506073568;\015\000"
 16448      35303630 
 16448      37333536 
 16448      383B0D00 
 16449              		.align	2
 16450              	.LC3:
 16451 0020 6174610D 		.ascii	"ata\015\000"
 16451      00
 16452 0025 000000   		.text
 16453              		.align	2
 16454              		.global	TIM2_IRQHandler
 16455              		.thumb
 16456              		.thumb_func
 16458              	TIM2_IRQHandler:
 16459              	.LFB30:
  36:../Main.c     **** 
  37:../Main.c     **** }
  38:../Main.c     **** 
  39:../Main.c     **** void TIM2_IRQHandler(void)
  40:../Main.c     **** {
 16460              		.loc 1 40 0
 16461              		.cfi_startproc
 16462              		@ args = 0, pretend = 0, frame = 8
 16463              		@ frame_needed = 1, uses_anonymous_args = 0
 16464 0038 80B5     		push	{r7, lr}
 16465              	.LCFI2:
 16466              		.cfi_def_cfa_offset 8
 16467 003a 82B0     		sub	sp, sp, #8
 16468              	.LCFI3:
 16469              		.cfi_def_cfa_offset 16
 16470 003c 00AF     		add	r7, sp, #0
 16471              		.cfi_offset 14, -4
 16472              		.cfi_offset 7, -8
 16473              	.LCFI4:
 16474              		.cfi_def_cfa_register 7
  41:../Main.c     **** 	uint16_t my_btn;
  42:../Main.c     **** 	uint8_t tmp;
  43:../Main.c     **** 	TIM2->SR &= ~TIM_SR_UIF;
 16475              		.loc 1 43 0
 16476 003e 4FF08043 		mov	r3, #1073741824
 16477 0042 4FF08042 		mov	r2, #1073741824
 16478 0046 128A     		ldrh	r2, [r2, #16]	@ movhi
 16479 0048 92B2     		uxth	r2, r2
 16480 004a 22F00102 		bic	r2, r2, #1
 16481 004e 92B2     		uxth	r2, r2
 16482 0050 1A82     		strh	r2, [r3, #16]	@ movhi
  44:../Main.c     **** 	//GPIOB->ODR ^= GPIO_ODR_ODR1;
  45:../Main.c     **** 	kb_strobe();
 16483              		.loc 1 45 0
 16484 0052 FFF7FEFF 		bl	kb_strobe
  46:../Main.c     **** 	my_btn = get_btn();
 16485              		.loc 1 46 0
 16486 0056 FFF7FEFF 		bl	get_btn
 16487 005a 0346     		mov	r3, r0
 16488 005c FB80     		strh	r3, [r7, #6]	@ movhi
  47:../Main.c     **** 	if (my_btn != 0){
 16489              		.loc 1 47 0
 16490 005e FB88     		ldrh	r3, [r7, #6]
 16491 0060 002B     		cmp	r3, #0
 16492 0062 26D0     		beq	.L6
  48:../Main.c     **** 		//lcd_send_byte(my_btn, 1);
  49:../Main.c     **** 		//lcd_send_byte('-',1);
  50:../Main.c     **** 		//lcd_send_byte((my_btn & 0xff00)>>8, 1);
  51:../Main.c     **** 
  52:../Main.c     **** 		tmp = my_btn;
 16493              		.loc 1 52 0
 16494 0064 FB88     		ldrh	r3, [r7, #6]	@ movhi
 16495 0066 7B71     		strb	r3, [r7, #5]
  53:../Main.c     **** 		if(tmp == '*')lcd_clear();
 16496              		.loc 1 53 0
 16497 0068 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16498 006a 2A2B     		cmp	r3, #42
 16499 006c 01D1     		bne	.L7
 16500              		.loc 1 53 0 is_stmt 0 discriminator 1
 16501 006e FFF7FEFF 		bl	lcd_clear
 16502              	.L7:
  54:../Main.c     **** 		if(tmp == '1')SendStr("at\r");
 16503              		.loc 1 54 0 is_stmt 1
 16504 0072 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16505 0074 312B     		cmp	r3, #49
 16506 0076 02D1     		bne	.L8
 16507              		.loc 1 54 0 is_stmt 0 discriminator 1
 16508 0078 1648     		ldr	r0, .L13
 16509 007a FFF7FEFF 		bl	SendStr
 16510              	.L8:
  55:../Main.c     **** 		if(tmp == '2')SendStr("atd0506073568;\r");
 16511              		.loc 1 55 0 is_stmt 1
 16512 007e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16513 0080 322B     		cmp	r3, #50
 16514 0082 02D1     		bne	.L9
 16515              		.loc 1 55 0 is_stmt 0 discriminator 1
 16516 0084 1448     		ldr	r0, .L13+4
 16517 0086 FFF7FEFF 		bl	SendStr
 16518              	.L9:
  56:../Main.c     **** 		if(tmp == '3')SendStr("ata\r");
 16519              		.loc 1 56 0 is_stmt 1
 16520 008a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16521 008c 332B     		cmp	r3, #51
 16522 008e 02D1     		bne	.L10
 16523              		.loc 1 56 0 is_stmt 0 discriminator 1
 16524 0090 1248     		ldr	r0, .L13+8
 16525 0092 FFF7FEFF 		bl	SendStr
 16526              	.L10:
  57:../Main.c     **** 		if(tmp == '4')SwitchSim900(1);
 16527              		.loc 1 57 0 is_stmt 1
 16528 0096 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16529 0098 342B     		cmp	r3, #52
 16530 009a 03D1     		bne	.L11
 16531              		.loc 1 57 0 is_stmt 0 discriminator 1
 16532 009c 4FF00100 		mov	r0, #1
 16533 00a0 FFF7FEFF 		bl	SwitchSim900
 16534              	.L11:
  58:../Main.c     **** 		if(tmp == '5')SwitchSim900(0);
 16535              		.loc 1 58 0 is_stmt 1
 16536 00a4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16537 00a6 352B     		cmp	r3, #53
 16538 00a8 03D1     		bne	.L6
 16539              		.loc 1 58 0 is_stmt 0 discriminator 1
 16540 00aa 4FF00000 		mov	r0, #0
 16541 00ae FFF7FEFF 		bl	SwitchSim900
 16542              	.L6:
  59:../Main.c     **** 		//USART_PutChar(tmp);
  60:../Main.c     **** 		//lcd_out(my_btn);
  61:../Main.c     **** 	}
  62:../Main.c     **** 
  63:../Main.c     **** 	tmp = GetChar();
 16543              		.loc 1 63 0 is_stmt 1
 16544 00b2 FFF7FEFF 		bl	GetChar
 16545 00b6 0346     		mov	r3, r0
 16546 00b8 7B71     		strb	r3, [r7, #5]
  64:../Main.c     **** 	if (tmp != 0){
 16547              		.loc 1 64 0
 16548 00ba 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16549 00bc 002B     		cmp	r3, #0
 16550 00be 05D0     		beq	.L5
  65:../Main.c     **** 		//lcd_clear();
  66:../Main.c     **** 		lcd_send(tmp, 1);
 16551              		.loc 1 66 0
 16552 00c0 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 16553 00c2 1846     		mov	r0, r3
 16554 00c4 4FF00101 		mov	r1, #1
 16555 00c8 FFF7FEFF 		bl	lcd_send
 16556              	.L5:
  67:../Main.c     **** 	}
  68:../Main.c     **** 
  69:../Main.c     **** }
 16557              		.loc 1 69 0
 16558 00cc 07F10807 		add	r7, r7, #8
 16559 00d0 BD46     		mov	sp, r7
 16560 00d2 80BD     		pop	{r7, pc}
 16561              	.L14:
 16562              		.align	2
 16563              	.L13:
 16564 00d4 0C000000 		.word	.LC1
 16565 00d8 10000000 		.word	.LC2
 16566 00dc 20000000 		.word	.LC3
 16567              		.cfi_endproc
 16568              	.LFE30:
 16570              		.align	2
 16571              		.global	InitAll
 16572              		.thumb
 16573              		.thumb_func
 16575              	InitAll:
 16576              	.LFB31:
  70:../Main.c     **** 
  71:../Main.c     **** void InitAll(void)
  72:../Main.c     **** {
 16577              		.loc 1 72 0
 16578              		.cfi_startproc
 16579              		@ args = 0, pretend = 0, frame = 0
 16580              		@ frame_needed = 1, uses_anonymous_args = 0
 16581 00e0 80B5     		push	{r7, lr}
 16582              	.LCFI5:
 16583              		.cfi_def_cfa_offset 8
 16584 00e2 00AF     		add	r7, sp, #0
 16585              		.cfi_offset 14, -4
 16586              		.cfi_offset 7, -8
 16587              	.LCFI6:
 16588              		.cfi_def_cfa_register 7
  73:../Main.c     ****     RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; //Clock port
 16589              		.loc 1 73 0
 16590 00e4 194B     		ldr	r3, .L16
 16591 00e6 194A     		ldr	r2, .L16
 16592 00e8 9269     		ldr	r2, [r2, #24]
 16593 00ea 42F00802 		orr	r2, r2, #8
 16594 00ee 9A61     		str	r2, [r3, #24]
  74:../Main.c     **** 
  75:../Main.c     ****     GPIOB->CRL      &= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);
 16595              		.loc 1 75 0
 16596 00f0 174B     		ldr	r3, .L16+4
 16597 00f2 174A     		ldr	r2, .L16+4
 16598 00f4 1268     		ldr	r2, [r2, #0]
 16599 00f6 22F0CC02 		bic	r2, r2, #204
 16600 00fa 1A60     		str	r2, [r3, #0]
  76:../Main.c     ****     GPIOB->CRL      |= (GPIO_CRL_MODE0_0 | GPIO_CRL_MODE1_0);
 16601              		.loc 1 76 0
 16602 00fc 144B     		ldr	r3, .L16+4
 16603 00fe 144A     		ldr	r2, .L16+4
 16604 0100 1268     		ldr	r2, [r2, #0]
 16605 0102 42F01102 		orr	r2, r2, #17
 16606 0106 1A60     		str	r2, [r3, #0]
  77:../Main.c     **** 
  78:../Main.c     ****     InitRCC();
 16607              		.loc 1 78 0
 16608 0108 FFF7FEFF 		bl	InitRCC
  79:../Main.c     **** 	//Разрешаем прерывание если кварц плохо
  80:../Main.c     **** 	init_bad_clock_inter();
 16609              		.loc 1 80 0
 16610 010c FFF7FEFF 		bl	init_bad_clock_inter
  81:../Main.c     **** 
  82:../Main.c     ****     lcd_init();
 16611              		.loc 1 82 0
 16612 0110 FFF7FEFF 		bl	lcd_init
  83:../Main.c     ****     lcd_set_state(1, 0, 0);
 16613              		.loc 1 83 0
 16614 0114 4FF00100 		mov	r0, #1
 16615 0118 4FF00001 		mov	r1, #0
 16616 011c 4FF00002 		mov	r2, #0
 16617 0120 FFF7FEFF 		bl	lcd_set_state
  84:../Main.c     **** 
  85:../Main.c     ****     init_keyboard();
 16618              		.loc 1 85 0
 16619 0124 FFF7FEFF 		bl	init_keyboard
  86:../Main.c     **** 
  87:../Main.c     ****     timer2_init(10);
 16620              		.loc 1 87 0
 16621 0128 4FF00A00 		mov	r0, #10
 16622 012c FFF7FEFF 		bl	timer2_init
  88:../Main.c     ****     delay_timer_ms_init();
 16623              		.loc 1 88 0
 16624 0130 FFF7FEFF 		bl	delay_timer_ms_init
  89:../Main.c     **** 
  90:../Main.c     ****     InitUSART(9600);
 16625              		.loc 1 90 0
 16626 0134 4FF41650 		mov	r0, #9600
 16627 0138 FFF7FEFF 		bl	InitUSART
  91:../Main.c     ****     usart_interrupt_init();
 16628              		.loc 1 91 0
 16629 013c FFF7FEFF 		bl	usart_interrupt_init
  92:../Main.c     ****     FlushBuf();
 16630              		.loc 1 92 0
 16631 0140 FFF7FEFF 		bl	FlushBuf
  93:../Main.c     **** 
  94:../Main.c     ****     InitSim900();
 16632              		.loc 1 94 0
 16633 0144 FFF7FEFF 		bl	InitSim900
  95:../Main.c     ****    }
 16634              		.loc 1 95 0
 16635 0148 80BD     		pop	{r7, pc}
 16636              	.L17:
 16637 014a 00BF     		.align	2
 16638              	.L16:
 16639 014c 00100240 		.word	1073876992
 16640 0150 000C0140 		.word	1073810432
 16641              		.cfi_endproc
 16642              	.LFE31:
 16644              		.align	2
 16645              		.global	HardFault_Handler
 16646              		.thumb
 16647              		.thumb_func
 16649              	HardFault_Handler:
 16650              	.LFB32:
  96:../Main.c     **** 
  97:../Main.c     **** // где-то в main.c
  98:../Main.c     **** void HardFault_Handler(void)
  99:../Main.c     **** {// пустой обработчик вместо бесконечного цикла
 16651              		.loc 1 99 0
 16652              		.cfi_startproc
 16653              		@ args = 0, pretend = 0, frame = 0
 16654              		@ frame_needed = 1, uses_anonymous_args = 0
 16655              		@ link register save eliminated.
 16656 0154 80B4     		push	{r7}
 16657              	.LCFI7:
 16658              		.cfi_def_cfa_offset 4
 16659 0156 00AF     		add	r7, sp, #0
 16660              		.cfi_offset 7, -4
 16661              	.LCFI8:
 16662              		.cfi_def_cfa_register 7
 100:../Main.c     **** 
 101:../Main.c     **** }
 16663              		.loc 1 101 0
 16664 0158 BD46     		mov	sp, r7
 16665 015a 80BC     		pop	{r7}
 16666 015c 7047     		bx	lr
 16667              		.cfi_endproc
 16668              	.LFE32:
 16670              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
                            *COM*:0000000c check_buttons
                            *COM*:0000000c buttons
                            *COM*:0000000c durations
                            *COM*:00000001 btn_cnt
     /tmp/cc0sYjOz.s:16389  .rodata:00000000 $d
     /tmp/cc0sYjOz.s:16393  .text:00000000 $t
     /tmp/cc0sYjOz.s:16398  .text:00000000 main
     /tmp/cc0sYjOz.s:16575  .text:000000e0 InitAll
     /tmp/cc0sYjOz.s:16437  .text:00000030 $d
     /tmp/cc0sYjOz.s:16453  .text:00000038 $t
     /tmp/cc0sYjOz.s:16458  .text:00000038 TIM2_IRQHandler
     /tmp/cc0sYjOz.s:16564  .text:000000d4 $d
     /tmp/cc0sYjOz.s:16570  .text:000000e0 $t
     /tmp/cc0sYjOz.s:16639  .text:0000014c $d
     /tmp/cc0sYjOz.s:16644  .text:00000154 $t
     /tmp/cc0sYjOz.s:16649  .text:00000154 HardFault_Handler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
lcd_out
delay_timer_ms
lcd_clear
kb_strobe
get_btn
SendStr
SwitchSim900
GetChar
lcd_send
InitRCC
init_bad_clock_inter
lcd_init
lcd_set_state
init_keyboard
timer2_init
delay_timer_ms_init
InitUSART
usart_interrupt_init
FlushBuf
InitSim900
