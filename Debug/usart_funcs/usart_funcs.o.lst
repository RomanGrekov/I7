   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"usart_funcs.c"
  23              	.Ltext0:
  24              		.file 1 "../usart_funcs/usart_funcs.c"
 16055              	RXtail:
 16056 0000 00       		.space	1
 16057              		.global	RXhead
 16060              	RXhead:
 16061 0001 00       		.space	1
 16062              		.global	RXcount
 16065              	RXcount:
 16066 0002 00       		.space	1
 16067              		.comm	TXBuf,16,4
 16068              		.global	TXtail
 16071              	TXtail:
 16072 0003 00       		.space	1
 16073              		.global	TXhead
 16076              	TXhead:
 16077 0004 00       		.space	1
 16078              		.global	TXcount
 16081              	TXcount:
 16082 0005 00       		.space	1
 16083              		.text
 16084              		.align	2
 16085              		.global	FlushBuf
 16086              		.thumb
 16087              		.thumb_func
 16089              	FlushBuf:
 16090              	.LFB29:
   1:../usart_funcs/usart_funcs.c **** #include "usart_funcs.h"
   2:../usart_funcs/usart_funcs.c **** 
   3:../usart_funcs/usart_funcs.c **** void USART_PutChar(unsigned char sym);
   4:../usart_funcs/usart_funcs.c **** void USART_SendStr(unsigned char * data);
   5:../usart_funcs/usart_funcs.c **** 
   6:../usart_funcs/usart_funcs.c **** //кольцевой (циклический) буфер
   7:../usart_funcs/usart_funcs.c **** unsigned char RXBuf[SIZE_BUF];
   8:../usart_funcs/usart_funcs.c **** unsigned char RXtail = 0;      //"указатель" хвоста буфера
   9:../usart_funcs/usart_funcs.c **** unsigned char RXhead = 0;   //"указатель" головы буфера
  10:../usart_funcs/usart_funcs.c **** unsigned char RXcount = 0;  //счетчик символов
  11:../usart_funcs/usart_funcs.c **** 
  12:../usart_funcs/usart_funcs.c **** unsigned char TXBuf[SIZE_BUF];
  13:../usart_funcs/usart_funcs.c **** unsigned char TXtail = 0;
  14:../usart_funcs/usart_funcs.c **** unsigned char TXhead = 0;
  15:../usart_funcs/usart_funcs.c **** unsigned char TXcount = 0;
  16:../usart_funcs/usart_funcs.c **** 
  17:../usart_funcs/usart_funcs.c **** //"очищает" буфер
  18:../usart_funcs/usart_funcs.c **** void FlushBuf(void)
  19:../usart_funcs/usart_funcs.c **** {
 16091              		.loc 1 19 0
 16092              		.cfi_startproc
 16093              		@ args = 0, pretend = 0, frame = 0
 16094              		@ frame_needed = 1, uses_anonymous_args = 0
 16095              		@ link register save eliminated.
 16096 0000 80B4     		push	{r7}
 16097              	.LCFI0:
 16098              		.cfi_def_cfa_offset 4
 16099 0002 00AF     		add	r7, sp, #0
 16100              		.cfi_offset 7, -4
 16101              	.LCFI1:
 16102              		.cfi_def_cfa_register 7
  20:../usart_funcs/usart_funcs.c ****   RXtail = 0;
 16103              		.loc 1 20 0
 16104 0004 074B     		ldr	r3, .L2
 16105 0006 4FF00002 		mov	r2, #0
 16106 000a 1A70     		strb	r2, [r3, #0]
  21:../usart_funcs/usart_funcs.c ****   RXhead = 0;
 16107              		.loc 1 21 0
 16108 000c 064B     		ldr	r3, .L2+4
 16109 000e 4FF00002 		mov	r2, #0
 16110 0012 1A70     		strb	r2, [r3, #0]
  22:../usart_funcs/usart_funcs.c ****   RXcount = 0;
 16111              		.loc 1 22 0
 16112 0014 054B     		ldr	r3, .L2+8
 16113 0016 4FF00002 		mov	r2, #0
 16114 001a 1A70     		strb	r2, [r3, #0]
  23:../usart_funcs/usart_funcs.c **** }
 16115              		.loc 1 23 0
 16116 001c BD46     		mov	sp, r7
 16117 001e 80BC     		pop	{r7}
 16118 0020 7047     		bx	lr
 16119              	.L3:
 16120 0022 00BF     		.align	2
 16121              	.L2:
 16122 0024 00000000 		.word	RXtail
 16123 0028 00000000 		.word	RXhead
 16124 002c 00000000 		.word	RXcount
 16125              		.cfi_endproc
 16126              	.LFE29:
 16128              		.align	2
 16129              		.global	PutChar
 16130              		.thumb
 16131              		.thumb_func
 16133              	PutChar:
 16134              	.LFB30:
  24:../usart_funcs/usart_funcs.c **** 
  25:../usart_funcs/usart_funcs.c **** //положить символ в буфер
  26:../usart_funcs/usart_funcs.c **** void PutChar(unsigned char sym)
  27:../usart_funcs/usart_funcs.c **** {
 16135              		.loc 1 27 0
 16136              		.cfi_startproc
 16137              		@ args = 0, pretend = 0, frame = 8
 16138              		@ frame_needed = 1, uses_anonymous_args = 0
 16139              		@ link register save eliminated.
 16140 0030 80B4     		push	{r7}
 16141              	.LCFI2:
 16142              		.cfi_def_cfa_offset 4
 16143 0032 83B0     		sub	sp, sp, #12
 16144              	.LCFI3:
 16145              		.cfi_def_cfa_offset 16
 16146 0034 00AF     		add	r7, sp, #0
 16147              		.cfi_offset 7, -4
 16148              	.LCFI4:
 16149              		.cfi_def_cfa_register 7
 16150 0036 0346     		mov	r3, r0
 16151 0038 FB71     		strb	r3, [r7, #7]
  28:../usart_funcs/usart_funcs.c ****   if (RXcount < SIZE_BUF){   //если в буфере еще есть место
 16152              		.loc 1 28 0
 16153 003a 124B     		ldr	r3, .L6
 16154 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16155 003e 0F2B     		cmp	r3, #15
 16156 0040 1AD8     		bhi	.L4
  29:../usart_funcs/usart_funcs.c ****       RXBuf[RXtail] = sym;    //помещаем в него символ
 16157              		.loc 1 29 0
 16158 0042 114B     		ldr	r3, .L6+4
 16159 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16160 0046 114A     		ldr	r2, .L6+8
 16161 0048 F979     		ldrb	r1, [r7, #7]
 16162 004a D154     		strb	r1, [r2, r3]
  30:../usart_funcs/usart_funcs.c ****       RXcount++;                    //инкрементируем счетчик символов
 16163              		.loc 1 30 0
 16164 004c 0D4B     		ldr	r3, .L6
 16165 004e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16166 0050 03F10103 		add	r3, r3, #1
 16167 0054 DAB2     		uxtb	r2, r3
 16168 0056 0B4B     		ldr	r3, .L6
 16169 0058 1A70     		strb	r2, [r3, #0]
  31:../usart_funcs/usart_funcs.c ****       RXtail++;                           //и индекс хвоста буфера
 16170              		.loc 1 31 0
 16171 005a 0B4B     		ldr	r3, .L6+4
 16172 005c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16173 005e 03F10103 		add	r3, r3, #1
 16174 0062 DAB2     		uxtb	r2, r3
 16175 0064 084B     		ldr	r3, .L6+4
 16176 0066 1A70     		strb	r2, [r3, #0]
  32:../usart_funcs/usart_funcs.c ****       if (TXtail == SIZE_BUF)TXtail = 0;
 16177              		.loc 1 32 0
 16178 0068 094B     		ldr	r3, .L6+12
 16179 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16180 006c 102B     		cmp	r3, #16
 16181 006e 03D1     		bne	.L4
 16182              		.loc 1 32 0 is_stmt 0 discriminator 1
 16183 0070 074B     		ldr	r3, .L6+12
 16184 0072 4FF00002 		mov	r2, #0
 16185 0076 1A70     		strb	r2, [r3, #0]
 16186              	.L4:
  33:../usart_funcs/usart_funcs.c ****     }
  34:../usart_funcs/usart_funcs.c **** }
 16187              		.loc 1 34 0 is_stmt 1
 16188 0078 07F10C07 		add	r7, r7, #12
 16189 007c BD46     		mov	sp, r7
 16190 007e 80BC     		pop	{r7}
 16191 0080 7047     		bx	lr
 16192              	.L7:
 16193 0082 00BF     		.align	2
 16194              	.L6:
 16195 0084 00000000 		.word	RXcount
 16196 0088 00000000 		.word	RXtail
 16197 008c 00000000 		.word	RXBuf
 16198 0090 00000000 		.word	TXtail
 16199              		.cfi_endproc
 16200              	.LFE30:
 16202              		.align	2
 16203              		.global	GetChar
 16204              		.thumb
 16205              		.thumb_func
 16207              	GetChar:
 16208              	.LFB31:
  35:../usart_funcs/usart_funcs.c **** 
  36:../usart_funcs/usart_funcs.c **** //взять символ из буфера
  37:../usart_funcs/usart_funcs.c **** unsigned char GetChar(void)
  38:../usart_funcs/usart_funcs.c **** {
 16209              		.loc 1 38 0
 16210              		.cfi_startproc
 16211              		@ args = 0, pretend = 0, frame = 8
 16212              		@ frame_needed = 1, uses_anonymous_args = 0
 16213              		@ link register save eliminated.
 16214 0094 80B4     		push	{r7}
 16215              	.LCFI5:
 16216              		.cfi_def_cfa_offset 4
 16217 0096 83B0     		sub	sp, sp, #12
 16218              	.LCFI6:
 16219              		.cfi_def_cfa_offset 16
 16220 0098 00AF     		add	r7, sp, #0
 16221              		.cfi_offset 7, -4
 16222              	.LCFI7:
 16223              		.cfi_def_cfa_register 7
  39:../usart_funcs/usart_funcs.c ****    unsigned char sym = 0;
 16224              		.loc 1 39 0
 16225 009a 4FF00003 		mov	r3, #0
 16226 009e FB71     		strb	r3, [r7, #7]
  40:../usart_funcs/usart_funcs.c ****    if (RXcount > 0){                            //если буфер не пустой
 16227              		.loc 1 40 0
 16228 00a0 124B     		ldr	r3, .L10
 16229 00a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16230 00a4 002B     		cmp	r3, #0
 16231 00a6 1AD0     		beq	.L9
  41:../usart_funcs/usart_funcs.c ****       sym = RXBuf[RXhead];              //считываем символ из буфера
 16232              		.loc 1 41 0
 16233 00a8 114B     		ldr	r3, .L10+4
 16234 00aa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16235 00ac 114A     		ldr	r2, .L10+8
 16236 00ae D35C     		ldrb	r3, [r2, r3]
 16237 00b0 FB71     		strb	r3, [r7, #7]
  42:../usart_funcs/usart_funcs.c ****       RXcount--;                                   //уменьшаем счетчик символ
 16238              		.loc 1 42 0
 16239 00b2 0E4B     		ldr	r3, .L10
 16240 00b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16241 00b6 03F1FF33 		add	r3, r3, #-1
 16242 00ba DAB2     		uxtb	r2, r3
 16243 00bc 0B4B     		ldr	r3, .L10
 16244 00be 1A70     		strb	r2, [r3, #0]
  43:../usart_funcs/usart_funcs.c ****       RXhead++;                                  //инкрементируем индекс гол
 16245              		.loc 1 43 0
 16246 00c0 0B4B     		ldr	r3, .L10+4
 16247 00c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16248 00c4 03F10103 		add	r3, r3, #1
 16249 00c8 DAB2     		uxtb	r2, r3
 16250 00ca 094B     		ldr	r3, .L10+4
 16251 00cc 1A70     		strb	r2, [r3, #0]
  44:../usart_funcs/usart_funcs.c ****       if (RXhead == SIZE_BUF) RXhead = 0;
 16252              		.loc 1 44 0
 16253 00ce 084B     		ldr	r3, .L10+4
 16254 00d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16255 00d2 102B     		cmp	r3, #16
 16256 00d4 03D1     		bne	.L9
 16257              		.loc 1 44 0 is_stmt 0 discriminator 1
 16258 00d6 064B     		ldr	r3, .L10+4
 16259 00d8 4FF00002 		mov	r2, #0
 16260 00dc 1A70     		strb	r2, [r3, #0]
 16261              	.L9:
  45:../usart_funcs/usart_funcs.c ****    }
  46:../usart_funcs/usart_funcs.c ****    return sym;
 16262              		.loc 1 46 0 is_stmt 1
 16263 00de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  47:../usart_funcs/usart_funcs.c **** }
 16264              		.loc 1 47 0
 16265 00e0 1846     		mov	r0, r3
 16266 00e2 07F10C07 		add	r7, r7, #12
 16267 00e6 BD46     		mov	sp, r7
 16268 00e8 80BC     		pop	{r7}
 16269 00ea 7047     		bx	lr
 16270              	.L11:
 16271              		.align	2
 16272              	.L10:
 16273 00ec 00000000 		.word	RXcount
 16274 00f0 00000000 		.word	RXhead
 16275 00f4 00000000 		.word	RXBuf
 16276              		.cfi_endproc
 16277              	.LFE31:
 16279              		.align	2
 16280              		.global	USART_PutChar
 16281              		.thumb
 16282              		.thumb_func
 16284              	USART_PutChar:
 16285              	.LFB32:
  48:../usart_funcs/usart_funcs.c **** 
  49:../usart_funcs/usart_funcs.c **** void USART_PutChar(unsigned char sym)
  50:../usart_funcs/usart_funcs.c **** {
 16286              		.loc 1 50 0
 16287              		.cfi_startproc
 16288              		@ args = 0, pretend = 0, frame = 8
 16289              		@ frame_needed = 1, uses_anonymous_args = 0
 16290              		@ link register save eliminated.
 16291 00f8 80B4     		push	{r7}
 16292              	.LCFI8:
 16293              		.cfi_def_cfa_offset 4
 16294 00fa 83B0     		sub	sp, sp, #12
 16295              	.LCFI9:
 16296              		.cfi_def_cfa_offset 16
 16297 00fc 00AF     		add	r7, sp, #0
 16298              		.cfi_offset 7, -4
 16299              	.LCFI10:
 16300              		.cfi_def_cfa_register 7
 16301 00fe 0346     		mov	r3, r0
 16302 0100 FB71     		strb	r3, [r7, #7]
  51:../usart_funcs/usart_funcs.c ****   if((USART1->SR & USART_SR_TC) && (TXcount == 0)){
 16303              		.loc 1 51 0
 16304 0102 1E4B     		ldr	r3, .L15
 16305 0104 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16306 0106 9BB2     		uxth	r3, r3
 16307 0108 03F04003 		and	r3, r3, #64
 16308 010c 002B     		cmp	r3, #0
 16309 010e 08D0     		beq	.L13
 16310              		.loc 1 51 0 is_stmt 0 discriminator 1
 16311 0110 1B4B     		ldr	r3, .L15+4
 16312 0112 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16313 0114 002B     		cmp	r3, #0
 16314 0116 04D1     		bne	.L13
  52:../usart_funcs/usart_funcs.c **** 	  USART1->DR = sym;
 16315              		.loc 1 52 0 is_stmt 1
 16316 0118 184B     		ldr	r3, .L15
 16317 011a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 16318 011c 92B2     		uxth	r2, r2
 16319 011e 9A80     		strh	r2, [r3, #4]	@ movhi
 16320 0120 26E0     		b	.L12
 16321              	.L13:
  53:../usart_funcs/usart_funcs.c ****   }
  54:../usart_funcs/usart_funcs.c ****   else {
  55:../usart_funcs/usart_funcs.c **** 	USART1->CR1 |= USART_CR1_TXEIE;/*!<PE Interrupt enable */
 16322              		.loc 1 55 0
 16323 0122 164B     		ldr	r3, .L15
 16324 0124 154A     		ldr	r2, .L15
 16325 0126 9289     		ldrh	r2, [r2, #12]	@ movhi
 16326 0128 92B2     		uxth	r2, r2
 16327 012a 42F08002 		orr	r2, r2, #128
 16328 012e 92B2     		uxth	r2, r2
 16329 0130 9A81     		strh	r2, [r3, #12]	@ movhi
  56:../usart_funcs/usart_funcs.c ****     if (TXcount < SIZE_BUF){                    //если в буфере еще есть мест
 16330              		.loc 1 56 0
 16331 0132 134B     		ldr	r3, .L15+4
 16332 0134 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16333 0136 0F2B     		cmp	r3, #15
 16334 0138 1AD8     		bhi	.L12
  57:../usart_funcs/usart_funcs.c ****       TXBuf[TXtail] = sym;             //помещаем в него символ
 16335              		.loc 1 57 0
 16336 013a 124B     		ldr	r3, .L15+8
 16337 013c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16338 013e 124A     		ldr	r2, .L15+12
 16339 0140 F979     		ldrb	r1, [r7, #7]
 16340 0142 D154     		strb	r1, [r2, r3]
  58:../usart_funcs/usart_funcs.c ****       TXcount++;                                     //инкрементируем счетчик 
 16341              		.loc 1 58 0
 16342 0144 0E4B     		ldr	r3, .L15+4
 16343 0146 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16344 0148 03F10103 		add	r3, r3, #1
 16345 014c DAB2     		uxtb	r2, r3
 16346 014e 0C4B     		ldr	r3, .L15+4
 16347 0150 1A70     		strb	r2, [r3, #0]
  59:../usart_funcs/usart_funcs.c ****       TXtail++;                                    //и индекс хвоста буфера
 16348              		.loc 1 59 0
 16349 0152 0C4B     		ldr	r3, .L15+8
 16350 0154 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16351 0156 03F10103 		add	r3, r3, #1
 16352 015a DAB2     		uxtb	r2, r3
 16353 015c 094B     		ldr	r3, .L15+8
 16354 015e 1A70     		strb	r2, [r3, #0]
  60:../usart_funcs/usart_funcs.c ****       if (TXtail == SIZE_BUF) TXtail = 0;
 16355              		.loc 1 60 0
 16356 0160 084B     		ldr	r3, .L15+8
 16357 0162 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16358 0164 102B     		cmp	r3, #16
 16359 0166 03D1     		bne	.L12
 16360              		.loc 1 60 0 is_stmt 0 discriminator 1
 16361 0168 064B     		ldr	r3, .L15+8
 16362 016a 4FF00002 		mov	r2, #0
 16363 016e 1A70     		strb	r2, [r3, #0]
 16364              	.L12:
  61:../usart_funcs/usart_funcs.c ****     }
  62:../usart_funcs/usart_funcs.c ****   }
  63:../usart_funcs/usart_funcs.c **** }
 16365              		.loc 1 63 0 is_stmt 1
 16366 0170 07F10C07 		add	r7, r7, #12
 16367 0174 BD46     		mov	sp, r7
 16368 0176 80BC     		pop	{r7}
 16369 0178 7047     		bx	lr
 16370              	.L16:
 16371 017a 00BF     		.align	2
 16372              	.L15:
 16373 017c 00380140 		.word	1073821696
 16374 0180 00000000 		.word	TXcount
 16375 0184 00000000 		.word	TXtail
 16376 0188 00000000 		.word	TXBuf
 16377              		.cfi_endproc
 16378              	.LFE32:
 16380              		.align	2
 16381              		.global	SendStr
 16382              		.thumb
 16383              		.thumb_func
 16385              	SendStr:
 16386              	.LFB33:
  64:../usart_funcs/usart_funcs.c **** 
  65:../usart_funcs/usart_funcs.c **** void SendStr(unsigned char * data)
  66:../usart_funcs/usart_funcs.c **** {
 16387              		.loc 1 66 0
 16388              		.cfi_startproc
 16389              		@ args = 0, pretend = 0, frame = 16
 16390              		@ frame_needed = 1, uses_anonymous_args = 0
 16391 018c 80B5     		push	{r7, lr}
 16392              	.LCFI11:
 16393              		.cfi_def_cfa_offset 8
 16394 018e 84B0     		sub	sp, sp, #16
 16395              	.LCFI12:
 16396              		.cfi_def_cfa_offset 24
 16397 0190 00AF     		add	r7, sp, #0
 16398              		.cfi_offset 14, -4
 16399              		.cfi_offset 7, -8
 16400              	.LCFI13:
 16401              		.cfi_def_cfa_register 7
 16402 0192 7860     		str	r0, [r7, #4]
  67:../usart_funcs/usart_funcs.c ****   unsigned char sym;
  68:../usart_funcs/usart_funcs.c ****   while(*data){
 16403              		.loc 1 68 0
 16404 0194 0AE0     		b	.L18
 16405              	.L19:
  69:../usart_funcs/usart_funcs.c ****     sym = *data++;
 16406              		.loc 1 69 0
 16407 0196 7B68     		ldr	r3, [r7, #4]
 16408 0198 1B78     		ldrb	r3, [r3, #0]
 16409 019a FB73     		strb	r3, [r7, #15]
 16410 019c 7B68     		ldr	r3, [r7, #4]
 16411 019e 03F10103 		add	r3, r3, #1
 16412 01a2 7B60     		str	r3, [r7, #4]
  70:../usart_funcs/usart_funcs.c ****     USART_PutChar(sym);
 16413              		.loc 1 70 0
 16414 01a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 16415 01a6 1846     		mov	r0, r3
 16416 01a8 FFF7FEFF 		bl	USART_PutChar
 16417              	.L18:
  68:../usart_funcs/usart_funcs.c ****   while(*data){
 16418              		.loc 1 68 0 discriminator 1
 16419 01ac 7B68     		ldr	r3, [r7, #4]
 16420 01ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16421 01b0 002B     		cmp	r3, #0
 16422 01b2 F0D1     		bne	.L19
  71:../usart_funcs/usart_funcs.c ****   }
  72:../usart_funcs/usart_funcs.c **** }
 16423              		.loc 1 72 0
 16424 01b4 07F11007 		add	r7, r7, #16
 16425 01b8 BD46     		mov	sp, r7
 16426 01ba 80BD     		pop	{r7, pc}
 16427              		.cfi_endproc
 16428              	.LFE33:
 16430              		.align	2
 16431              		.global	USART1_IRQHandler
 16432              		.thumb
 16433              		.thumb_func
 16435              	USART1_IRQHandler:
 16436              	.LFB34:
  73:../usart_funcs/usart_funcs.c **** 
  74:../usart_funcs/usart_funcs.c **** void USART1_IRQHandler(void){
 16437              		.loc 1 74 0
 16438              		.cfi_startproc
 16439              		@ args = 0, pretend = 0, frame = 0
 16440              		@ frame_needed = 1, uses_anonymous_args = 0
 16441 01bc 80B5     		push	{r7, lr}
 16442              	.LCFI14:
 16443              		.cfi_def_cfa_offset 8
 16444 01be 00AF     		add	r7, sp, #0
 16445              		.cfi_offset 14, -4
 16446              		.cfi_offset 7, -8
 16447              	.LCFI15:
 16448              		.cfi_def_cfa_register 7
  75:../usart_funcs/usart_funcs.c **** 
  76:../usart_funcs/usart_funcs.c **** 	if(USART1->SR & USART_SR_RXNE){/*!<Read Data Register Not Empty */
 16449              		.loc 1 76 0
 16450 01c0 264B     		ldr	r3, .L25
 16451 01c2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16452 01c4 9BB2     		uxth	r3, r3
 16453 01c6 03F02003 		and	r3, r3, #32
 16454 01ca 002B     		cmp	r3, #0
 16455 01cc 06D0     		beq	.L21
  77:../usart_funcs/usart_funcs.c **** 		PutChar(USART1->DR);
 16456              		.loc 1 77 0
 16457 01ce 234B     		ldr	r3, .L25
 16458 01d0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 16459 01d2 9BB2     		uxth	r3, r3
 16460 01d4 DBB2     		uxtb	r3, r3
 16461 01d6 1846     		mov	r0, r3
 16462 01d8 FFF7FEFF 		bl	PutChar
 16463              	.L21:
  78:../usart_funcs/usart_funcs.c **** 	}
  79:../usart_funcs/usart_funcs.c **** 
  80:../usart_funcs/usart_funcs.c **** 	if((USART1->SR & USART_SR_TXE)!=0){// If Transmit Data Register Empty
 16464              		.loc 1 80 0
 16465 01dc 1F4B     		ldr	r3, .L25
 16466 01de 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16467 01e0 9BB2     		uxth	r3, r3
 16468 01e2 03F08003 		and	r3, r3, #128
 16469 01e6 002B     		cmp	r3, #0
 16470 01e8 28D0     		beq	.L22
  81:../usart_funcs/usart_funcs.c **** 		 if (TXcount > 0){                       //если буфер не пустой
 16471              		.loc 1 81 0
 16472 01ea 1D4B     		ldr	r3, .L25+4
 16473 01ec 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16474 01ee 002B     		cmp	r3, #0
 16475 01f0 1CD0     		beq	.L23
  82:../usart_funcs/usart_funcs.c **** 		    USART1->DR = TXBuf[TXhead];  //записываем в DR символ из буфера
 16476              		.loc 1 82 0
 16477 01f2 1A4B     		ldr	r3, .L25
 16478 01f4 1B4A     		ldr	r2, .L25+8
 16479 01f6 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 16480 01f8 1B49     		ldr	r1, .L25+12
 16481 01fa 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 16482 01fc 9A80     		strh	r2, [r3, #4]	@ movhi
  83:../usart_funcs/usart_funcs.c **** 		    TXcount--;                           //уменьшаем счетчик символов
 16483              		.loc 1 83 0
 16484 01fe 184B     		ldr	r3, .L25+4
 16485 0200 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16486 0202 03F1FF33 		add	r3, r3, #-1
 16487 0206 DAB2     		uxtb	r2, r3
 16488 0208 154B     		ldr	r3, .L25+4
 16489 020a 1A70     		strb	r2, [r3, #0]
  84:../usart_funcs/usart_funcs.c **** 		    TXhead++;                         //инкрементируем индекс головы б
 16490              		.loc 1 84 0
 16491 020c 154B     		ldr	r3, .L25+8
 16492 020e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16493 0210 03F10103 		add	r3, r3, #1
 16494 0214 DAB2     		uxtb	r2, r3
 16495 0216 134B     		ldr	r3, .L25+8
 16496 0218 1A70     		strb	r2, [r3, #0]
  85:../usart_funcs/usart_funcs.c **** 		    if (TXhead == SIZE_BUF) TXhead = 0;
 16497              		.loc 1 85 0
 16498 021a 124B     		ldr	r3, .L25+8
 16499 021c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16500 021e 102B     		cmp	r3, #16
 16501 0220 0CD1     		bne	.L22
 16502              		.loc 1 85 0 is_stmt 0 discriminator 1
 16503 0222 104B     		ldr	r3, .L25+8
 16504 0224 4FF00002 		mov	r2, #0
 16505 0228 1A70     		strb	r2, [r3, #0]
 16506 022a 07E0     		b	.L22
 16507              	.L23:
  86:../usart_funcs/usart_funcs.c **** 		  }
  87:../usart_funcs/usart_funcs.c **** 		 else{
  88:../usart_funcs/usart_funcs.c **** 			 USART1->CR1 &= ~USART_CR1_TXEIE;/*!<PE Interrupt Disable */
 16508              		.loc 1 88 0 is_stmt 1
 16509 022c 0B4B     		ldr	r3, .L25
 16510 022e 0B4A     		ldr	r2, .L25
 16511 0230 9289     		ldrh	r2, [r2, #12]	@ movhi
 16512 0232 92B2     		uxth	r2, r2
 16513 0234 22F08002 		bic	r2, r2, #128
 16514 0238 92B2     		uxth	r2, r2
 16515 023a 9A81     		strh	r2, [r3, #12]	@ movhi
 16516              	.L22:
  89:../usart_funcs/usart_funcs.c **** 		 }
  90:../usart_funcs/usart_funcs.c **** 	}
  91:../usart_funcs/usart_funcs.c **** 	if((USART1->SR & USART_SR_TC) != 0){/*!<Transmission Complete */
 16517              		.loc 1 91 0
 16518 023c 074B     		ldr	r3, .L25
 16519 023e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16520 0240 9BB2     		uxth	r3, r3
 16521 0242 03F04003 		and	r3, r3, #64
 16522 0246 002B     		cmp	r3, #0
 16523 0248 07D0     		beq	.L20
  92:../usart_funcs/usart_funcs.c **** 		USART1->SR &= ~USART_SR_TC; //Clear flag --^
 16524              		.loc 1 92 0
 16525 024a 044B     		ldr	r3, .L25
 16526 024c 034A     		ldr	r2, .L25
 16527 024e 1288     		ldrh	r2, [r2, #0]	@ movhi
 16528 0250 92B2     		uxth	r2, r2
 16529 0252 22F04002 		bic	r2, r2, #64
 16530 0256 92B2     		uxth	r2, r2
 16531 0258 1A80     		strh	r2, [r3, #0]	@ movhi
 16532              	.L20:
  93:../usart_funcs/usart_funcs.c **** 	}
  94:../usart_funcs/usart_funcs.c **** }
 16533              		.loc 1 94 0
 16534 025a 80BD     		pop	{r7, pc}
 16535              	.L26:
 16536              		.align	2
 16537              	.L25:
 16538 025c 00380140 		.word	1073821696
 16539 0260 00000000 		.word	TXcount
 16540 0264 00000000 		.word	TXhead
 16541 0268 00000000 		.word	TXBuf
 16542              		.cfi_endproc
 16543              	.LFE34:
 16545              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usart_funcs.c
                            *COM*:00000010 RXBuf
     /tmp/ccs3FuHs.s:16055  .bss:00000000 RXtail
     /tmp/ccs3FuHs.s:16056  .bss:00000000 $d
     /tmp/ccs3FuHs.s:16060  .bss:00000001 RXhead
     /tmp/ccs3FuHs.s:16065  .bss:00000002 RXcount
                            *COM*:00000010 TXBuf
     /tmp/ccs3FuHs.s:16071  .bss:00000003 TXtail
     /tmp/ccs3FuHs.s:16076  .bss:00000004 TXhead
     /tmp/ccs3FuHs.s:16081  .bss:00000005 TXcount
     /tmp/ccs3FuHs.s:16084  .text:00000000 $t
     /tmp/ccs3FuHs.s:16089  .text:00000000 FlushBuf
     /tmp/ccs3FuHs.s:16122  .text:00000024 $d
     /tmp/ccs3FuHs.s:16128  .text:00000030 $t
     /tmp/ccs3FuHs.s:16133  .text:00000030 PutChar
     /tmp/ccs3FuHs.s:16195  .text:00000084 $d
     /tmp/ccs3FuHs.s:16202  .text:00000094 $t
     /tmp/ccs3FuHs.s:16207  .text:00000094 GetChar
     /tmp/ccs3FuHs.s:16273  .text:000000ec $d
     /tmp/ccs3FuHs.s:16279  .text:000000f8 $t
     /tmp/ccs3FuHs.s:16284  .text:000000f8 USART_PutChar
     /tmp/ccs3FuHs.s:16373  .text:0000017c $d
     /tmp/ccs3FuHs.s:16380  .text:0000018c $t
     /tmp/ccs3FuHs.s:16385  .text:0000018c SendStr
     /tmp/ccs3FuHs.s:16435  .text:000001bc USART1_IRQHandler
     /tmp/ccs3FuHs.s:16538  .text:0000025c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
