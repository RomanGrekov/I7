   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"usart_funcs.c"
  23              	.Ltext0:
  24              		.file 1 "../usart_funcs/usart_funcs.c"
 16055              	RXtail:
 16056 0000 00       		.space	1
 16057              		.global	RXhead
 16060              	RXhead:
 16061 0001 00       		.space	1
 16062              		.global	RXcount
 16065              	RXcount:
 16066 0002 00       		.space	1
 16067              		.comm	TXBuf,32,4
 16068              		.global	TXtail
 16071              	TXtail:
 16072 0003 00       		.space	1
 16073              		.global	TXhead
 16076              	TXhead:
 16077 0004 00       		.space	1
 16078              		.global	TXcount
 16081              	TXcount:
 16082 0005 00       		.space	1
 16083              		.text
 16084              		.align	2
 16085              		.global	FlushBuf
 16086              		.thumb
 16087              		.thumb_func
 16089              	FlushBuf:
 16090              	.LFB29:
   1:../usart_funcs/usart_funcs.c **** #include "usart_funcs.h"
   2:../usart_funcs/usart_funcs.c **** 
   3:../usart_funcs/usart_funcs.c **** void USART_PutChar(unsigned char sym);
   4:../usart_funcs/usart_funcs.c **** void USART_SendStr(unsigned char * data);
   5:../usart_funcs/usart_funcs.c **** 
   6:../usart_funcs/usart_funcs.c **** //кольцевой (циклический) буфер
   7:../usart_funcs/usart_funcs.c **** unsigned char RXBuf[SIZE_BUF];
   8:../usart_funcs/usart_funcs.c **** unsigned char RXtail = 0;      //"указатель" хвоста буфера
   9:../usart_funcs/usart_funcs.c **** unsigned char RXhead = 0;   //"указатель" головы буфера
  10:../usart_funcs/usart_funcs.c **** unsigned char RXcount = 0;  //счетчик символов
  11:../usart_funcs/usart_funcs.c **** 
  12:../usart_funcs/usart_funcs.c **** unsigned char TXBuf[SIZE_BUF];
  13:../usart_funcs/usart_funcs.c **** unsigned char TXtail = 0;
  14:../usart_funcs/usart_funcs.c **** unsigned char TXhead = 0;
  15:../usart_funcs/usart_funcs.c **** unsigned char TXcount = 0;
  16:../usart_funcs/usart_funcs.c **** 
  17:../usart_funcs/usart_funcs.c **** //"очищает" буфер
  18:../usart_funcs/usart_funcs.c **** void FlushBuf(void)
  19:../usart_funcs/usart_funcs.c **** {
 16091              		.loc 1 19 0
 16092              		.cfi_startproc
 16093              		@ args = 0, pretend = 0, frame = 0
 16094              		@ frame_needed = 1, uses_anonymous_args = 0
 16095              		@ link register save eliminated.
 16096 0000 80B4     		push	{r7}
 16097              	.LCFI0:
 16098              		.cfi_def_cfa_offset 4
 16099 0002 00AF     		add	r7, sp, #0
 16100              		.cfi_offset 7, -4
 16101              	.LCFI1:
 16102              		.cfi_def_cfa_register 7
  20:../usart_funcs/usart_funcs.c ****   RXtail = 0;
 16103              		.loc 1 20 0
 16104 0004 074B     		ldr	r3, .L2
 16105 0006 4FF00002 		mov	r2, #0
 16106 000a 1A70     		strb	r2, [r3, #0]
  21:../usart_funcs/usart_funcs.c ****   RXhead = 0;
 16107              		.loc 1 21 0
 16108 000c 064B     		ldr	r3, .L2+4
 16109 000e 4FF00002 		mov	r2, #0
 16110 0012 1A70     		strb	r2, [r3, #0]
  22:../usart_funcs/usart_funcs.c ****   RXcount = 0;
 16111              		.loc 1 22 0
 16112 0014 054B     		ldr	r3, .L2+8
 16113 0016 4FF00002 		mov	r2, #0
 16114 001a 1A70     		strb	r2, [r3, #0]
  23:../usart_funcs/usart_funcs.c **** }
 16115              		.loc 1 23 0
 16116 001c BD46     		mov	sp, r7
 16117 001e 80BC     		pop	{r7}
 16118 0020 7047     		bx	lr
 16119              	.L3:
 16120 0022 00BF     		.align	2
 16121              	.L2:
 16122 0024 00000000 		.word	RXtail
 16123 0028 00000000 		.word	RXhead
 16124 002c 00000000 		.word	RXcount
 16125              		.cfi_endproc
 16126              	.LFE29:
 16128              		.align	2
 16129              		.global	PutChar
 16130              		.thumb
 16131              		.thumb_func
 16133              	PutChar:
 16134              	.LFB30:
  24:../usart_funcs/usart_funcs.c **** 
  25:../usart_funcs/usart_funcs.c **** //положить символ в буфер
  26:../usart_funcs/usart_funcs.c **** void PutChar(unsigned char sym)
  27:../usart_funcs/usart_funcs.c **** {
 16135              		.loc 1 27 0
 16136              		.cfi_startproc
 16137              		@ args = 0, pretend = 0, frame = 8
 16138              		@ frame_needed = 1, uses_anonymous_args = 0
 16139              		@ link register save eliminated.
 16140 0030 80B4     		push	{r7}
 16141              	.LCFI2:
 16142              		.cfi_def_cfa_offset 4
 16143 0032 83B0     		sub	sp, sp, #12
 16144              	.LCFI3:
 16145              		.cfi_def_cfa_offset 16
 16146 0034 00AF     		add	r7, sp, #0
 16147              		.cfi_offset 7, -4
 16148              	.LCFI4:
 16149              		.cfi_def_cfa_register 7
 16150 0036 0346     		mov	r3, r0
 16151 0038 FB71     		strb	r3, [r7, #7]
  28:../usart_funcs/usart_funcs.c ****   if (RXcount < SIZE_BUF){   //если в буфере еще есть место
 16152              		.loc 1 28 0
 16153 003a 144B     		ldr	r3, .L6
 16154 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16155 003e 1F2B     		cmp	r3, #31
 16156 0040 1ED8     		bhi	.L4
  29:../usart_funcs/usart_funcs.c ****       RXBuf[RXtail] = sym;    //помещаем в него символ
 16157              		.loc 1 29 0
 16158 0042 134B     		ldr	r3, .L6+4
 16159 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16160 0046 134A     		ldr	r2, .L6+8
 16161 0048 F979     		ldrb	r1, [r7, #7]
 16162 004a D154     		strb	r1, [r2, r3]
  30:../usart_funcs/usart_funcs.c ****       RXcount++;                    //инкрементируем счетчик символов
 16163              		.loc 1 30 0
 16164 004c 0F4B     		ldr	r3, .L6
 16165 004e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16166 0050 03F10103 		add	r3, r3, #1
 16167 0054 DAB2     		uxtb	r2, r3
 16168 0056 0D4B     		ldr	r3, .L6
 16169 0058 1A70     		strb	r2, [r3, #0]
  31:../usart_funcs/usart_funcs.c ****       RXtail++;                           //и индекс хвоста буфера
 16170              		.loc 1 31 0
 16171 005a 0D4B     		ldr	r3, .L6+4
 16172 005c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16173 005e 03F10103 		add	r3, r3, #1
 16174 0062 DAB2     		uxtb	r2, r3
 16175 0064 0A4B     		ldr	r3, .L6+4
 16176 0066 1A70     		strb	r2, [r3, #0]
  32:../usart_funcs/usart_funcs.c ****       if (RXtail == SIZE_BUF){
 16177              		.loc 1 32 0
 16178 0068 094B     		ldr	r3, .L6+4
 16179 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16180 006c 202B     		cmp	r3, #32
 16181 006e 07D1     		bne	.L4
  33:../usart_funcs/usart_funcs.c ****     	  RXtail = 0;
 16182              		.loc 1 33 0
 16183 0070 074B     		ldr	r3, .L6+4
 16184 0072 4FF00002 		mov	r2, #0
 16185 0076 1A70     		strb	r2, [r3, #0]
  34:../usart_funcs/usart_funcs.c ****     	  RXcount = 0;
 16186              		.loc 1 34 0
 16187 0078 044B     		ldr	r3, .L6
 16188 007a 4FF00002 		mov	r2, #0
 16189 007e 1A70     		strb	r2, [r3, #0]
 16190              	.L4:
  35:../usart_funcs/usart_funcs.c ****       }
  36:../usart_funcs/usart_funcs.c ****     }
  37:../usart_funcs/usart_funcs.c **** }
 16191              		.loc 1 37 0
 16192 0080 07F10C07 		add	r7, r7, #12
 16193 0084 BD46     		mov	sp, r7
 16194 0086 80BC     		pop	{r7}
 16195 0088 7047     		bx	lr
 16196              	.L7:
 16197 008a 00BF     		.align	2
 16198              	.L6:
 16199 008c 00000000 		.word	RXcount
 16200 0090 00000000 		.word	RXtail
 16201 0094 00000000 		.word	RXBuf
 16202              		.cfi_endproc
 16203              	.LFE30:
 16205              		.align	2
 16206              		.global	GetChar
 16207              		.thumb
 16208              		.thumb_func
 16210              	GetChar:
 16211              	.LFB31:
  38:../usart_funcs/usart_funcs.c **** 
  39:../usart_funcs/usart_funcs.c **** //взять символ из буфера
  40:../usart_funcs/usart_funcs.c **** unsigned char GetChar(void)
  41:../usart_funcs/usart_funcs.c **** {
 16212              		.loc 1 41 0
 16213              		.cfi_startproc
 16214              		@ args = 0, pretend = 0, frame = 8
 16215              		@ frame_needed = 1, uses_anonymous_args = 0
 16216              		@ link register save eliminated.
 16217 0098 80B4     		push	{r7}
 16218              	.LCFI5:
 16219              		.cfi_def_cfa_offset 4
 16220 009a 83B0     		sub	sp, sp, #12
 16221              	.LCFI6:
 16222              		.cfi_def_cfa_offset 16
 16223 009c 00AF     		add	r7, sp, #0
 16224              		.cfi_offset 7, -4
 16225              	.LCFI7:
 16226              		.cfi_def_cfa_register 7
  42:../usart_funcs/usart_funcs.c ****    unsigned char sym = 0;
 16227              		.loc 1 42 0
 16228 009e 4FF00003 		mov	r3, #0
 16229 00a2 FB71     		strb	r3, [r7, #7]
  43:../usart_funcs/usart_funcs.c ****    if (RXcount > 0){                            //если буфер не пустой
 16230              		.loc 1 43 0
 16231 00a4 154B     		ldr	r3, .L11
 16232 00a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16233 00a8 002B     		cmp	r3, #0
 16234 00aa 1BD0     		beq	.L9
  44:../usart_funcs/usart_funcs.c ****       sym = RXBuf[RXhead];              //считываем символ из буфера
 16235              		.loc 1 44 0
 16236 00ac 144B     		ldr	r3, .L11+4
 16237 00ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16238 00b0 144A     		ldr	r2, .L11+8
 16239 00b2 D35C     		ldrb	r3, [r2, r3]
 16240 00b4 FB71     		strb	r3, [r7, #7]
  45:../usart_funcs/usart_funcs.c ****       RXcount--;                                   //уменьшаем счетчик символ
 16241              		.loc 1 45 0
 16242 00b6 114B     		ldr	r3, .L11
 16243 00b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16244 00ba 03F1FF33 		add	r3, r3, #-1
 16245 00be DAB2     		uxtb	r2, r3
 16246 00c0 0E4B     		ldr	r3, .L11
 16247 00c2 1A70     		strb	r2, [r3, #0]
  46:../usart_funcs/usart_funcs.c ****       RXhead++;                                  //инкрементируем индекс гол
 16248              		.loc 1 46 0
 16249 00c4 0E4B     		ldr	r3, .L11+4
 16250 00c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16251 00c8 03F10103 		add	r3, r3, #1
 16252 00cc DAB2     		uxtb	r2, r3
 16253 00ce 0C4B     		ldr	r3, .L11+4
 16254 00d0 1A70     		strb	r2, [r3, #0]
  47:../usart_funcs/usart_funcs.c ****       if (RXhead == SIZE_BUF) RXhead = 0;
 16255              		.loc 1 47 0
 16256 00d2 0B4B     		ldr	r3, .L11+4
 16257 00d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16258 00d6 202B     		cmp	r3, #32
 16259 00d8 08D1     		bne	.L10
 16260              		.loc 1 47 0 is_stmt 0 discriminator 1
 16261 00da 094B     		ldr	r3, .L11+4
 16262 00dc 4FF00002 		mov	r2, #0
 16263 00e0 1A70     		strb	r2, [r3, #0]
 16264 00e2 03E0     		b	.L10
 16265              	.L9:
  48:../usart_funcs/usart_funcs.c ****    }
  49:../usart_funcs/usart_funcs.c ****    else{
  50:../usart_funcs/usart_funcs.c **** 	   RXhead = 0;
 16266              		.loc 1 50 0 is_stmt 1
 16267 00e4 064B     		ldr	r3, .L11+4
 16268 00e6 4FF00002 		mov	r2, #0
 16269 00ea 1A70     		strb	r2, [r3, #0]
 16270              	.L10:
  51:../usart_funcs/usart_funcs.c ****    }
  52:../usart_funcs/usart_funcs.c ****    return sym;
 16271              		.loc 1 52 0
 16272 00ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  53:../usart_funcs/usart_funcs.c **** }
 16273              		.loc 1 53 0
 16274 00ee 1846     		mov	r0, r3
 16275 00f0 07F10C07 		add	r7, r7, #12
 16276 00f4 BD46     		mov	sp, r7
 16277 00f6 80BC     		pop	{r7}
 16278 00f8 7047     		bx	lr
 16279              	.L12:
 16280 00fa 00BF     		.align	2
 16281              	.L11:
 16282 00fc 00000000 		.word	RXcount
 16283 0100 00000000 		.word	RXhead
 16284 0104 00000000 		.word	RXBuf
 16285              		.cfi_endproc
 16286              	.LFE31:
 16288              		.align	2
 16289              		.global	USART_PutChar
 16290              		.thumb
 16291              		.thumb_func
 16293              	USART_PutChar:
 16294              	.LFB32:
  54:../usart_funcs/usart_funcs.c **** 
  55:../usart_funcs/usart_funcs.c **** void USART_PutChar(unsigned char sym)
  56:../usart_funcs/usart_funcs.c **** {
 16295              		.loc 1 56 0
 16296              		.cfi_startproc
 16297              		@ args = 0, pretend = 0, frame = 8
 16298              		@ frame_needed = 1, uses_anonymous_args = 0
 16299              		@ link register save eliminated.
 16300 0108 80B4     		push	{r7}
 16301              	.LCFI8:
 16302              		.cfi_def_cfa_offset 4
 16303 010a 83B0     		sub	sp, sp, #12
 16304              	.LCFI9:
 16305              		.cfi_def_cfa_offset 16
 16306 010c 00AF     		add	r7, sp, #0
 16307              		.cfi_offset 7, -4
 16308              	.LCFI10:
 16309              		.cfi_def_cfa_register 7
 16310 010e 0346     		mov	r3, r0
 16311 0110 FB71     		strb	r3, [r7, #7]
  57:../usart_funcs/usart_funcs.c ****   if((USART1->SR & USART_SR_TC) && (TXcount == 0)){
 16312              		.loc 1 57 0
 16313 0112 1E4B     		ldr	r3, .L16
 16314 0114 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16315 0116 9BB2     		uxth	r3, r3
 16316 0118 03F04003 		and	r3, r3, #64
 16317 011c 002B     		cmp	r3, #0
 16318 011e 08D0     		beq	.L14
 16319              		.loc 1 57 0 is_stmt 0 discriminator 1
 16320 0120 1B4B     		ldr	r3, .L16+4
 16321 0122 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16322 0124 002B     		cmp	r3, #0
 16323 0126 04D1     		bne	.L14
  58:../usart_funcs/usart_funcs.c **** 	  USART1->DR = sym;
 16324              		.loc 1 58 0 is_stmt 1
 16325 0128 184B     		ldr	r3, .L16
 16326 012a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 16327 012c 92B2     		uxth	r2, r2
 16328 012e 9A80     		strh	r2, [r3, #4]	@ movhi
 16329 0130 26E0     		b	.L13
 16330              	.L14:
  59:../usart_funcs/usart_funcs.c ****   }
  60:../usart_funcs/usart_funcs.c ****   else {
  61:../usart_funcs/usart_funcs.c **** 	USART1->CR1 |= USART_CR1_TXEIE;/*!<PE Interrupt enable */
 16331              		.loc 1 61 0
 16332 0132 164B     		ldr	r3, .L16
 16333 0134 154A     		ldr	r2, .L16
 16334 0136 9289     		ldrh	r2, [r2, #12]	@ movhi
 16335 0138 92B2     		uxth	r2, r2
 16336 013a 42F08002 		orr	r2, r2, #128
 16337 013e 92B2     		uxth	r2, r2
 16338 0140 9A81     		strh	r2, [r3, #12]	@ movhi
  62:../usart_funcs/usart_funcs.c ****     if (TXcount < SIZE_BUF){                    //если в буфере еще есть мест
 16339              		.loc 1 62 0
 16340 0142 134B     		ldr	r3, .L16+4
 16341 0144 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16342 0146 1F2B     		cmp	r3, #31
 16343 0148 1AD8     		bhi	.L13
  63:../usart_funcs/usart_funcs.c ****       TXBuf[TXtail] = sym;             //помещаем в него символ
 16344              		.loc 1 63 0
 16345 014a 124B     		ldr	r3, .L16+8
 16346 014c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16347 014e 124A     		ldr	r2, .L16+12
 16348 0150 F979     		ldrb	r1, [r7, #7]
 16349 0152 D154     		strb	r1, [r2, r3]
  64:../usart_funcs/usart_funcs.c ****       TXcount++;                                     //инкрементируем счетчик 
 16350              		.loc 1 64 0
 16351 0154 0E4B     		ldr	r3, .L16+4
 16352 0156 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16353 0158 03F10103 		add	r3, r3, #1
 16354 015c DAB2     		uxtb	r2, r3
 16355 015e 0C4B     		ldr	r3, .L16+4
 16356 0160 1A70     		strb	r2, [r3, #0]
  65:../usart_funcs/usart_funcs.c ****       TXtail++;                                    //и индекс хвоста буфера
 16357              		.loc 1 65 0
 16358 0162 0C4B     		ldr	r3, .L16+8
 16359 0164 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16360 0166 03F10103 		add	r3, r3, #1
 16361 016a DAB2     		uxtb	r2, r3
 16362 016c 094B     		ldr	r3, .L16+8
 16363 016e 1A70     		strb	r2, [r3, #0]
  66:../usart_funcs/usart_funcs.c ****       if (TXtail == SIZE_BUF) TXtail = 0;
 16364              		.loc 1 66 0
 16365 0170 084B     		ldr	r3, .L16+8
 16366 0172 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16367 0174 202B     		cmp	r3, #32
 16368 0176 03D1     		bne	.L13
 16369              		.loc 1 66 0 is_stmt 0 discriminator 1
 16370 0178 064B     		ldr	r3, .L16+8
 16371 017a 4FF00002 		mov	r2, #0
 16372 017e 1A70     		strb	r2, [r3, #0]
 16373              	.L13:
  67:../usart_funcs/usart_funcs.c ****     }
  68:../usart_funcs/usart_funcs.c ****   }
  69:../usart_funcs/usart_funcs.c **** }
 16374              		.loc 1 69 0 is_stmt 1
 16375 0180 07F10C07 		add	r7, r7, #12
 16376 0184 BD46     		mov	sp, r7
 16377 0186 80BC     		pop	{r7}
 16378 0188 7047     		bx	lr
 16379              	.L17:
 16380 018a 00BF     		.align	2
 16381              	.L16:
 16382 018c 00380140 		.word	1073821696
 16383 0190 00000000 		.word	TXcount
 16384 0194 00000000 		.word	TXtail
 16385 0198 00000000 		.word	TXBuf
 16386              		.cfi_endproc
 16387              	.LFE32:
 16389              		.align	2
 16390              		.global	SendStr
 16391              		.thumb
 16392              		.thumb_func
 16394              	SendStr:
 16395              	.LFB33:
  70:../usart_funcs/usart_funcs.c **** 
  71:../usart_funcs/usart_funcs.c **** void SendStr(unsigned char * data)
  72:../usart_funcs/usart_funcs.c **** {
 16396              		.loc 1 72 0
 16397              		.cfi_startproc
 16398              		@ args = 0, pretend = 0, frame = 16
 16399              		@ frame_needed = 1, uses_anonymous_args = 0
 16400 019c 80B5     		push	{r7, lr}
 16401              	.LCFI11:
 16402              		.cfi_def_cfa_offset 8
 16403 019e 84B0     		sub	sp, sp, #16
 16404              	.LCFI12:
 16405              		.cfi_def_cfa_offset 24
 16406 01a0 00AF     		add	r7, sp, #0
 16407              		.cfi_offset 14, -4
 16408              		.cfi_offset 7, -8
 16409              	.LCFI13:
 16410              		.cfi_def_cfa_register 7
 16411 01a2 7860     		str	r0, [r7, #4]
  73:../usart_funcs/usart_funcs.c ****   unsigned char sym;
  74:../usart_funcs/usart_funcs.c ****   while(*data){
 16412              		.loc 1 74 0
 16413 01a4 0AE0     		b	.L19
 16414              	.L20:
  75:../usart_funcs/usart_funcs.c ****     sym = *data++;
 16415              		.loc 1 75 0
 16416 01a6 7B68     		ldr	r3, [r7, #4]
 16417 01a8 1B78     		ldrb	r3, [r3, #0]
 16418 01aa FB73     		strb	r3, [r7, #15]
 16419 01ac 7B68     		ldr	r3, [r7, #4]
 16420 01ae 03F10103 		add	r3, r3, #1
 16421 01b2 7B60     		str	r3, [r7, #4]
  76:../usart_funcs/usart_funcs.c ****     USART_PutChar(sym);
 16422              		.loc 1 76 0
 16423 01b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 16424 01b6 1846     		mov	r0, r3
 16425 01b8 FFF7FEFF 		bl	USART_PutChar
 16426              	.L19:
  74:../usart_funcs/usart_funcs.c ****   while(*data){
 16427              		.loc 1 74 0 discriminator 1
 16428 01bc 7B68     		ldr	r3, [r7, #4]
 16429 01be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16430 01c0 002B     		cmp	r3, #0
 16431 01c2 F0D1     		bne	.L20
  77:../usart_funcs/usart_funcs.c ****   }
  78:../usart_funcs/usart_funcs.c **** }
 16432              		.loc 1 78 0
 16433 01c4 07F11007 		add	r7, r7, #16
 16434 01c8 BD46     		mov	sp, r7
 16435 01ca 80BD     		pop	{r7, pc}
 16436              		.cfi_endproc
 16437              	.LFE33:
 16439              		.align	2
 16440              		.global	USART1_IRQHandler
 16441              		.thumb
 16442              		.thumb_func
 16444              	USART1_IRQHandler:
 16445              	.LFB34:
  79:../usart_funcs/usart_funcs.c **** 
  80:../usart_funcs/usart_funcs.c **** void USART1_IRQHandler(void){
 16446              		.loc 1 80 0
 16447              		.cfi_startproc
 16448              		@ args = 0, pretend = 0, frame = 0
 16449              		@ frame_needed = 1, uses_anonymous_args = 0
 16450 01cc 80B5     		push	{r7, lr}
 16451              	.LCFI14:
 16452              		.cfi_def_cfa_offset 8
 16453 01ce 00AF     		add	r7, sp, #0
 16454              		.cfi_offset 14, -4
 16455              		.cfi_offset 7, -8
 16456              	.LCFI15:
 16457              		.cfi_def_cfa_register 7
  81:../usart_funcs/usart_funcs.c **** 
  82:../usart_funcs/usart_funcs.c **** 	if(USART1->SR & USART_SR_RXNE){/*!<Read Data Register Not Empty */
 16458              		.loc 1 82 0
 16459 01d0 264B     		ldr	r3, .L26
 16460 01d2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16461 01d4 9BB2     		uxth	r3, r3
 16462 01d6 03F02003 		and	r3, r3, #32
 16463 01da 002B     		cmp	r3, #0
 16464 01dc 06D0     		beq	.L22
  83:../usart_funcs/usart_funcs.c **** 		PutChar(USART1->DR);
 16465              		.loc 1 83 0
 16466 01de 234B     		ldr	r3, .L26
 16467 01e0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 16468 01e2 9BB2     		uxth	r3, r3
 16469 01e4 DBB2     		uxtb	r3, r3
 16470 01e6 1846     		mov	r0, r3
 16471 01e8 FFF7FEFF 		bl	PutChar
 16472              	.L22:
  84:../usart_funcs/usart_funcs.c **** 	}
  85:../usart_funcs/usart_funcs.c **** 
  86:../usart_funcs/usart_funcs.c **** 	if((USART1->SR & USART_SR_TXE)!=0){// If Transmit Data Register Empty
 16473              		.loc 1 86 0
 16474 01ec 1F4B     		ldr	r3, .L26
 16475 01ee 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16476 01f0 9BB2     		uxth	r3, r3
 16477 01f2 03F08003 		and	r3, r3, #128
 16478 01f6 002B     		cmp	r3, #0
 16479 01f8 28D0     		beq	.L23
  87:../usart_funcs/usart_funcs.c **** 		 if (TXcount > 0){                       //если буфер не пустой
 16480              		.loc 1 87 0
 16481 01fa 1D4B     		ldr	r3, .L26+4
 16482 01fc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16483 01fe 002B     		cmp	r3, #0
 16484 0200 1CD0     		beq	.L24
  88:../usart_funcs/usart_funcs.c **** 		    USART1->DR = TXBuf[TXhead];  //записываем в DR символ из буфера
 16485              		.loc 1 88 0
 16486 0202 1A4B     		ldr	r3, .L26
 16487 0204 1B4A     		ldr	r2, .L26+8
 16488 0206 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 16489 0208 1B49     		ldr	r1, .L26+12
 16490 020a 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 16491 020c 9A80     		strh	r2, [r3, #4]	@ movhi
  89:../usart_funcs/usart_funcs.c **** 		    TXcount--;                           //уменьшаем счетчик символов
 16492              		.loc 1 89 0
 16493 020e 184B     		ldr	r3, .L26+4
 16494 0210 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16495 0212 03F1FF33 		add	r3, r3, #-1
 16496 0216 DAB2     		uxtb	r2, r3
 16497 0218 154B     		ldr	r3, .L26+4
 16498 021a 1A70     		strb	r2, [r3, #0]
  90:../usart_funcs/usart_funcs.c **** 		    TXhead++;                         //инкрементируем индекс головы б
 16499              		.loc 1 90 0
 16500 021c 154B     		ldr	r3, .L26+8
 16501 021e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16502 0220 03F10103 		add	r3, r3, #1
 16503 0224 DAB2     		uxtb	r2, r3
 16504 0226 134B     		ldr	r3, .L26+8
 16505 0228 1A70     		strb	r2, [r3, #0]
  91:../usart_funcs/usart_funcs.c **** 		    if (TXhead == SIZE_BUF) TXhead = 0;
 16506              		.loc 1 91 0
 16507 022a 124B     		ldr	r3, .L26+8
 16508 022c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 16509 022e 202B     		cmp	r3, #32
 16510 0230 0CD1     		bne	.L23
 16511              		.loc 1 91 0 is_stmt 0 discriminator 1
 16512 0232 104B     		ldr	r3, .L26+8
 16513 0234 4FF00002 		mov	r2, #0
 16514 0238 1A70     		strb	r2, [r3, #0]
 16515 023a 07E0     		b	.L23
 16516              	.L24:
  92:../usart_funcs/usart_funcs.c **** 		  }
  93:../usart_funcs/usart_funcs.c **** 		 else{
  94:../usart_funcs/usart_funcs.c **** 			 USART1->CR1 &= ~USART_CR1_TXEIE;/*!<PE Interrupt Disable */
 16517              		.loc 1 94 0 is_stmt 1
 16518 023c 0B4B     		ldr	r3, .L26
 16519 023e 0B4A     		ldr	r2, .L26
 16520 0240 9289     		ldrh	r2, [r2, #12]	@ movhi
 16521 0242 92B2     		uxth	r2, r2
 16522 0244 22F08002 		bic	r2, r2, #128
 16523 0248 92B2     		uxth	r2, r2
 16524 024a 9A81     		strh	r2, [r3, #12]	@ movhi
 16525              	.L23:
  95:../usart_funcs/usart_funcs.c **** 		 }
  96:../usart_funcs/usart_funcs.c **** 	}
  97:../usart_funcs/usart_funcs.c **** 	if((USART1->SR & USART_SR_TC) != 0){/*!<Transmission Complete */
 16526              		.loc 1 97 0
 16527 024c 074B     		ldr	r3, .L26
 16528 024e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 16529 0250 9BB2     		uxth	r3, r3
 16530 0252 03F04003 		and	r3, r3, #64
 16531 0256 002B     		cmp	r3, #0
 16532 0258 07D0     		beq	.L21
  98:../usart_funcs/usart_funcs.c **** 		USART1->SR &= ~USART_SR_TC; //Clear flag --^
 16533              		.loc 1 98 0
 16534 025a 044B     		ldr	r3, .L26
 16535 025c 034A     		ldr	r2, .L26
 16536 025e 1288     		ldrh	r2, [r2, #0]	@ movhi
 16537 0260 92B2     		uxth	r2, r2
 16538 0262 22F04002 		bic	r2, r2, #64
 16539 0266 92B2     		uxth	r2, r2
 16540 0268 1A80     		strh	r2, [r3, #0]	@ movhi
 16541              	.L21:
  99:../usart_funcs/usart_funcs.c **** 	}
 100:../usart_funcs/usart_funcs.c **** }
 16542              		.loc 1 100 0
 16543 026a 80BD     		pop	{r7, pc}
 16544              	.L27:
 16545              		.align	2
 16546              	.L26:
 16547 026c 00380140 		.word	1073821696
 16548 0270 00000000 		.word	TXcount
 16549 0274 00000000 		.word	TXhead
 16550 0278 00000000 		.word	TXBuf
 16551              		.cfi_endproc
 16552              	.LFE34:
 16554              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usart_funcs.c
                            *COM*:00000020 RXBuf
     /tmp/cc6yNUOk.s:16055  .bss:00000000 RXtail
     /tmp/cc6yNUOk.s:16056  .bss:00000000 $d
     /tmp/cc6yNUOk.s:16060  .bss:00000001 RXhead
     /tmp/cc6yNUOk.s:16065  .bss:00000002 RXcount
                            *COM*:00000020 TXBuf
     /tmp/cc6yNUOk.s:16071  .bss:00000003 TXtail
     /tmp/cc6yNUOk.s:16076  .bss:00000004 TXhead
     /tmp/cc6yNUOk.s:16081  .bss:00000005 TXcount
     /tmp/cc6yNUOk.s:16084  .text:00000000 $t
     /tmp/cc6yNUOk.s:16089  .text:00000000 FlushBuf
     /tmp/cc6yNUOk.s:16122  .text:00000024 $d
     /tmp/cc6yNUOk.s:16128  .text:00000030 $t
     /tmp/cc6yNUOk.s:16133  .text:00000030 PutChar
     /tmp/cc6yNUOk.s:16199  .text:0000008c $d
     /tmp/cc6yNUOk.s:16205  .text:00000098 $t
     /tmp/cc6yNUOk.s:16210  .text:00000098 GetChar
     /tmp/cc6yNUOk.s:16282  .text:000000fc $d
     /tmp/cc6yNUOk.s:16288  .text:00000108 $t
     /tmp/cc6yNUOk.s:16293  .text:00000108 USART_PutChar
     /tmp/cc6yNUOk.s:16382  .text:0000018c $d
     /tmp/cc6yNUOk.s:16389  .text:0000019c $t
     /tmp/cc6yNUOk.s:16394  .text:0000019c SendStr
     /tmp/cc6yNUOk.s:16444  .text:000001cc USART1_IRQHandler
     /tmp/cc6yNUOk.s:16547  .text:0000026c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
