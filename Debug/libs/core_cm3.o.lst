   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"core_cm3.c"
  23              	.Ltext0:
  24              		.file 1 "../libs/core_cm3.c"
 1241              		.align	2
 1242              		.global	__get_PSP
 1243              		.thumb
 1244              		.thumb_func
 1246              	__get_PSP:
 1247              	.LFB0:
   1:../libs/core_cm3.c **** /**************************************************************************//**
   2:../libs/core_cm3.c ****  * @file     core_cm3.c
   3:../libs/core_cm3.c ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File
   4:../libs/core_cm3.c ****  * @version  V1.30
   5:../libs/core_cm3.c ****  * @date     30. October 2009
   6:../libs/core_cm3.c ****  *
   7:../libs/core_cm3.c ****  * @note
   8:../libs/core_cm3.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:../libs/core_cm3.c ****  *
  10:../libs/core_cm3.c ****  * @par
  11:../libs/core_cm3.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../libs/core_cm3.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../libs/core_cm3.c ****  * within development tools that are supporting such ARM based processors. 
  14:../libs/core_cm3.c ****  *
  15:../libs/core_cm3.c ****  * @par
  16:../libs/core_cm3.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../libs/core_cm3.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../libs/core_cm3.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../libs/core_cm3.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../libs/core_cm3.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../libs/core_cm3.c ****  *
  22:../libs/core_cm3.c ****  ******************************************************************************/
  23:../libs/core_cm3.c **** 
  24:../libs/core_cm3.c **** #include <stdint.h>
  25:../libs/core_cm3.c **** 
  26:../libs/core_cm3.c **** /* define compiler specific symbols */
  27:../libs/core_cm3.c **** #if defined ( __CC_ARM   )
  28:../libs/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:../libs/core_cm3.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:../libs/core_cm3.c **** 
  31:../libs/core_cm3.c **** #elif defined ( __ICCARM__ )
  32:../libs/core_cm3.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  33:../libs/core_cm3.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:../libs/core_cm3.c **** 
  35:../libs/core_cm3.c **** #elif defined   (  __GNUC__  )
  36:../libs/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:../libs/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:../libs/core_cm3.c **** 
  39:../libs/core_cm3.c **** #elif defined   (  __TASKING__  )
  40:../libs/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:../libs/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:../libs/core_cm3.c **** 
  43:../libs/core_cm3.c **** #endif
  44:../libs/core_cm3.c **** 
  45:../libs/core_cm3.c **** 
  46:../libs/core_cm3.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:../libs/core_cm3.c **** 
  48:../libs/core_cm3.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:../libs/core_cm3.c **** /* ARM armcc specific functions */
  50:../libs/core_cm3.c **** 
  51:../libs/core_cm3.c **** /**
  52:../libs/core_cm3.c ****  * @brief  Return the Process Stack Pointer
  53:../libs/core_cm3.c ****  *
  54:../libs/core_cm3.c ****  * @return ProcessStackPointer
  55:../libs/core_cm3.c ****  *
  56:../libs/core_cm3.c ****  * Return the actual process stack pointer
  57:../libs/core_cm3.c ****  */
  58:../libs/core_cm3.c **** __ASM uint32_t __get_PSP(void)
  59:../libs/core_cm3.c **** {
  60:../libs/core_cm3.c ****   mrs r0, psp
  61:../libs/core_cm3.c ****   bx lr
  62:../libs/core_cm3.c **** }
  63:../libs/core_cm3.c **** 
  64:../libs/core_cm3.c **** /**
  65:../libs/core_cm3.c ****  * @brief  Set the Process Stack Pointer
  66:../libs/core_cm3.c ****  *
  67:../libs/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:../libs/core_cm3.c ****  *
  69:../libs/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:../libs/core_cm3.c ****  * (process stack pointer) Cortex processor register
  71:../libs/core_cm3.c ****  */
  72:../libs/core_cm3.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:../libs/core_cm3.c **** {
  74:../libs/core_cm3.c ****   msr psp, r0
  75:../libs/core_cm3.c ****   bx lr
  76:../libs/core_cm3.c **** }
  77:../libs/core_cm3.c **** 
  78:../libs/core_cm3.c **** /**
  79:../libs/core_cm3.c ****  * @brief  Return the Main Stack Pointer
  80:../libs/core_cm3.c ****  *
  81:../libs/core_cm3.c ****  * @return Main Stack Pointer
  82:../libs/core_cm3.c ****  *
  83:../libs/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
  84:../libs/core_cm3.c ****  * Cortex processor register
  85:../libs/core_cm3.c ****  */
  86:../libs/core_cm3.c **** __ASM uint32_t __get_MSP(void)
  87:../libs/core_cm3.c **** {
  88:../libs/core_cm3.c ****   mrs r0, msp
  89:../libs/core_cm3.c ****   bx lr
  90:../libs/core_cm3.c **** }
  91:../libs/core_cm3.c **** 
  92:../libs/core_cm3.c **** /**
  93:../libs/core_cm3.c ****  * @brief  Set the Main Stack Pointer
  94:../libs/core_cm3.c ****  *
  95:../libs/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:../libs/core_cm3.c ****  *
  97:../libs/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
  98:../libs/core_cm3.c ****  * (main stack pointer) Cortex processor register
  99:../libs/core_cm3.c ****  */
 100:../libs/core_cm3.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:../libs/core_cm3.c **** {
 102:../libs/core_cm3.c ****   msr msp, r0
 103:../libs/core_cm3.c ****   bx lr
 104:../libs/core_cm3.c **** }
 105:../libs/core_cm3.c **** 
 106:../libs/core_cm3.c **** /**
 107:../libs/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 108:../libs/core_cm3.c ****  *
 109:../libs/core_cm3.c ****  * @param   value  value to reverse
 110:../libs/core_cm3.c ****  * @return         reversed value
 111:../libs/core_cm3.c ****  *
 112:../libs/core_cm3.c ****  * Reverse byte order in unsigned short value
 113:../libs/core_cm3.c ****  */
 114:../libs/core_cm3.c **** __ASM uint32_t __REV16(uint16_t value)
 115:../libs/core_cm3.c **** {
 116:../libs/core_cm3.c ****   rev16 r0, r0
 117:../libs/core_cm3.c ****   bx lr
 118:../libs/core_cm3.c **** }
 119:../libs/core_cm3.c **** 
 120:../libs/core_cm3.c **** /**
 121:../libs/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:../libs/core_cm3.c ****  *
 123:../libs/core_cm3.c ****  * @param   value  value to reverse
 124:../libs/core_cm3.c ****  * @return         reversed value
 125:../libs/core_cm3.c ****  *
 126:../libs/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:../libs/core_cm3.c ****  */
 128:../libs/core_cm3.c **** __ASM int32_t __REVSH(int16_t value)
 129:../libs/core_cm3.c **** {
 130:../libs/core_cm3.c ****   revsh r0, r0
 131:../libs/core_cm3.c ****   bx lr
 132:../libs/core_cm3.c **** }
 133:../libs/core_cm3.c **** 
 134:../libs/core_cm3.c **** 
 135:../libs/core_cm3.c **** #if (__ARMCC_VERSION < 400000)
 136:../libs/core_cm3.c **** 
 137:../libs/core_cm3.c **** /**
 138:../libs/core_cm3.c ****  * @brief  Remove the exclusive lock created by ldrex
 139:../libs/core_cm3.c ****  *
 140:../libs/core_cm3.c ****  * Removes the exclusive lock which is created by ldrex.
 141:../libs/core_cm3.c ****  */
 142:../libs/core_cm3.c **** __ASM void __CLREX(void)
 143:../libs/core_cm3.c **** {
 144:../libs/core_cm3.c ****   clrex
 145:../libs/core_cm3.c **** }
 146:../libs/core_cm3.c **** 
 147:../libs/core_cm3.c **** /**
 148:../libs/core_cm3.c ****  * @brief  Return the Base Priority value
 149:../libs/core_cm3.c ****  *
 150:../libs/core_cm3.c ****  * @return BasePriority
 151:../libs/core_cm3.c ****  *
 152:../libs/core_cm3.c ****  * Return the content of the base priority register
 153:../libs/core_cm3.c ****  */
 154:../libs/core_cm3.c **** __ASM uint32_t  __get_BASEPRI(void)
 155:../libs/core_cm3.c **** {
 156:../libs/core_cm3.c ****   mrs r0, basepri
 157:../libs/core_cm3.c ****   bx lr
 158:../libs/core_cm3.c **** }
 159:../libs/core_cm3.c **** 
 160:../libs/core_cm3.c **** /**
 161:../libs/core_cm3.c ****  * @brief  Set the Base Priority value
 162:../libs/core_cm3.c ****  *
 163:../libs/core_cm3.c ****  * @param  basePri  BasePriority
 164:../libs/core_cm3.c ****  *
 165:../libs/core_cm3.c ****  * Set the base priority register
 166:../libs/core_cm3.c ****  */
 167:../libs/core_cm3.c **** __ASM void __set_BASEPRI(uint32_t basePri)
 168:../libs/core_cm3.c **** {
 169:../libs/core_cm3.c ****   msr basepri, r0
 170:../libs/core_cm3.c ****   bx lr
 171:../libs/core_cm3.c **** }
 172:../libs/core_cm3.c **** 
 173:../libs/core_cm3.c **** /**
 174:../libs/core_cm3.c ****  * @brief  Return the Priority Mask value
 175:../libs/core_cm3.c ****  *
 176:../libs/core_cm3.c ****  * @return PriMask
 177:../libs/core_cm3.c ****  *
 178:../libs/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 179:../libs/core_cm3.c ****  */
 180:../libs/core_cm3.c **** __ASM uint32_t __get_PRIMASK(void)
 181:../libs/core_cm3.c **** {
 182:../libs/core_cm3.c ****   mrs r0, primask
 183:../libs/core_cm3.c ****   bx lr
 184:../libs/core_cm3.c **** }
 185:../libs/core_cm3.c **** 
 186:../libs/core_cm3.c **** /**
 187:../libs/core_cm3.c ****  * @brief  Set the Priority Mask value
 188:../libs/core_cm3.c ****  *
 189:../libs/core_cm3.c ****  * @param  priMask  PriMask
 190:../libs/core_cm3.c ****  *
 191:../libs/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 192:../libs/core_cm3.c ****  */
 193:../libs/core_cm3.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 194:../libs/core_cm3.c **** {
 195:../libs/core_cm3.c ****   msr primask, r0
 196:../libs/core_cm3.c ****   bx lr
 197:../libs/core_cm3.c **** }
 198:../libs/core_cm3.c **** 
 199:../libs/core_cm3.c **** /**
 200:../libs/core_cm3.c ****  * @brief  Return the Fault Mask value
 201:../libs/core_cm3.c ****  *
 202:../libs/core_cm3.c ****  * @return FaultMask
 203:../libs/core_cm3.c ****  *
 204:../libs/core_cm3.c ****  * Return the content of the fault mask register
 205:../libs/core_cm3.c ****  */
 206:../libs/core_cm3.c **** __ASM uint32_t  __get_FAULTMASK(void)
 207:../libs/core_cm3.c **** {
 208:../libs/core_cm3.c ****   mrs r0, faultmask
 209:../libs/core_cm3.c ****   bx lr
 210:../libs/core_cm3.c **** }
 211:../libs/core_cm3.c **** 
 212:../libs/core_cm3.c **** /**
 213:../libs/core_cm3.c ****  * @brief  Set the Fault Mask value
 214:../libs/core_cm3.c ****  *
 215:../libs/core_cm3.c ****  * @param  faultMask  faultMask value
 216:../libs/core_cm3.c ****  *
 217:../libs/core_cm3.c ****  * Set the fault mask register
 218:../libs/core_cm3.c ****  */
 219:../libs/core_cm3.c **** __ASM void __set_FAULTMASK(uint32_t faultMask)
 220:../libs/core_cm3.c **** {
 221:../libs/core_cm3.c ****   msr faultmask, r0
 222:../libs/core_cm3.c ****   bx lr
 223:../libs/core_cm3.c **** }
 224:../libs/core_cm3.c **** 
 225:../libs/core_cm3.c **** /**
 226:../libs/core_cm3.c ****  * @brief  Return the Control Register value
 227:../libs/core_cm3.c ****  * 
 228:../libs/core_cm3.c ****  * @return Control value
 229:../libs/core_cm3.c ****  *
 230:../libs/core_cm3.c ****  * Return the content of the control register
 231:../libs/core_cm3.c ****  */
 232:../libs/core_cm3.c **** __ASM uint32_t __get_CONTROL(void)
 233:../libs/core_cm3.c **** {
 234:../libs/core_cm3.c ****   mrs r0, control
 235:../libs/core_cm3.c ****   bx lr
 236:../libs/core_cm3.c **** }
 237:../libs/core_cm3.c **** 
 238:../libs/core_cm3.c **** /**
 239:../libs/core_cm3.c ****  * @brief  Set the Control Register value
 240:../libs/core_cm3.c ****  *
 241:../libs/core_cm3.c ****  * @param  control  Control value
 242:../libs/core_cm3.c ****  *
 243:../libs/core_cm3.c ****  * Set the control register
 244:../libs/core_cm3.c ****  */
 245:../libs/core_cm3.c **** __ASM void __set_CONTROL(uint32_t control)
 246:../libs/core_cm3.c **** {
 247:../libs/core_cm3.c ****   msr control, r0
 248:../libs/core_cm3.c ****   bx lr
 249:../libs/core_cm3.c **** }
 250:../libs/core_cm3.c **** 
 251:../libs/core_cm3.c **** #endif /* __ARMCC_VERSION  */ 
 252:../libs/core_cm3.c **** 
 253:../libs/core_cm3.c **** 
 254:../libs/core_cm3.c **** 
 255:../libs/core_cm3.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 256:../libs/core_cm3.c **** /* IAR iccarm specific functions */
 257:../libs/core_cm3.c **** #pragma diag_suppress=Pe940
 258:../libs/core_cm3.c **** 
 259:../libs/core_cm3.c **** /**
 260:../libs/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 261:../libs/core_cm3.c ****  *
 262:../libs/core_cm3.c ****  * @return ProcessStackPointer
 263:../libs/core_cm3.c ****  *
 264:../libs/core_cm3.c ****  * Return the actual process stack pointer
 265:../libs/core_cm3.c ****  */
 266:../libs/core_cm3.c **** uint32_t __get_PSP(void)
 267:../libs/core_cm3.c **** {
 268:../libs/core_cm3.c ****   __ASM("mrs r0, psp");
 269:../libs/core_cm3.c ****   __ASM("bx lr");
 270:../libs/core_cm3.c **** }
 271:../libs/core_cm3.c **** 
 272:../libs/core_cm3.c **** /**
 273:../libs/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 274:../libs/core_cm3.c ****  *
 275:../libs/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 276:../libs/core_cm3.c ****  *
 277:../libs/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 278:../libs/core_cm3.c ****  * (process stack pointer) Cortex processor register
 279:../libs/core_cm3.c ****  */
 280:../libs/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 281:../libs/core_cm3.c **** {
 282:../libs/core_cm3.c ****   __ASM("msr psp, r0");
 283:../libs/core_cm3.c ****   __ASM("bx lr");
 284:../libs/core_cm3.c **** }
 285:../libs/core_cm3.c **** 
 286:../libs/core_cm3.c **** /**
 287:../libs/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 288:../libs/core_cm3.c ****  *
 289:../libs/core_cm3.c ****  * @return Main Stack Pointer
 290:../libs/core_cm3.c ****  *
 291:../libs/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 292:../libs/core_cm3.c ****  * Cortex processor register
 293:../libs/core_cm3.c ****  */
 294:../libs/core_cm3.c **** uint32_t __get_MSP(void)
 295:../libs/core_cm3.c **** {
 296:../libs/core_cm3.c ****   __ASM("mrs r0, msp");
 297:../libs/core_cm3.c ****   __ASM("bx lr");
 298:../libs/core_cm3.c **** }
 299:../libs/core_cm3.c **** 
 300:../libs/core_cm3.c **** /**
 301:../libs/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 302:../libs/core_cm3.c ****  *
 303:../libs/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 304:../libs/core_cm3.c ****  *
 305:../libs/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 306:../libs/core_cm3.c ****  * (main stack pointer) Cortex processor register
 307:../libs/core_cm3.c ****  */
 308:../libs/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 309:../libs/core_cm3.c **** {
 310:../libs/core_cm3.c ****   __ASM("msr msp, r0");
 311:../libs/core_cm3.c ****   __ASM("bx lr");
 312:../libs/core_cm3.c **** }
 313:../libs/core_cm3.c **** 
 314:../libs/core_cm3.c **** /**
 315:../libs/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 316:../libs/core_cm3.c ****  *
 317:../libs/core_cm3.c ****  * @param  value  value to reverse
 318:../libs/core_cm3.c ****  * @return        reversed value
 319:../libs/core_cm3.c ****  *
 320:../libs/core_cm3.c ****  * Reverse byte order in unsigned short value
 321:../libs/core_cm3.c ****  */
 322:../libs/core_cm3.c **** uint32_t __REV16(uint16_t value)
 323:../libs/core_cm3.c **** {
 324:../libs/core_cm3.c ****   __ASM("rev16 r0, r0");
 325:../libs/core_cm3.c ****   __ASM("bx lr");
 326:../libs/core_cm3.c **** }
 327:../libs/core_cm3.c **** 
 328:../libs/core_cm3.c **** /**
 329:../libs/core_cm3.c ****  * @brief  Reverse bit order of value
 330:../libs/core_cm3.c ****  *
 331:../libs/core_cm3.c ****  * @param  value  value to reverse
 332:../libs/core_cm3.c ****  * @return        reversed value
 333:../libs/core_cm3.c ****  *
 334:../libs/core_cm3.c ****  * Reverse bit order of value
 335:../libs/core_cm3.c ****  */
 336:../libs/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 337:../libs/core_cm3.c **** {
 338:../libs/core_cm3.c ****   __ASM("rbit r0, r0");
 339:../libs/core_cm3.c ****   __ASM("bx lr");
 340:../libs/core_cm3.c **** }
 341:../libs/core_cm3.c **** 
 342:../libs/core_cm3.c **** /**
 343:../libs/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 344:../libs/core_cm3.c ****  *
 345:../libs/core_cm3.c ****  * @param  *addr  address pointer
 346:../libs/core_cm3.c ****  * @return        value of (*address)
 347:../libs/core_cm3.c ****  *
 348:../libs/core_cm3.c ****  * Exclusive LDR command for 8 bit values)
 349:../libs/core_cm3.c ****  */
 350:../libs/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 351:../libs/core_cm3.c **** {
 352:../libs/core_cm3.c ****   __ASM("ldrexb r0, [r0]");
 353:../libs/core_cm3.c ****   __ASM("bx lr"); 
 354:../libs/core_cm3.c **** }
 355:../libs/core_cm3.c **** 
 356:../libs/core_cm3.c **** /**
 357:../libs/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 358:../libs/core_cm3.c ****  *
 359:../libs/core_cm3.c ****  * @param  *addr  address pointer
 360:../libs/core_cm3.c ****  * @return        value of (*address)
 361:../libs/core_cm3.c ****  *
 362:../libs/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 363:../libs/core_cm3.c ****  */
 364:../libs/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 365:../libs/core_cm3.c **** {
 366:../libs/core_cm3.c ****   __ASM("ldrexh r0, [r0]");
 367:../libs/core_cm3.c ****   __ASM("bx lr");
 368:../libs/core_cm3.c **** }
 369:../libs/core_cm3.c **** 
 370:../libs/core_cm3.c **** /**
 371:../libs/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 372:../libs/core_cm3.c ****  *
 373:../libs/core_cm3.c ****  * @param  *addr  address pointer
 374:../libs/core_cm3.c ****  * @return        value of (*address)
 375:../libs/core_cm3.c ****  *
 376:../libs/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 377:../libs/core_cm3.c ****  */
 378:../libs/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 379:../libs/core_cm3.c **** {
 380:../libs/core_cm3.c ****   __ASM("ldrex r0, [r0]");
 381:../libs/core_cm3.c ****   __ASM("bx lr");
 382:../libs/core_cm3.c **** }
 383:../libs/core_cm3.c **** 
 384:../libs/core_cm3.c **** /**
 385:../libs/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 386:../libs/core_cm3.c ****  *
 387:../libs/core_cm3.c ****  * @param  value  value to store
 388:../libs/core_cm3.c ****  * @param  *addr  address pointer
 389:../libs/core_cm3.c ****  * @return        successful / failed
 390:../libs/core_cm3.c ****  *
 391:../libs/core_cm3.c ****  * Exclusive STR command for 8 bit values
 392:../libs/core_cm3.c ****  */
 393:../libs/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 394:../libs/core_cm3.c **** {
 395:../libs/core_cm3.c ****   __ASM("strexb r0, r0, [r1]");
 396:../libs/core_cm3.c ****   __ASM("bx lr");
 397:../libs/core_cm3.c **** }
 398:../libs/core_cm3.c **** 
 399:../libs/core_cm3.c **** /**
 400:../libs/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 401:../libs/core_cm3.c ****  *
 402:../libs/core_cm3.c ****  * @param  value  value to store
 403:../libs/core_cm3.c ****  * @param  *addr  address pointer
 404:../libs/core_cm3.c ****  * @return        successful / failed
 405:../libs/core_cm3.c ****  *
 406:../libs/core_cm3.c ****  * Exclusive STR command for 16 bit values
 407:../libs/core_cm3.c ****  */
 408:../libs/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 409:../libs/core_cm3.c **** {
 410:../libs/core_cm3.c ****   __ASM("strexh r0, r0, [r1]");
 411:../libs/core_cm3.c ****   __ASM("bx lr");
 412:../libs/core_cm3.c **** }
 413:../libs/core_cm3.c **** 
 414:../libs/core_cm3.c **** /**
 415:../libs/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 416:../libs/core_cm3.c ****  *
 417:../libs/core_cm3.c ****  * @param  value  value to store
 418:../libs/core_cm3.c ****  * @param  *addr  address pointer
 419:../libs/core_cm3.c ****  * @return        successful / failed
 420:../libs/core_cm3.c ****  *
 421:../libs/core_cm3.c ****  * Exclusive STR command for 32 bit values
 422:../libs/core_cm3.c ****  */
 423:../libs/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 424:../libs/core_cm3.c **** {
 425:../libs/core_cm3.c ****   __ASM("strex r0, r0, [r1]");
 426:../libs/core_cm3.c ****   __ASM("bx lr");
 427:../libs/core_cm3.c **** }
 428:../libs/core_cm3.c **** 
 429:../libs/core_cm3.c **** #pragma diag_default=Pe940
 430:../libs/core_cm3.c **** 
 431:../libs/core_cm3.c **** 
 432:../libs/core_cm3.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 433:../libs/core_cm3.c **** /* GNU gcc specific functions */
 434:../libs/core_cm3.c **** 
 435:../libs/core_cm3.c **** /**
 436:../libs/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 437:../libs/core_cm3.c ****  *
 438:../libs/core_cm3.c ****  * @return ProcessStackPointer
 439:../libs/core_cm3.c ****  *
 440:../libs/core_cm3.c ****  * Return the actual process stack pointer
 441:../libs/core_cm3.c ****  */
 442:../libs/core_cm3.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
 443:../libs/core_cm3.c **** uint32_t __get_PSP(void)
 444:../libs/core_cm3.c **** {
 1248              		.loc 1 444 0
 1249              		.cfi_startproc
 1250              		@ Naked Function: prologue and epilogue provided by programmer.
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 1, uses_anonymous_args = 0
 445:../libs/core_cm3.c ****   uint32_t result=0;
 1253              		.loc 1 445 0
 1254 0000 4FF00004 		mov	r4, #0
 446:../libs/core_cm3.c **** 
 447:../libs/core_cm3.c ****   __ASM volatile ("MRS %0, psp\n\t" 
 1255              		.loc 1 447 0
 1256              	@ 447 "../libs/core_cm3.c" 1
 1257 0004 EFF30984 		MRS r4, psp
 1258 0008 2046     		MOV r0, r4 
 1259 000a 7047     		BX  lr     
 1260              		
 1261              	@ 0 "" 2
 448:../libs/core_cm3.c ****                   "MOV r0, %0 \n\t"
 449:../libs/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 450:../libs/core_cm3.c ****   return(result);
 1262              		.loc 1 450 0
 1263              		.thumb
 1264 000c 2346     		mov	r3, r4
 451:../libs/core_cm3.c **** }
 1265              		.loc 1 451 0
 1266 000e 1846     		mov	r0, r3
 1267              		.cfi_endproc
 1268              	.LFE0:
 1270              		.align	2
 1271              		.global	__set_PSP
 1272              		.thumb
 1273              		.thumb_func
 1275              	__set_PSP:
 1276              	.LFB1:
 452:../libs/core_cm3.c **** 
 453:../libs/core_cm3.c **** /**
 454:../libs/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 455:../libs/core_cm3.c ****  *
 456:../libs/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 457:../libs/core_cm3.c ****  *
 458:../libs/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 459:../libs/core_cm3.c ****  * (process stack pointer) Cortex processor register
 460:../libs/core_cm3.c ****  */
 461:../libs/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 462:../libs/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 463:../libs/core_cm3.c **** {
 1277              		.loc 1 463 0
 1278              		.cfi_startproc
 1279              		@ Naked Function: prologue and epilogue provided by programmer.
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 1, uses_anonymous_args = 0
 1282 0010 0346     		mov	r3, r0
 464:../libs/core_cm3.c ****   __ASM volatile ("MSR psp, %0\n\t"
 1283              		.loc 1 464 0
 1284              	@ 464 "../libs/core_cm3.c" 1
 1285 0012 83F30988 		MSR psp, r3
 1286 0016 7047     		BX  lr     
 1287              		
 1288              	@ 0 "" 2
 465:../libs/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 466:../libs/core_cm3.c **** }
 1289              		.loc 1 466 0
 1290              		.thumb
 1291              		.cfi_endproc
 1292              	.LFE1:
 1294              		.align	2
 1295              		.global	__get_MSP
 1296              		.thumb
 1297              		.thumb_func
 1299              	__get_MSP:
 1300              	.LFB2:
 467:../libs/core_cm3.c **** 
 468:../libs/core_cm3.c **** /**
 469:../libs/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 470:../libs/core_cm3.c ****  *
 471:../libs/core_cm3.c ****  * @return Main Stack Pointer
 472:../libs/core_cm3.c ****  *
 473:../libs/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 474:../libs/core_cm3.c ****  * Cortex processor register
 475:../libs/core_cm3.c ****  */
 476:../libs/core_cm3.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 477:../libs/core_cm3.c **** uint32_t __get_MSP(void)
 478:../libs/core_cm3.c **** {
 1301              		.loc 1 478 0
 1302              		.cfi_startproc
 1303              		@ Naked Function: prologue and epilogue provided by programmer.
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 1, uses_anonymous_args = 0
 479:../libs/core_cm3.c ****   uint32_t result=0;
 1306              		.loc 1 479 0
 1307 0018 4FF00004 		mov	r4, #0
 480:../libs/core_cm3.c **** 
 481:../libs/core_cm3.c ****   __ASM volatile ("MRS %0, msp\n\t" 
 1308              		.loc 1 481 0
 1309              	@ 481 "../libs/core_cm3.c" 1
 1310 001c EFF30884 		MRS r4, msp
 1311 0020 2046     		MOV r0, r4 
 1312 0022 7047     		BX  lr     
 1313              		
 1314              	@ 0 "" 2
 482:../libs/core_cm3.c ****                   "MOV r0, %0 \n\t"
 483:../libs/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 484:../libs/core_cm3.c ****   return(result);
 1315              		.loc 1 484 0
 1316              		.thumb
 1317 0024 2346     		mov	r3, r4
 485:../libs/core_cm3.c **** }
 1318              		.loc 1 485 0
 1319 0026 1846     		mov	r0, r3
 1320              		.cfi_endproc
 1321              	.LFE2:
 1323              		.align	2
 1324              		.global	__set_MSP
 1325              		.thumb
 1326              		.thumb_func
 1328              	__set_MSP:
 1329              	.LFB3:
 486:../libs/core_cm3.c **** 
 487:../libs/core_cm3.c **** /**
 488:../libs/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 489:../libs/core_cm3.c ****  *
 490:../libs/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 491:../libs/core_cm3.c ****  *
 492:../libs/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 493:../libs/core_cm3.c ****  * (main stack pointer) Cortex processor register
 494:../libs/core_cm3.c ****  */
 495:../libs/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 496:../libs/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 497:../libs/core_cm3.c **** {
 1330              		.loc 1 497 0
 1331              		.cfi_startproc
 1332              		@ Naked Function: prologue and epilogue provided by programmer.
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 1, uses_anonymous_args = 0
 1335 0028 0346     		mov	r3, r0
 498:../libs/core_cm3.c ****   __ASM volatile ("MSR msp, %0\n\t"
 1336              		.loc 1 498 0
 1337              	@ 498 "../libs/core_cm3.c" 1
 1338 002a 83F30888 		MSR msp, r3
 1339 002e 7047     		BX  lr     
 1340              		
 1341              	@ 0 "" 2
 499:../libs/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 500:../libs/core_cm3.c **** }
 1342              		.loc 1 500 0
 1343              		.thumb
 1344              		.cfi_endproc
 1345              	.LFE3:
 1347              		.align	2
 1348              		.global	__get_BASEPRI
 1349              		.thumb
 1350              		.thumb_func
 1352              	__get_BASEPRI:
 1353              	.LFB4:
 501:../libs/core_cm3.c **** 
 502:../libs/core_cm3.c **** /**
 503:../libs/core_cm3.c ****  * @brief  Return the Base Priority value
 504:../libs/core_cm3.c ****  *
 505:../libs/core_cm3.c ****  * @return BasePriority
 506:../libs/core_cm3.c ****  *
 507:../libs/core_cm3.c ****  * Return the content of the base priority register
 508:../libs/core_cm3.c ****  */
 509:../libs/core_cm3.c **** uint32_t __get_BASEPRI(void)
 510:../libs/core_cm3.c **** {
 1354              		.loc 1 510 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 8
 1357              		@ frame_needed = 1, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 1359 0030 90B4     		push	{r4, r7}
 1360              	.LCFI0:
 1361              		.cfi_def_cfa_offset 8
 1362 0032 82B0     		sub	sp, sp, #8
 1363              	.LCFI1:
 1364              		.cfi_def_cfa_offset 16
 1365 0034 00AF     		add	r7, sp, #0
 1366              		.cfi_offset 7, -4
 1367              		.cfi_offset 4, -8
 1368              	.LCFI2:
 1369              		.cfi_def_cfa_register 7
 511:../libs/core_cm3.c ****   uint32_t result=0;
 1370              		.loc 1 511 0
 1371 0036 4FF00003 		mov	r3, #0
 1372 003a 7B60     		str	r3, [r7, #4]
 512:../libs/core_cm3.c ****   
 513:../libs/core_cm3.c ****   __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 1373              		.loc 1 513 0
 1374              	@ 513 "../libs/core_cm3.c" 1
 1375 003c EFF31284 		MRS r4, basepri_max
 1376              	@ 0 "" 2
 1377              		.thumb
 1378 0040 7C60     		str	r4, [r7, #4]
 514:../libs/core_cm3.c ****   return(result);
 1379              		.loc 1 514 0
 1380 0042 7B68     		ldr	r3, [r7, #4]
 515:../libs/core_cm3.c **** }
 1381              		.loc 1 515 0
 1382 0044 1846     		mov	r0, r3
 1383 0046 07F10807 		add	r7, r7, #8
 1384 004a BD46     		mov	sp, r7
 1385 004c 90BC     		pop	{r4, r7}
 1386 004e 7047     		bx	lr
 1387              		.cfi_endproc
 1388              	.LFE4:
 1390              		.align	2
 1391              		.global	__set_BASEPRI
 1392              		.thumb
 1393              		.thumb_func
 1395              	__set_BASEPRI:
 1396              	.LFB5:
 516:../libs/core_cm3.c **** 
 517:../libs/core_cm3.c **** /**
 518:../libs/core_cm3.c ****  * @brief  Set the Base Priority value
 519:../libs/core_cm3.c ****  *
 520:../libs/core_cm3.c ****  * @param  basePri  BasePriority
 521:../libs/core_cm3.c ****  *
 522:../libs/core_cm3.c ****  * Set the base priority register
 523:../libs/core_cm3.c ****  */
 524:../libs/core_cm3.c **** void __set_BASEPRI(uint32_t value)
 525:../libs/core_cm3.c **** {
 1397              		.loc 1 525 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 8
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402 0050 80B4     		push	{r7}
 1403              	.LCFI3:
 1404              		.cfi_def_cfa_offset 4
 1405 0052 83B0     		sub	sp, sp, #12
 1406              	.LCFI4:
 1407              		.cfi_def_cfa_offset 16
 1408 0054 00AF     		add	r7, sp, #0
 1409              		.cfi_offset 7, -4
 1410              	.LCFI5:
 1411              		.cfi_def_cfa_register 7
 1412 0056 7860     		str	r0, [r7, #4]
 526:../libs/core_cm3.c ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 1413              		.loc 1 526 0
 1414 0058 7B68     		ldr	r3, [r7, #4]
 1415              	@ 526 "../libs/core_cm3.c" 1
 1416 005a 83F31188 		MSR basepri, r3
 1417              	@ 0 "" 2
 527:../libs/core_cm3.c **** }
 1418              		.loc 1 527 0
 1419              		.thumb
 1420 005e 07F10C07 		add	r7, r7, #12
 1421 0062 BD46     		mov	sp, r7
 1422 0064 80BC     		pop	{r7}
 1423 0066 7047     		bx	lr
 1424              		.cfi_endproc
 1425              	.LFE5:
 1427              		.align	2
 1428              		.global	__get_PRIMASK
 1429              		.thumb
 1430              		.thumb_func
 1432              	__get_PRIMASK:
 1433              	.LFB6:
 528:../libs/core_cm3.c **** 
 529:../libs/core_cm3.c **** /**
 530:../libs/core_cm3.c ****  * @brief  Return the Priority Mask value
 531:../libs/core_cm3.c ****  *
 532:../libs/core_cm3.c ****  * @return PriMask
 533:../libs/core_cm3.c ****  *
 534:../libs/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 535:../libs/core_cm3.c ****  */
 536:../libs/core_cm3.c **** uint32_t __get_PRIMASK(void)
 537:../libs/core_cm3.c **** {
 1434              		.loc 1 537 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 8
 1437              		@ frame_needed = 1, uses_anonymous_args = 0
 1438              		@ link register save eliminated.
 1439 0068 90B4     		push	{r4, r7}
 1440              	.LCFI6:
 1441              		.cfi_def_cfa_offset 8
 1442 006a 82B0     		sub	sp, sp, #8
 1443              	.LCFI7:
 1444              		.cfi_def_cfa_offset 16
 1445 006c 00AF     		add	r7, sp, #0
 1446              		.cfi_offset 7, -4
 1447              		.cfi_offset 4, -8
 1448              	.LCFI8:
 1449              		.cfi_def_cfa_register 7
 538:../libs/core_cm3.c ****   uint32_t result=0;
 1450              		.loc 1 538 0
 1451 006e 4FF00003 		mov	r3, #0
 1452 0072 7B60     		str	r3, [r7, #4]
 539:../libs/core_cm3.c **** 
 540:../libs/core_cm3.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1453              		.loc 1 540 0
 1454              	@ 540 "../libs/core_cm3.c" 1
 1455 0074 EFF31084 		MRS r4, primask
 1456              	@ 0 "" 2
 1457              		.thumb
 1458 0078 7C60     		str	r4, [r7, #4]
 541:../libs/core_cm3.c ****   return(result);
 1459              		.loc 1 541 0
 1460 007a 7B68     		ldr	r3, [r7, #4]
 542:../libs/core_cm3.c **** }
 1461              		.loc 1 542 0
 1462 007c 1846     		mov	r0, r3
 1463 007e 07F10807 		add	r7, r7, #8
 1464 0082 BD46     		mov	sp, r7
 1465 0084 90BC     		pop	{r4, r7}
 1466 0086 7047     		bx	lr
 1467              		.cfi_endproc
 1468              	.LFE6:
 1470              		.align	2
 1471              		.global	__set_PRIMASK
 1472              		.thumb
 1473              		.thumb_func
 1475              	__set_PRIMASK:
 1476              	.LFB7:
 543:../libs/core_cm3.c **** 
 544:../libs/core_cm3.c **** /**
 545:../libs/core_cm3.c ****  * @brief  Set the Priority Mask value
 546:../libs/core_cm3.c ****  *
 547:../libs/core_cm3.c ****  * @param  priMask  PriMask
 548:../libs/core_cm3.c ****  *
 549:../libs/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 550:../libs/core_cm3.c ****  */
 551:../libs/core_cm3.c **** void __set_PRIMASK(uint32_t priMask)
 552:../libs/core_cm3.c **** {
 1477              		.loc 1 552 0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 8
 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481              		@ link register save eliminated.
 1482 0088 80B4     		push	{r7}
 1483              	.LCFI9:
 1484              		.cfi_def_cfa_offset 4
 1485 008a 83B0     		sub	sp, sp, #12
 1486              	.LCFI10:
 1487              		.cfi_def_cfa_offset 16
 1488 008c 00AF     		add	r7, sp, #0
 1489              		.cfi_offset 7, -4
 1490              	.LCFI11:
 1491              		.cfi_def_cfa_register 7
 1492 008e 7860     		str	r0, [r7, #4]
 553:../libs/core_cm3.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 1493              		.loc 1 553 0
 1494 0090 7B68     		ldr	r3, [r7, #4]
 1495              	@ 553 "../libs/core_cm3.c" 1
 1496 0092 83F31088 		MSR primask, r3
 1497              	@ 0 "" 2
 554:../libs/core_cm3.c **** }
 1498              		.loc 1 554 0
 1499              		.thumb
 1500 0096 07F10C07 		add	r7, r7, #12
 1501 009a BD46     		mov	sp, r7
 1502 009c 80BC     		pop	{r7}
 1503 009e 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE7:
 1507              		.align	2
 1508              		.global	__get_FAULTMASK
 1509              		.thumb
 1510              		.thumb_func
 1512              	__get_FAULTMASK:
 1513              	.LFB8:
 555:../libs/core_cm3.c **** 
 556:../libs/core_cm3.c **** /**
 557:../libs/core_cm3.c ****  * @brief  Return the Fault Mask value
 558:../libs/core_cm3.c ****  *
 559:../libs/core_cm3.c ****  * @return FaultMask
 560:../libs/core_cm3.c ****  *
 561:../libs/core_cm3.c ****  * Return the content of the fault mask register
 562:../libs/core_cm3.c ****  */
 563:../libs/core_cm3.c **** uint32_t __get_FAULTMASK(void)
 564:../libs/core_cm3.c **** {
 1514              		.loc 1 564 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 8
 1517              		@ frame_needed = 1, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 1519 00a0 90B4     		push	{r4, r7}
 1520              	.LCFI12:
 1521              		.cfi_def_cfa_offset 8
 1522 00a2 82B0     		sub	sp, sp, #8
 1523              	.LCFI13:
 1524              		.cfi_def_cfa_offset 16
 1525 00a4 00AF     		add	r7, sp, #0
 1526              		.cfi_offset 7, -4
 1527              		.cfi_offset 4, -8
 1528              	.LCFI14:
 1529              		.cfi_def_cfa_register 7
 565:../libs/core_cm3.c ****   uint32_t result=0;
 1530              		.loc 1 565 0
 1531 00a6 4FF00003 		mov	r3, #0
 1532 00aa 7B60     		str	r3, [r7, #4]
 566:../libs/core_cm3.c ****   
 567:../libs/core_cm3.c ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 1533              		.loc 1 567 0
 1534              	@ 567 "../libs/core_cm3.c" 1
 1535 00ac EFF31384 		MRS r4, faultmask
 1536              	@ 0 "" 2
 1537              		.thumb
 1538 00b0 7C60     		str	r4, [r7, #4]
 568:../libs/core_cm3.c ****   return(result);
 1539              		.loc 1 568 0
 1540 00b2 7B68     		ldr	r3, [r7, #4]
 569:../libs/core_cm3.c **** }
 1541              		.loc 1 569 0
 1542 00b4 1846     		mov	r0, r3
 1543 00b6 07F10807 		add	r7, r7, #8
 1544 00ba BD46     		mov	sp, r7
 1545 00bc 90BC     		pop	{r4, r7}
 1546 00be 7047     		bx	lr
 1547              		.cfi_endproc
 1548              	.LFE8:
 1550              		.align	2
 1551              		.global	__set_FAULTMASK
 1552              		.thumb
 1553              		.thumb_func
 1555              	__set_FAULTMASK:
 1556              	.LFB9:
 570:../libs/core_cm3.c **** 
 571:../libs/core_cm3.c **** /**
 572:../libs/core_cm3.c ****  * @brief  Set the Fault Mask value
 573:../libs/core_cm3.c ****  *
 574:../libs/core_cm3.c ****  * @param  faultMask  faultMask value
 575:../libs/core_cm3.c ****  *
 576:../libs/core_cm3.c ****  * Set the fault mask register
 577:../libs/core_cm3.c ****  */
 578:../libs/core_cm3.c **** void __set_FAULTMASK(uint32_t faultMask)
 579:../libs/core_cm3.c **** {
 1557              		.loc 1 579 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 8
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561              		@ link register save eliminated.
 1562 00c0 80B4     		push	{r7}
 1563              	.LCFI15:
 1564              		.cfi_def_cfa_offset 4
 1565 00c2 83B0     		sub	sp, sp, #12
 1566              	.LCFI16:
 1567              		.cfi_def_cfa_offset 16
 1568 00c4 00AF     		add	r7, sp, #0
 1569              		.cfi_offset 7, -4
 1570              	.LCFI17:
 1571              		.cfi_def_cfa_register 7
 1572 00c6 7860     		str	r0, [r7, #4]
 580:../libs/core_cm3.c ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 1573              		.loc 1 580 0
 1574 00c8 7B68     		ldr	r3, [r7, #4]
 1575              	@ 580 "../libs/core_cm3.c" 1
 1576 00ca 83F31388 		MSR faultmask, r3
 1577              	@ 0 "" 2
 581:../libs/core_cm3.c **** }
 1578              		.loc 1 581 0
 1579              		.thumb
 1580 00ce 07F10C07 		add	r7, r7, #12
 1581 00d2 BD46     		mov	sp, r7
 1582 00d4 80BC     		pop	{r7}
 1583 00d6 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE9:
 1587              		.align	2
 1588              		.global	__get_CONTROL
 1589              		.thumb
 1590              		.thumb_func
 1592              	__get_CONTROL:
 1593              	.LFB10:
 582:../libs/core_cm3.c **** 
 583:../libs/core_cm3.c **** /**
 584:../libs/core_cm3.c ****  * @brief  Return the Control Register value
 585:../libs/core_cm3.c **** * 
 586:../libs/core_cm3.c **** *  @return Control value
 587:../libs/core_cm3.c ****  *
 588:../libs/core_cm3.c ****  * Return the content of the control register
 589:../libs/core_cm3.c ****  */
 590:../libs/core_cm3.c **** uint32_t __get_CONTROL(void)
 591:../libs/core_cm3.c **** {
 1594              		.loc 1 591 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599 00d8 90B4     		push	{r4, r7}
 1600              	.LCFI18:
 1601              		.cfi_def_cfa_offset 8
 1602 00da 82B0     		sub	sp, sp, #8
 1603              	.LCFI19:
 1604              		.cfi_def_cfa_offset 16
 1605 00dc 00AF     		add	r7, sp, #0
 1606              		.cfi_offset 7, -4
 1607              		.cfi_offset 4, -8
 1608              	.LCFI20:
 1609              		.cfi_def_cfa_register 7
 592:../libs/core_cm3.c ****   uint32_t result=0;
 1610              		.loc 1 592 0
 1611 00de 4FF00003 		mov	r3, #0
 1612 00e2 7B60     		str	r3, [r7, #4]
 593:../libs/core_cm3.c **** 
 594:../libs/core_cm3.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 1613              		.loc 1 594 0
 1614              	@ 594 "../libs/core_cm3.c" 1
 1615 00e4 EFF31484 		MRS r4, control
 1616              	@ 0 "" 2
 1617              		.thumb
 1618 00e8 7C60     		str	r4, [r7, #4]
 595:../libs/core_cm3.c ****   return(result);
 1619              		.loc 1 595 0
 1620 00ea 7B68     		ldr	r3, [r7, #4]
 596:../libs/core_cm3.c **** }
 1621              		.loc 1 596 0
 1622 00ec 1846     		mov	r0, r3
 1623 00ee 07F10807 		add	r7, r7, #8
 1624 00f2 BD46     		mov	sp, r7
 1625 00f4 90BC     		pop	{r4, r7}
 1626 00f6 7047     		bx	lr
 1627              		.cfi_endproc
 1628              	.LFE10:
 1630              		.align	2
 1631              		.global	__set_CONTROL
 1632              		.thumb
 1633              		.thumb_func
 1635              	__set_CONTROL:
 1636              	.LFB11:
 597:../libs/core_cm3.c **** 
 598:../libs/core_cm3.c **** /**
 599:../libs/core_cm3.c ****  * @brief  Set the Control Register value
 600:../libs/core_cm3.c ****  *
 601:../libs/core_cm3.c ****  * @param  control  Control value
 602:../libs/core_cm3.c ****  *
 603:../libs/core_cm3.c ****  * Set the control register
 604:../libs/core_cm3.c ****  */
 605:../libs/core_cm3.c **** void __set_CONTROL(uint32_t control)
 606:../libs/core_cm3.c **** {
 1637              		.loc 1 606 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 8
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641              		@ link register save eliminated.
 1642 00f8 80B4     		push	{r7}
 1643              	.LCFI21:
 1644              		.cfi_def_cfa_offset 4
 1645 00fa 83B0     		sub	sp, sp, #12
 1646              	.LCFI22:
 1647              		.cfi_def_cfa_offset 16
 1648 00fc 00AF     		add	r7, sp, #0
 1649              		.cfi_offset 7, -4
 1650              	.LCFI23:
 1651              		.cfi_def_cfa_register 7
 1652 00fe 7860     		str	r0, [r7, #4]
 607:../libs/core_cm3.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 1653              		.loc 1 607 0
 1654 0100 7B68     		ldr	r3, [r7, #4]
 1655              	@ 607 "../libs/core_cm3.c" 1
 1656 0102 83F31488 		MSR control, r3
 1657              	@ 0 "" 2
 608:../libs/core_cm3.c **** }
 1658              		.loc 1 608 0
 1659              		.thumb
 1660 0106 07F10C07 		add	r7, r7, #12
 1661 010a BD46     		mov	sp, r7
 1662 010c 80BC     		pop	{r7}
 1663 010e 7047     		bx	lr
 1664              		.cfi_endproc
 1665              	.LFE11:
 1667              		.align	2
 1668              		.global	__REV
 1669              		.thumb
 1670              		.thumb_func
 1672              	__REV:
 1673              	.LFB12:
 609:../libs/core_cm3.c **** 
 610:../libs/core_cm3.c **** 
 611:../libs/core_cm3.c **** /**
 612:../libs/core_cm3.c ****  * @brief  Reverse byte order in integer value
 613:../libs/core_cm3.c ****  *
 614:../libs/core_cm3.c ****  * @param  value  value to reverse
 615:../libs/core_cm3.c ****  * @return        reversed value
 616:../libs/core_cm3.c ****  *
 617:../libs/core_cm3.c ****  * Reverse byte order in integer value
 618:../libs/core_cm3.c ****  */
 619:../libs/core_cm3.c **** uint32_t __REV(uint32_t value)
 620:../libs/core_cm3.c **** {
 1674              		.loc 1 620 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 16
 1677              		@ frame_needed = 1, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
 1679 0110 90B4     		push	{r4, r7}
 1680              	.LCFI24:
 1681              		.cfi_def_cfa_offset 8
 1682 0112 84B0     		sub	sp, sp, #16
 1683              	.LCFI25:
 1684              		.cfi_def_cfa_offset 24
 1685 0114 00AF     		add	r7, sp, #0
 1686              		.cfi_offset 7, -4
 1687              		.cfi_offset 4, -8
 1688              	.LCFI26:
 1689              		.cfi_def_cfa_register 7
 1690 0116 7860     		str	r0, [r7, #4]
 621:../libs/core_cm3.c ****   uint32_t result=0;
 1691              		.loc 1 621 0
 1692 0118 4FF00003 		mov	r3, #0
 1693 011c FB60     		str	r3, [r7, #12]
 622:../libs/core_cm3.c ****   
 623:../libs/core_cm3.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1694              		.loc 1 623 0
 1695 011e 7B68     		ldr	r3, [r7, #4]
 1696              	@ 623 "../libs/core_cm3.c" 1
 1697 0120 1CBA     		rev r4, r3
 1698              	@ 0 "" 2
 1699              		.thumb
 1700 0122 FC60     		str	r4, [r7, #12]
 624:../libs/core_cm3.c ****   return(result);
 1701              		.loc 1 624 0
 1702 0124 FB68     		ldr	r3, [r7, #12]
 625:../libs/core_cm3.c **** }
 1703              		.loc 1 625 0
 1704 0126 1846     		mov	r0, r3
 1705 0128 07F11007 		add	r7, r7, #16
 1706 012c BD46     		mov	sp, r7
 1707 012e 90BC     		pop	{r4, r7}
 1708 0130 7047     		bx	lr
 1709              		.cfi_endproc
 1710              	.LFE12:
 1712 0132 00BF     		.align	2
 1713              		.global	__REV16
 1714              		.thumb
 1715              		.thumb_func
 1717              	__REV16:
 1718              	.LFB13:
 626:../libs/core_cm3.c **** 
 627:../libs/core_cm3.c **** /**
 628:../libs/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 629:../libs/core_cm3.c ****  *
 630:../libs/core_cm3.c ****  * @param  value  value to reverse
 631:../libs/core_cm3.c ****  * @return        reversed value
 632:../libs/core_cm3.c ****  *
 633:../libs/core_cm3.c ****  * Reverse byte order in unsigned short value
 634:../libs/core_cm3.c ****  */
 635:../libs/core_cm3.c **** uint32_t __REV16(uint16_t value)
 636:../libs/core_cm3.c **** {
 1719              		.loc 1 636 0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 16
 1722              		@ frame_needed = 1, uses_anonymous_args = 0
 1723              		@ link register save eliminated.
 1724 0134 90B4     		push	{r4, r7}
 1725              	.LCFI27:
 1726              		.cfi_def_cfa_offset 8
 1727 0136 84B0     		sub	sp, sp, #16
 1728              	.LCFI28:
 1729              		.cfi_def_cfa_offset 24
 1730 0138 00AF     		add	r7, sp, #0
 1731              		.cfi_offset 7, -4
 1732              		.cfi_offset 4, -8
 1733              	.LCFI29:
 1734              		.cfi_def_cfa_register 7
 1735 013a 0346     		mov	r3, r0
 1736 013c FB80     		strh	r3, [r7, #6]	@ movhi
 637:../libs/core_cm3.c ****   uint32_t result=0;
 1737              		.loc 1 637 0
 1738 013e 4FF00003 		mov	r3, #0
 1739 0142 FB60     		str	r3, [r7, #12]
 638:../libs/core_cm3.c ****   
 639:../libs/core_cm3.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 1740              		.loc 1 639 0
 1741 0144 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1742              	@ 639 "../libs/core_cm3.c" 1
 1743 0146 5CBA     		rev16 r4, r3
 1744              	@ 0 "" 2
 1745              		.thumb
 1746 0148 FC60     		str	r4, [r7, #12]
 640:../libs/core_cm3.c ****   return(result);
 1747              		.loc 1 640 0
 1748 014a FB68     		ldr	r3, [r7, #12]
 641:../libs/core_cm3.c **** }
 1749              		.loc 1 641 0
 1750 014c 1846     		mov	r0, r3
 1751 014e 07F11007 		add	r7, r7, #16
 1752 0152 BD46     		mov	sp, r7
 1753 0154 90BC     		pop	{r4, r7}
 1754 0156 7047     		bx	lr
 1755              		.cfi_endproc
 1756              	.LFE13:
 1758              		.align	2
 1759              		.global	__REVSH
 1760              		.thumb
 1761              		.thumb_func
 1763              	__REVSH:
 1764              	.LFB14:
 642:../libs/core_cm3.c **** 
 643:../libs/core_cm3.c **** /**
 644:../libs/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 645:../libs/core_cm3.c ****  *
 646:../libs/core_cm3.c ****  * @param  value  value to reverse
 647:../libs/core_cm3.c ****  * @return        reversed value
 648:../libs/core_cm3.c ****  *
 649:../libs/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 650:../libs/core_cm3.c ****  */
 651:../libs/core_cm3.c **** int32_t __REVSH(int16_t value)
 652:../libs/core_cm3.c **** {
 1765              		.loc 1 652 0
 1766              		.cfi_startproc
 1767              		@ args = 0, pretend = 0, frame = 16
 1768              		@ frame_needed = 1, uses_anonymous_args = 0
 1769              		@ link register save eliminated.
 1770 0158 90B4     		push	{r4, r7}
 1771              	.LCFI30:
 1772              		.cfi_def_cfa_offset 8
 1773 015a 84B0     		sub	sp, sp, #16
 1774              	.LCFI31:
 1775              		.cfi_def_cfa_offset 24
 1776 015c 00AF     		add	r7, sp, #0
 1777              		.cfi_offset 7, -4
 1778              		.cfi_offset 4, -8
 1779              	.LCFI32:
 1780              		.cfi_def_cfa_register 7
 1781 015e 0346     		mov	r3, r0
 1782 0160 FB80     		strh	r3, [r7, #6]	@ movhi
 653:../libs/core_cm3.c ****   uint32_t result=0;
 1783              		.loc 1 653 0
 1784 0162 4FF00003 		mov	r3, #0
 1785 0166 FB60     		str	r3, [r7, #12]
 654:../libs/core_cm3.c ****   
 655:../libs/core_cm3.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 1786              		.loc 1 655 0
 1787 0168 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1788              	@ 655 "../libs/core_cm3.c" 1
 1789 016a DCBA     		revsh r4, r3
 1790              	@ 0 "" 2
 1791              		.thumb
 1792 016c FC60     		str	r4, [r7, #12]
 656:../libs/core_cm3.c ****   return(result);
 1793              		.loc 1 656 0
 1794 016e FB68     		ldr	r3, [r7, #12]
 657:../libs/core_cm3.c **** }
 1795              		.loc 1 657 0
 1796 0170 1846     		mov	r0, r3
 1797 0172 07F11007 		add	r7, r7, #16
 1798 0176 BD46     		mov	sp, r7
 1799 0178 90BC     		pop	{r4, r7}
 1800 017a 7047     		bx	lr
 1801              		.cfi_endproc
 1802              	.LFE14:
 1804              		.align	2
 1805              		.global	__RBIT
 1806              		.thumb
 1807              		.thumb_func
 1809              	__RBIT:
 1810              	.LFB15:
 658:../libs/core_cm3.c **** 
 659:../libs/core_cm3.c **** /**
 660:../libs/core_cm3.c ****  * @brief  Reverse bit order of value
 661:../libs/core_cm3.c ****  *
 662:../libs/core_cm3.c ****  * @param  value  value to reverse
 663:../libs/core_cm3.c ****  * @return        reversed value
 664:../libs/core_cm3.c ****  *
 665:../libs/core_cm3.c ****  * Reverse bit order of value
 666:../libs/core_cm3.c ****  */
 667:../libs/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 668:../libs/core_cm3.c **** {
 1811              		.loc 1 668 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 16
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816 017c 90B4     		push	{r4, r7}
 1817              	.LCFI33:
 1818              		.cfi_def_cfa_offset 8
 1819 017e 84B0     		sub	sp, sp, #16
 1820              	.LCFI34:
 1821              		.cfi_def_cfa_offset 24
 1822 0180 00AF     		add	r7, sp, #0
 1823              		.cfi_offset 7, -4
 1824              		.cfi_offset 4, -8
 1825              	.LCFI35:
 1826              		.cfi_def_cfa_register 7
 1827 0182 7860     		str	r0, [r7, #4]
 669:../libs/core_cm3.c ****   uint32_t result=0;
 1828              		.loc 1 669 0
 1829 0184 4FF00003 		mov	r3, #0
 1830 0188 FB60     		str	r3, [r7, #12]
 670:../libs/core_cm3.c ****   
 671:../libs/core_cm3.c ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1831              		.loc 1 671 0
 1832 018a 7B68     		ldr	r3, [r7, #4]
 1833              	@ 671 "../libs/core_cm3.c" 1
 1834 018c 93FAA3F4 		rbit r4, r3
 1835              	@ 0 "" 2
 1836              		.thumb
 1837 0190 FC60     		str	r4, [r7, #12]
 672:../libs/core_cm3.c ****    return(result);
 1838              		.loc 1 672 0
 1839 0192 FB68     		ldr	r3, [r7, #12]
 673:../libs/core_cm3.c **** }
 1840              		.loc 1 673 0
 1841 0194 1846     		mov	r0, r3
 1842 0196 07F11007 		add	r7, r7, #16
 1843 019a BD46     		mov	sp, r7
 1844 019c 90BC     		pop	{r4, r7}
 1845 019e 7047     		bx	lr
 1846              		.cfi_endproc
 1847              	.LFE15:
 1849              		.align	2
 1850              		.global	__LDREXB
 1851              		.thumb
 1852              		.thumb_func
 1854              	__LDREXB:
 1855              	.LFB16:
 674:../libs/core_cm3.c **** 
 675:../libs/core_cm3.c **** /**
 676:../libs/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 677:../libs/core_cm3.c ****  *
 678:../libs/core_cm3.c ****  * @param  *addr  address pointer
 679:../libs/core_cm3.c ****  * @return        value of (*address)
 680:../libs/core_cm3.c ****  *
 681:../libs/core_cm3.c ****  * Exclusive LDR command for 8 bit value
 682:../libs/core_cm3.c ****  */
 683:../libs/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 684:../libs/core_cm3.c **** {
 1856              		.loc 1 684 0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 16
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860              		@ link register save eliminated.
 1861 01a0 90B4     		push	{r4, r7}
 1862              	.LCFI36:
 1863              		.cfi_def_cfa_offset 8
 1864 01a2 84B0     		sub	sp, sp, #16
 1865              	.LCFI37:
 1866              		.cfi_def_cfa_offset 24
 1867 01a4 00AF     		add	r7, sp, #0
 1868              		.cfi_offset 7, -4
 1869              		.cfi_offset 4, -8
 1870              	.LCFI38:
 1871              		.cfi_def_cfa_register 7
 1872 01a6 7860     		str	r0, [r7, #4]
 685:../libs/core_cm3.c ****     uint8_t result=0;
 1873              		.loc 1 685 0
 1874 01a8 4FF00003 		mov	r3, #0
 1875 01ac FB73     		strb	r3, [r7, #15]
 686:../libs/core_cm3.c ****   
 687:../libs/core_cm3.c ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 1876              		.loc 1 687 0
 1877 01ae 7B68     		ldr	r3, [r7, #4]
 1878              	@ 687 "../libs/core_cm3.c" 1
 1879 01b0 D3E84F4F 		ldrexb r4, [r3]
 1880              	@ 0 "" 2
 1881              		.thumb
 1882 01b4 FC73     		strb	r4, [r7, #15]
 688:../libs/core_cm3.c ****    return(result);
 1883              		.loc 1 688 0
 1884 01b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 689:../libs/core_cm3.c **** }
 1885              		.loc 1 689 0
 1886 01b8 1846     		mov	r0, r3
 1887 01ba 07F11007 		add	r7, r7, #16
 1888 01be BD46     		mov	sp, r7
 1889 01c0 90BC     		pop	{r4, r7}
 1890 01c2 7047     		bx	lr
 1891              		.cfi_endproc
 1892              	.LFE16:
 1894              		.align	2
 1895              		.global	__LDREXH
 1896              		.thumb
 1897              		.thumb_func
 1899              	__LDREXH:
 1900              	.LFB17:
 690:../libs/core_cm3.c **** 
 691:../libs/core_cm3.c **** /**
 692:../libs/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 693:../libs/core_cm3.c ****  *
 694:../libs/core_cm3.c ****  * @param  *addr  address pointer
 695:../libs/core_cm3.c ****  * @return        value of (*address)
 696:../libs/core_cm3.c ****  *
 697:../libs/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 698:../libs/core_cm3.c ****  */
 699:../libs/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 700:../libs/core_cm3.c **** {
 1901              		.loc 1 700 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 16
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906 01c4 90B4     		push	{r4, r7}
 1907              	.LCFI39:
 1908              		.cfi_def_cfa_offset 8
 1909 01c6 84B0     		sub	sp, sp, #16
 1910              	.LCFI40:
 1911              		.cfi_def_cfa_offset 24
 1912 01c8 00AF     		add	r7, sp, #0
 1913              		.cfi_offset 7, -4
 1914              		.cfi_offset 4, -8
 1915              	.LCFI41:
 1916              		.cfi_def_cfa_register 7
 1917 01ca 7860     		str	r0, [r7, #4]
 701:../libs/core_cm3.c ****     uint16_t result=0;
 1918              		.loc 1 701 0
 1919 01cc 4FF00003 		mov	r3, #0
 1920 01d0 FB81     		strh	r3, [r7, #14]	@ movhi
 702:../libs/core_cm3.c ****   
 703:../libs/core_cm3.c ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 1921              		.loc 1 703 0
 1922 01d2 7B68     		ldr	r3, [r7, #4]
 1923              	@ 703 "../libs/core_cm3.c" 1
 1924 01d4 D3E85F4F 		ldrexh r4, [r3]
 1925              	@ 0 "" 2
 1926              		.thumb
 1927 01d8 FC81     		strh	r4, [r7, #14]	@ movhi
 704:../libs/core_cm3.c ****    return(result);
 1928              		.loc 1 704 0
 1929 01da FB89     		ldrh	r3, [r7, #14]
 705:../libs/core_cm3.c **** }
 1930              		.loc 1 705 0
 1931 01dc 1846     		mov	r0, r3
 1932 01de 07F11007 		add	r7, r7, #16
 1933 01e2 BD46     		mov	sp, r7
 1934 01e4 90BC     		pop	{r4, r7}
 1935 01e6 7047     		bx	lr
 1936              		.cfi_endproc
 1937              	.LFE17:
 1939              		.align	2
 1940              		.global	__LDREXW
 1941              		.thumb
 1942              		.thumb_func
 1944              	__LDREXW:
 1945              	.LFB18:
 706:../libs/core_cm3.c **** 
 707:../libs/core_cm3.c **** /**
 708:../libs/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 709:../libs/core_cm3.c ****  *
 710:../libs/core_cm3.c ****  * @param  *addr  address pointer
 711:../libs/core_cm3.c ****  * @return        value of (*address)
 712:../libs/core_cm3.c ****  *
 713:../libs/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 714:../libs/core_cm3.c ****  */
 715:../libs/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 716:../libs/core_cm3.c **** {
 1946              		.loc 1 716 0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 16
 1949              		@ frame_needed = 1, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 1951 01e8 90B4     		push	{r4, r7}
 1952              	.LCFI42:
 1953              		.cfi_def_cfa_offset 8
 1954 01ea 84B0     		sub	sp, sp, #16
 1955              	.LCFI43:
 1956              		.cfi_def_cfa_offset 24
 1957 01ec 00AF     		add	r7, sp, #0
 1958              		.cfi_offset 7, -4
 1959              		.cfi_offset 4, -8
 1960              	.LCFI44:
 1961              		.cfi_def_cfa_register 7
 1962 01ee 7860     		str	r0, [r7, #4]
 717:../libs/core_cm3.c ****     uint32_t result=0;
 1963              		.loc 1 717 0
 1964 01f0 4FF00003 		mov	r3, #0
 1965 01f4 FB60     		str	r3, [r7, #12]
 718:../libs/core_cm3.c ****   
 719:../libs/core_cm3.c ****    __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 1966              		.loc 1 719 0
 1967 01f6 7B68     		ldr	r3, [r7, #4]
 1968              	@ 719 "../libs/core_cm3.c" 1
 1969 01f8 53E8004F 		ldrex r4, [r3]
 1970              	@ 0 "" 2
 1971              		.thumb
 1972 01fc FC60     		str	r4, [r7, #12]
 720:../libs/core_cm3.c ****    return(result);
 1973              		.loc 1 720 0
 1974 01fe FB68     		ldr	r3, [r7, #12]
 721:../libs/core_cm3.c **** }
 1975              		.loc 1 721 0
 1976 0200 1846     		mov	r0, r3
 1977 0202 07F11007 		add	r7, r7, #16
 1978 0206 BD46     		mov	sp, r7
 1979 0208 90BC     		pop	{r4, r7}
 1980 020a 7047     		bx	lr
 1981              		.cfi_endproc
 1982              	.LFE18:
 1984              		.align	2
 1985              		.global	__STREXB
 1986              		.thumb
 1987              		.thumb_func
 1989              	__STREXB:
 1990              	.LFB19:
 722:../libs/core_cm3.c **** 
 723:../libs/core_cm3.c **** /**
 724:../libs/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 725:../libs/core_cm3.c ****  *
 726:../libs/core_cm3.c ****  * @param  value  value to store
 727:../libs/core_cm3.c ****  * @param  *addr  address pointer
 728:../libs/core_cm3.c ****  * @return        successful / failed
 729:../libs/core_cm3.c ****  *
 730:../libs/core_cm3.c ****  * Exclusive STR command for 8 bit values
 731:../libs/core_cm3.c ****  */
 732:../libs/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 733:../libs/core_cm3.c **** {
 1991              		.loc 1 733 0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 16
 1994              		@ frame_needed = 1, uses_anonymous_args = 0
 1995              		@ link register save eliminated.
 1996 020c 90B4     		push	{r4, r7}
 1997              	.LCFI45:
 1998              		.cfi_def_cfa_offset 8
 1999 020e 84B0     		sub	sp, sp, #16
 2000              	.LCFI46:
 2001              		.cfi_def_cfa_offset 24
 2002 0210 00AF     		add	r7, sp, #0
 2003              		.cfi_offset 7, -4
 2004              		.cfi_offset 4, -8
 2005              	.LCFI47:
 2006              		.cfi_def_cfa_register 7
 2007 0212 0346     		mov	r3, r0
 2008 0214 3960     		str	r1, [r7, #0]
 2009 0216 FB71     		strb	r3, [r7, #7]
 734:../libs/core_cm3.c ****    uint32_t result=0;
 2010              		.loc 1 734 0
 2011 0218 4FF00003 		mov	r3, #0
 2012 021c FB60     		str	r3, [r7, #12]
 735:../libs/core_cm3.c ****   
 736:../libs/core_cm3.c ****    __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 2013              		.loc 1 736 0
 2014 021e 3B68     		ldr	r3, [r7, #0]
 2015 0220 FA79     		ldrb	r2, [r7, #7]
 2016              	@ 736 "../libs/core_cm3.c" 1
 2017 0222 C3E8442F 		strexb r4, r2, [r3]
 2018              	@ 0 "" 2
 2019              		.thumb
 2020 0226 FC60     		str	r4, [r7, #12]
 737:../libs/core_cm3.c ****    return(result);
 2021              		.loc 1 737 0
 2022 0228 FB68     		ldr	r3, [r7, #12]
 738:../libs/core_cm3.c **** }
 2023              		.loc 1 738 0
 2024 022a 1846     		mov	r0, r3
 2025 022c 07F11007 		add	r7, r7, #16
 2026 0230 BD46     		mov	sp, r7
 2027 0232 90BC     		pop	{r4, r7}
 2028 0234 7047     		bx	lr
 2029              		.cfi_endproc
 2030              	.LFE19:
 2032 0236 00BF     		.align	2
 2033              		.global	__STREXH
 2034              		.thumb
 2035              		.thumb_func
 2037              	__STREXH:
 2038              	.LFB20:
 739:../libs/core_cm3.c **** 
 740:../libs/core_cm3.c **** /**
 741:../libs/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 742:../libs/core_cm3.c ****  *
 743:../libs/core_cm3.c ****  * @param  value  value to store
 744:../libs/core_cm3.c ****  * @param  *addr  address pointer
 745:../libs/core_cm3.c ****  * @return        successful / failed
 746:../libs/core_cm3.c ****  *
 747:../libs/core_cm3.c ****  * Exclusive STR command for 16 bit values
 748:../libs/core_cm3.c ****  */
 749:../libs/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 750:../libs/core_cm3.c **** {
 2039              		.loc 1 750 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 16
 2042              		@ frame_needed = 1, uses_anonymous_args = 0
 2043              		@ link register save eliminated.
 2044 0238 90B4     		push	{r4, r7}
 2045              	.LCFI48:
 2046              		.cfi_def_cfa_offset 8
 2047 023a 84B0     		sub	sp, sp, #16
 2048              	.LCFI49:
 2049              		.cfi_def_cfa_offset 24
 2050 023c 00AF     		add	r7, sp, #0
 2051              		.cfi_offset 7, -4
 2052              		.cfi_offset 4, -8
 2053              	.LCFI50:
 2054              		.cfi_def_cfa_register 7
 2055 023e 0346     		mov	r3, r0
 2056 0240 3960     		str	r1, [r7, #0]
 2057 0242 FB80     		strh	r3, [r7, #6]	@ movhi
 751:../libs/core_cm3.c ****    uint32_t result=0;
 2058              		.loc 1 751 0
 2059 0244 4FF00003 		mov	r3, #0
 2060 0248 FB60     		str	r3, [r7, #12]
 752:../libs/core_cm3.c ****   
 753:../libs/core_cm3.c ****    __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 2061              		.loc 1 753 0
 2062 024a 3B68     		ldr	r3, [r7, #0]
 2063 024c FA88     		ldrh	r2, [r7, #6]	@ movhi
 2064              	@ 753 "../libs/core_cm3.c" 1
 2065 024e C3E8542F 		strexh r4, r2, [r3]
 2066              	@ 0 "" 2
 2067              		.thumb
 2068 0252 FC60     		str	r4, [r7, #12]
 754:../libs/core_cm3.c ****    return(result);
 2069              		.loc 1 754 0
 2070 0254 FB68     		ldr	r3, [r7, #12]
 755:../libs/core_cm3.c **** }
 2071              		.loc 1 755 0
 2072 0256 1846     		mov	r0, r3
 2073 0258 07F11007 		add	r7, r7, #16
 2074 025c BD46     		mov	sp, r7
 2075 025e 90BC     		pop	{r4, r7}
 2076 0260 7047     		bx	lr
 2077              		.cfi_endproc
 2078              	.LFE20:
 2080 0262 00BF     		.align	2
 2081              		.global	__STREXW
 2082              		.thumb
 2083              		.thumb_func
 2085              	__STREXW:
 2086              	.LFB21:
 756:../libs/core_cm3.c **** 
 757:../libs/core_cm3.c **** /**
 758:../libs/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 759:../libs/core_cm3.c ****  *
 760:../libs/core_cm3.c ****  * @param  value  value to store
 761:../libs/core_cm3.c ****  * @param  *addr  address pointer
 762:../libs/core_cm3.c ****  * @return        successful / failed
 763:../libs/core_cm3.c ****  *
 764:../libs/core_cm3.c ****  * Exclusive STR command for 32 bit values
 765:../libs/core_cm3.c ****  */
 766:../libs/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 767:../libs/core_cm3.c **** {
 2087              		.loc 1 767 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 16
 2090              		@ frame_needed = 1, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
 2092 0264 90B4     		push	{r4, r7}
 2093              	.LCFI51:
 2094              		.cfi_def_cfa_offset 8
 2095 0266 84B0     		sub	sp, sp, #16
 2096              	.LCFI52:
 2097              		.cfi_def_cfa_offset 24
 2098 0268 00AF     		add	r7, sp, #0
 2099              		.cfi_offset 7, -4
 2100              		.cfi_offset 4, -8
 2101              	.LCFI53:
 2102              		.cfi_def_cfa_register 7
 2103 026a 7860     		str	r0, [r7, #4]
 2104 026c 3960     		str	r1, [r7, #0]
 768:../libs/core_cm3.c ****    uint32_t result=0;
 2105              		.loc 1 768 0
 2106 026e 4FF00003 		mov	r3, #0
 2107 0272 FB60     		str	r3, [r7, #12]
 769:../libs/core_cm3.c ****   
 770:../libs/core_cm3.c ****    __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 2108              		.loc 1 770 0
 2109 0274 3B68     		ldr	r3, [r7, #0]
 2110 0276 7A68     		ldr	r2, [r7, #4]
 2111              	@ 770 "../libs/core_cm3.c" 1
 2112 0278 43E80024 		strex r4, r2, [r3]
 2113              	@ 0 "" 2
 2114              		.thumb
 2115 027c FC60     		str	r4, [r7, #12]
 771:../libs/core_cm3.c ****    return(result);
 2116              		.loc 1 771 0
 2117 027e FB68     		ldr	r3, [r7, #12]
 772:../libs/core_cm3.c **** }
 2118              		.loc 1 772 0
 2119 0280 1846     		mov	r0, r3
 2120 0282 07F11007 		add	r7, r7, #16
 2121 0286 BD46     		mov	sp, r7
 2122 0288 90BC     		pop	{r4, r7}
 2123 028a 7047     		bx	lr
 2124              		.cfi_endproc
 2125              	.LFE21:
 2127              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 core_cm3.c
     /tmp/cclUpCSt.s:1241   .text:00000000 $t
     /tmp/cclUpCSt.s:1246   .text:00000000 __get_PSP
     /tmp/cclUpCSt.s:1275   .text:00000010 __set_PSP
     /tmp/cclUpCSt.s:1299   .text:00000018 __get_MSP
     /tmp/cclUpCSt.s:1328   .text:00000028 __set_MSP
     /tmp/cclUpCSt.s:1352   .text:00000030 __get_BASEPRI
     /tmp/cclUpCSt.s:1395   .text:00000050 __set_BASEPRI
     /tmp/cclUpCSt.s:1432   .text:00000068 __get_PRIMASK
     /tmp/cclUpCSt.s:1475   .text:00000088 __set_PRIMASK
     /tmp/cclUpCSt.s:1512   .text:000000a0 __get_FAULTMASK
     /tmp/cclUpCSt.s:1555   .text:000000c0 __set_FAULTMASK
     /tmp/cclUpCSt.s:1592   .text:000000d8 __get_CONTROL
     /tmp/cclUpCSt.s:1635   .text:000000f8 __set_CONTROL
     /tmp/cclUpCSt.s:1672   .text:00000110 __REV
     /tmp/cclUpCSt.s:1717   .text:00000134 __REV16
     /tmp/cclUpCSt.s:1763   .text:00000158 __REVSH
     /tmp/cclUpCSt.s:1809   .text:0000017c __RBIT
     /tmp/cclUpCSt.s:1854   .text:000001a0 __LDREXB
     /tmp/cclUpCSt.s:1899   .text:000001c4 __LDREXH
     /tmp/cclUpCSt.s:1944   .text:000001e8 __LDREXW
     /tmp/cclUpCSt.s:1989   .text:0000020c __STREXB
     /tmp/cclUpCSt.s:2037   .text:00000238 __STREXH
     /tmp/cclUpCSt.s:2085   .text:00000264 __STREXW
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
